Week 20 update
##############
:date: 2024-05-20 11:47:32
:modified: 2024-05-20 11:47:32
:author: ankur
:category: Life
:tags: Computational Neuroscience, Fedora, NeuroML, Open Source Brain, GSoC, Outreachy
:slug: week-20-update
:summary: Weekly update for week #20.

NeuroML related
=================

.. figure:: {static}/images/neuroml-logo.png
    :width: 40 %
    :align: center
    :alt: NeuroML is a standard and software ecosystem for biophysically detailed neuronal modelling.
    :class: text-center img-responsive pagination-centered

    NeuroML_ is a standard and software ecosystem for biophysically detailed neuronal modelling.


Work continues on pyNeuroML_.

Animations, and saving them
---------------------------

`YBCS improved our plotting code to allow creation and saving of animations <https://github.com/NeuroML/pyNeuroML/pull/348>`__, using `Matplotlib <https://matplotlib.org/stable/users/explain/animations/animations.html>`__. This is useful for analysis, and also for dissemination.

So, for instance, one can generate this animation from our `single izhikevich neuron documentation example <https://docs.neuroml.org/Userdocs/SingleNeuronExample.html#>`__:

.. figure:: {static}/images/20240520-izhikevich-animation-loop.gif
    :width: 40 %
    :align: center
    :alt: An animated GIF showing the membrane potential of a regular spiking Izhikevich neuron.
    :class: img-responsive

    An animated GIF showing the membrane potential of a regular spiking Izhikevich neuron.


Here's an example script that reads in the data generated by our example and saves the animation in a GIF file:

.. code:: python

    #!/usr/bin/env python3
    from pyneuroml.plot import generate_plot
    from pyneuroml.runners import reload_saved_data

    data = reload_saved_data("./LEMS_example-single-izhikevich2007cell-sim.xml")
    generate_plot([data['t']], [data['IzhPop0[0]/v']], animate=True,
                  save_figure_to="izhikevich.gif", title="Membrane potential")

Generating the animation doesn't take so much time, but saving it does.
From what I've managed to find (for example, on `this ticket <https://github.com/matplotlib/matplotlib/issues/13561/>`__), saving of the animation relies on piping it to external tools ("animation writers"), and that bit seems to take time.
We use a `progressbar <https://progressbar-2.readthedocs.io/en/latest/>`__ to provide some feedback to the user, so they have some idea of how long to expect it to take.

.. code:: console

    python test-animate.py
    pyNeuroML >>> INFO - Generating plot: Membrane potential
    pyNeuroML >>> INFO - Saving animation of 5000ms to izhikevich.gif using pillow
    pyNeuroML >>> INFO - This could take a while..
    10000 of 10000|#######################################################################################################################################|Elapsed Time: 0:03:29
    pyNeuroML >>> INFO - Saved animation to izhikevich.gif
    pyNeuroML >>> INFO - Closing plot


Using Vispy visualisations in Jupyter notebooks
------------------------------------------------

`Vispy <https://vispy.org>`__ visualisations can also work in Jupyter notebooks using `jupyter_rfb <https://github.com/vispy/jupyter_rfb>`__.
It'll be very good for us to make this work for our visualisations too, so that users can view their cells and networks in 3D in their notebooks.
I tinkered with it a bit but could not get jupyter_rfb to work for me.
I filed a `bug <https://github.com/vispy/jupyter_rfb/issues/89>`__ upstream, and it was quickly fixed.
I now need to continue playing with it to see what changes, if any, we need to make to our code to make our visualisations work.

Google Summer of Code
----------------------


We had our first meeting with our two GSoC interns.
It's still only the community bonding period, so they're just tinkering with the code and reading the documentation to get a feel for how things work.
They've both already been working on pull requests, so they're already ahead of time.

It was really good to have a chat with them.
We talked about what they hope to get out of the internship and so on, so that we can tweak the tasks to ensure that the internship benefits them.


Model standardization
---------------------

I continued to work on converting the Purkinje cell model from `Zang et al <https://www.cell.com/cell-reports/fulltext/S2211-1247(18)31088-X>`__.
I'm still working on the biophysics.
There are a few ion channels where the dynamics are described in `kinetic state <https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-gateks>`__ formalism that one has to convert manually.
Analysing these to verify that they've been converted correctly is hard too, because unlike ion channels that follow the standard Hodgkin-Huxley formalism, the gates in the Kinetic State ion channels don't have their steady state and decay time constants directly available.
So, we're going to have to simulate a passive cell with a single Kinetic State ion channel, both for the original NEURON implementation of the ion channel and for our NeuroML conversion, and then we'll compare the various generated biophysics (and iteratively tweak our conversion until they match).

Open Source Brain
==================

Open Source Brain (OSB_) is a web platform for neuroscientists.
`Version 1 <https://v1.opensourcebrain.org>`__ was focussed on the sharing and archival of biophysically detailed models, standardised in NeuroML_.
There are a number of published models on the platform that one can visualise and study there already:

.. figure:: {static}/images/20240520-osbv1.png
    :width: 80 %
    :align: center
    :alt: A screenshot of Open Source Brain version 1.
    :class: text-center img-responsive pagination-centered

    A screenshot of Open Source Brain version 1.


The newer version, `version 2 <https://v2.opensourcebrain.org>`__ takes it a step further.
Its goal is to be a cloud based integrated research environment where people can store their data and their code in "workspaces", and work in the cloud, requesting as many resources as they need.
This means that people no longer have to set up their own computers/lab servers---the platform will provide the computing infrastructure and the required tools in a web browser.
OSBv2 also indexes a number of data sources to make it easier for researchers to find data and models, such as:

- `DANDI archive <https://www.dandiarchive.org>`__
- `Model-DB <https://modeldb.science>`__


.. figure:: {static}/images/20240520-osbv2.png
    :width: 80 %
    :align: center
    :alt: A screenshot of Open Source Brain version 2.
    :class: text-center img-responsive pagination-centered

    A screenshot of Open Source Brain version 2.


OSBv2 also integrates a number of web applications for users:

- NetPyNE-UI: an interface for the popular `NetPyNE <https://netpyne.org>`__ model building library
- NWB Explorer: an interface for visualising `Neurodata Without Borders (NWB) <https://nwb.org>`__ files
- `Jupyter Lab <https://jupyter.org>`__


We're working on integrating `biosimulations.org <https://biosimulations.org>`__ as another data source now.
This requires adding an adapter to the back end that understands the biosimulations.org API so that it can use it to pull information from there to index.
An initial version has already been implemented.
We now need to test it.

OSBv2: dev environment
----------------------

Since OSBv2 is cloud based (currently deployed on Google Cloud), it makes use of containers and `Kubernetes <https://kubernetes.io/>`__ (our software partners, `MetaCell <https://metacell.us>`__ manage our infrastructure and a majority of the development/maintenance of OSB_).
The complete platform is also broken down into a number of services.
To test changes and develop, therefore, one has to run a local deployment.
We've documented the steps in our `readme <https://github.com/OpenSourceBrain/OSBv2/blob/master/README.md>`__, and I've got `a script <https://github.com/sanjayankur31/100_dotfiles/blob/main/bin/deploy-osbv2.sh>`__ to automate the various steps.

Of course, it's never that simple.
While my script had worked the last time I had tinkered with OSBv2, it didn't work last week and I spent hours trying to figure out why.
I need to continue with that this week too.

Software Working Group
=======================

The `Software Working Group <https://ocns.github.io/SoftwareWG/index.html>`__ is an open community working group about all things software.
It's shared by the `International Neuroinformatics Co-ordinating Facility <https://incf.org>`__ and the `Organization for Computational Neuroscience <https://www.cnsorg.org>`__.
The idea is simply to have a community for exchange of ideas related to research/neuroscience software development.
The working group is based on GitHub, and open to anyone at all.

Last week, we had `a session on SpikeInterface where Pierre Yger presented the tool to the community <https://ocns.github.io/SoftwareWG/2024/05/07/wg-meeting-14-may-2024-spikeinterface-pierre-yger-.html>`__.
It was recorded, and the recordings should be on the `INCF YouTube channel <https://www.youtube.com/@IncfOrg_INCF>`__ soon.

Fedora
=======

I worked on a few `Neuro SIG <https://packager-dashboard.fedoraproject.org/dashboard?groups=neuro-sig>`__ packages--updates, Fails to Build From Source (FTBFS) issues, and so on.
Not much to report in detail here.

.. _NeuroML: https://neuroml.org
.. _pyNeuroML: https://github.com/NeuroML/pyNeuroML
.. _OSB: https://www.opensourcebrain.org/
