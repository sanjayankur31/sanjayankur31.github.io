<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>ankursinha.in/blog - Research</title><link href="/" rel="alternate"></link><link href="/feeds/research.atom.xml" rel="self"></link><id>/</id><updated>2018-11-24T18:37:28+00:00</updated><entry><title>NeuroFedora update: week 47</title><link href="/2018/11/24/neurofedora-update-week-47.html" rel="alternate"></link><published>2018-11-24T18:37:28+00:00</published><updated>2018-11-24T18:37:28+00:00</updated><author><name>ankur</name></author><id>tag:None,2018-11-24:/2018/11/24/neurofedora-update-week-47.html</id><summary type="html">&lt;p class="first last"&gt;A quick update on &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora&lt;/a&gt; at the end of week 47. We've made more
progress on the software that we're trying to provide. More
importantly, more volunteers have joined the core team!&lt;/p&gt;
</summary><content type="html">&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="/images/20181005-NeuroFedoraLogo01.png"&gt;&lt;img alt="NeuroFedora logo!" class="text-center img-responsive pagination-centered" src="/images/20181005-NeuroFedoraLogo01.png" style="width: 30%;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;a class="reference external" href="https://pagure.io/design/issue/602"&gt;NeuroFedora logo by Terezahl from the Fedora Design Team&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In week 47:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-dipy"&gt;python-dipy&lt;/a&gt; was included and is in testing.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-pygiftiio"&gt;pygiftiio&lt;/a&gt; was included and is in testing.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-pybids"&gt;python-pybids&lt;/a&gt; went stable and is now in testing&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-pyphi"&gt;python-pyphi&lt;/a&gt; was included and is in testing.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-efel"&gt;python-efel&lt;/a&gt; was included and is in testing.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-pymatreader"&gt;python-pymatreader&lt;/a&gt; was included and is in testing.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-mne"&gt;python-mne&lt;/a&gt; was included and is in testing.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-fsleyes"&gt;fsleyes&lt;/a&gt; went stable and is now ready for use.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/nest"&gt;NEST&lt;/a&gt; has now been built with &lt;a class="reference external" href="https://src.fedoraproject.org/rpms/libneurosim"&gt;libneurosim&lt;/a&gt; support and is in testing.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-pyemd"&gt;python-pyemd&lt;/a&gt; went stable and is now ready for use&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/brian"&gt;Brian&lt;/a&gt; went stable and is now ready for use&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Quite a few Fedora community members have helped us out again this week.
&lt;a class="reference external" href="https://fedoraproject.org/wiki/User:Lbazan"&gt;lbazan&lt;/a&gt;, &lt;a class="reference external" href="https://fedoraproject.org/wiki/User:Blackfile"&gt;blackfile&lt;/a&gt;, and &lt;a class="reference external" href="https://fedoraproject.org/wiki/User:Mhough"&gt;mhough&lt;/a&gt; have all joined the &lt;a class="reference external" href="https://pagure.io/group/neuro-sig"&gt;core team&lt;/a&gt; too. In another news:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;upstream &lt;a class="reference external" href="https://github.com/nest/nest-simulator/issues/1063"&gt;clarified&lt;/a&gt;
how &lt;a class="reference external" href="https://src.fedoraproject.org/rpms/libneurosim"&gt;libneurosim&lt;/a&gt; was to be used with &lt;a class="reference external" href="https://src.fedoraproject.org/rpms/nest"&gt;NEST&lt;/a&gt;. We can now work on &lt;a class="reference external" href="https://github.com/NeuralEnsemble/PyNN"&gt;PyNN&lt;/a&gt; so that
it can at least be used with &lt;a class="reference external" href="https://src.fedoraproject.org/rpms/nest"&gt;NEST&lt;/a&gt; and &lt;a class="reference external" href="https://src.fedoraproject.org/rpms/brian"&gt;Brian&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/nest"&gt;NEST&lt;/a&gt; has been &lt;a class="reference external" href="https://github.com/nest/nest-simulator/pull/1065"&gt;tweaked to support 32 bit hardware again&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pagure.io/neuro-sig/NeuroFedora/issue/27"&gt;NEURON&lt;/a&gt; has been updated to use a more recent version of &lt;a class="reference external" href="https://computation.llnl.gov/projects/sundials"&gt;SUNDIALS&lt;/a&gt;. Once this
has been merged into the main codebase, we can proceed with packaging &lt;a class="reference external" href="https://pagure.io/neuro-sig/NeuroFedora/issue/27"&gt;NEURON&lt;/a&gt;
too.&lt;/li&gt;
&lt;li&gt;We've set up a Telegram group for &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora&lt;/a&gt; here: &lt;a class="reference external" href="https://t.me/NeuroFedora"&gt;https://t.me/NeuroFedora&lt;/a&gt;
We'll bridge this to the &lt;a class="reference external" href="https://webchat.freenode.net/?channels=#fedora-neuro"&gt;IRC channel&lt;/a&gt; in the near future.
These channels can be used to get in touch with the team for troubleshooting
and so on.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;There is a lot of software available in &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora&lt;/a&gt; already. You can see the
complete list &lt;a class="reference external" href="https://src.fedoraproject.org/group/neuro-sig"&gt;here on Fedora SCM&lt;/a&gt;. Software that is currently
being worked on is listed &lt;a class="reference external" href="https://pagure.io/neuro-sig/NeuroFedora/issues"&gt;on our Pagure project instance&lt;/a&gt;. If you use software that
is not on our list, please suggest it to us using the &lt;a class="reference external" href="https://goo.gl/forms/j6AJ82yOh78MPxby1"&gt;suggestion form&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feedback is always welcome. You can get in touch with us &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora#Communication_and_getting_help"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content><category term="Community"></category><category term="Computational neuroscience"></category><category term="Free software"></category><category term="NEST"></category><category term="Fedora"></category><category term="NeuroFedora"></category><category term="Planet"></category></entry><entry><title>NeuroFedora update: week 46</title><link href="/2018/11/17/neurofedora-update-week-46.html" rel="alternate"></link><published>2018-11-17T15:53:58+00:00</published><updated>2018-11-17T15:53:58+00:00</updated><author><name>ankur</name></author><id>tag:None,2018-11-17:/2018/11/17/neurofedora-update-week-46.html</id><summary type="html">&lt;p class="first last"&gt;A quick update on &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora&lt;/a&gt; at the end of week 46. &lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-brian2"&gt;Brian&lt;/a&gt; and
more software are now ready to use.&lt;/p&gt;
</summary><content type="html">&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="/images/20181005-NeuroFedoraLogo01.png"&gt;&lt;img alt="NeuroFedora logo!" class="text-center img-responsive pagination-centered" src="/images/20181005-NeuroFedoraLogo01.png" style="width: 30%;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;a class="reference external" href="https://pagure.io/design/issue/602"&gt;NeuroFedora logo by Terezahl from the Fedora Design Team&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In week 46:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-nitime"&gt;python-nitime&lt;/a&gt; was pushed to stable, and is ready to use.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-nilearn"&gt;python-nilearn&lt;/a&gt; was pushed to stable, and is ready to use.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-petlink"&gt;python-petlink&lt;/a&gt; was pushed to stable, and is ready to use.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-duecredit"&gt;python-duecredit&lt;/a&gt; was pushed to stable, and is ready to use.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-PyLEMS"&gt;PyLEMS&lt;/a&gt; was pushed to stable, and is ready to use.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-visionegg-quest"&gt;python-visionegg-quest&lt;/a&gt; was pushed to stable, and is ready to use.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-pyemd"&gt;python-pyemd&lt;/a&gt; was approved and is in testing.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-pybids"&gt;python-pybids&lt;/a&gt; was approved and is in testing.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-nineml"&gt;nineML-python&lt;/a&gt; was approved and is in testing.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-brian2"&gt;Brian&lt;/a&gt; (the Brian simulator) was approved and is in testing.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-fsleyes"&gt;fsleyes&lt;/a&gt; was approved and is in testing.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/dcm2niix"&gt;dcm2niix&lt;/a&gt; was updated to the latest version.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;While we were working on these:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pagure.io/neuro-sig/NeuroFedora/issue/27"&gt;NEURON&lt;/a&gt; is still a work in progress, but until it is updated to work with a
new SUNDIALS version, it cannot be packaged. There's an issue open &lt;a class="reference external" href="https://github.com/neuronsimulator/nrn/issues/113"&gt;here&lt;/a&gt; for this.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/vxl"&gt;vxl&lt;/a&gt; needs to be updated, but unfortunately, it is another software that
bundles an old version of a library, &lt;a class="reference external" href="https://src.fedoraproject.org/rpms/dcmtk"&gt;DCMTK&lt;/a&gt;. I've filed a ticket about this
&lt;a class="reference external" href="https://github.com/vxl/vxl/issues/550"&gt;here&lt;/a&gt;. As I've mentioned in the
ticket, I  have neither the experience with &lt;a class="reference external" href="https://src.fedoraproject.org/rpms/dcmtk"&gt;DCMTK&lt;/a&gt; nor the free cycles to
look into this issue presently.&lt;/li&gt;
&lt;li&gt;A &lt;a class="reference external" href="https://github.com/INCF/nineml-python/issues/40"&gt;bug&lt;/a&gt; in &lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-nineml"&gt;nineml-python&lt;/a&gt;
was fixed.&lt;/li&gt;
&lt;li&gt;There are still a few kinks to clear up before &lt;a class="reference external" href="https://github.com/nest/nest-simulator"&gt;NEST&lt;/a&gt; can be build with
&lt;a class="reference external" href="https://github.com/nest/nest-simulator/issues/1063"&gt;libneurosim&lt;/a&gt; and
&lt;a class="reference external" href="https://github.com/INCF/MUSIC/issues/56"&gt;MUSIC&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll keep at it.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;There is a lot of software available in &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora&lt;/a&gt; already. You can see the
complete list &lt;a class="reference external" href="https://src.fedoraproject.org/group/neuro-sig"&gt;here on Fedora SCM&lt;/a&gt;. Software that is currently
being worked on is listed &lt;a class="reference external" href="https://pagure.io/neuro-sig/NeuroFedora/issues"&gt;on our Pagure project instance&lt;/a&gt;. If you use software that
is not on our list, please suggest it to us using the &lt;a class="reference external" href="https://goo.gl/forms/j6AJ82yOh78MPxby1"&gt;suggestion form&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feedback is always welcome. You can get in touch with us &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora#Communication_and_getting_help"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content><category term="Community"></category><category term="Computational neuroscience"></category><category term="Free software"></category><category term="NEST"></category><category term="Fedora"></category><category term="NeuroFedora"></category><category term="Planet"></category></entry><entry><title>NeuroFedora update: week 45</title><link href="/2018/11/10/neurofedora-update-week-45.html" rel="alternate"></link><published>2018-11-10T11:20:00+00:00</published><updated>2018-11-10T11:20:00+00:00</updated><author><name>ankur</name></author><id>tag:None,2018-11-10:/2018/11/10/neurofedora-update-week-45.html</id><summary type="html">&lt;p class="first last"&gt;A quick update on &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora&lt;/a&gt; at the end of week 45. More software,
some housekeeping, and a few upstream tickets.&lt;/p&gt;
</summary><content type="html">&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="/images/20181005-NeuroFedoraLogo01.png"&gt;&lt;img alt="NeuroFedora logo!" class="text-center img-responsive pagination-centered" src="/images/20181005-NeuroFedoraLogo01.png" style="width: 30%;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;a class="reference external" href="https://pagure.io/design/issue/602"&gt;NeuroFedora logo by Terezahl from the Fedora Design Team&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In week 45:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/libneurosim"&gt;libneurosim&lt;/a&gt; was pushed to the stable repositories. &lt;a class="reference external" href="https://github.com/nest/nest-simulator/wiki/issue-labeling-scheme"&gt;NEST&lt;/a&gt; does not build with
it yet, because &lt;a class="reference external" href="https://github.com/nest/nest-simulator/wiki/issue-labeling-scheme"&gt;NEST&lt;/a&gt; tries to link with both &lt;a class="reference external" href="https://src.fedoraproject.org/rpms/libneurosim"&gt;libneurosim&lt;/a&gt; and its Python
bindings during the build. I've filed a &lt;a class="reference external" href="https://github.com/nest/nest-simulator/issues/1063"&gt;ticket upstream&lt;/a&gt;  to clarify if this
is correct. I have already &lt;a class="reference external" href="https://github.com/INCF/libneurosim/issues/12"&gt;filed a PR&lt;/a&gt; that puts the &lt;a class="reference external" href="https://src.fedoraproject.org/rpms/libneurosim"&gt;libneurosim&lt;/a&gt;
Python bindings in the right location.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-libNeuroML"&gt;python-libNeuroML&lt;/a&gt; was pushed to the stable repositories and is now ready to use.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pagure.io/neuro-sig/NeuroFedora/issue/56"&gt;biosig&lt;/a&gt; is a WIP. It required &lt;a class="reference external" href="https://src.fedoraproject.org/rpms/libb64"&gt;libb64&lt;/a&gt; which was approved this week and is
currently in testing.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-duecredit"&gt;python-duecredit&lt;/a&gt; is currently in testing. It should be pushed to stable in a
few days.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-visionegg-quest"&gt;python-visionegg-quest&lt;/a&gt; is currently in testing. It should be pushed to stable in a
few days.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-nibabel"&gt;python-nibabel&lt;/a&gt; was updated to the latest version and is currently in
testing.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-grabbit"&gt;python-grabbit&lt;/a&gt; was updated to the latest version and is currently in
testing.&lt;/li&gt;
&lt;li&gt;On the way to building &lt;a class="reference external" href="https://pagure.io/neuro-sig/NeuroFedora/issue/3"&gt;fsleyes&lt;/a&gt;, &lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-fslpy"&gt;fslpy&lt;/a&gt;, &lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-fsleyes-props"&gt;fsleyes-props&lt;/a&gt;, &lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-fsleyes-widgets"&gt;fsleyes-widgets&lt;/a&gt;
have all been reviewed, approved, and are now in testing.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-nitime"&gt;python-nitime&lt;/a&gt; was approved and is in testing.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-nilearn"&gt;python-nilearn&lt;/a&gt; was approved and is in testing.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-petlink"&gt;python-petlink&lt;/a&gt; was approved and is in testing. This also required an update
to &lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-simplewrap"&gt;python-simplewrap&lt;/a&gt;. Upstream was really quick to &lt;a class="reference external" href="https://github.com/spedemon/petlink/issues/2"&gt;make the required fixes
for us&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All new packages must go through &lt;a class="reference external" href="https://getfedora.org"&gt;Fedora&lt;/a&gt;'s QA (testing) process before being
made available to end users in the repositories. You can help test these
packages following the instructions &lt;a class="reference external" href="https://fedoraproject.org/wiki/QA:Updates_Testing?rd=QA/Updates_Testing"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A lot of the software we worked on this week was related to neuro-imaging, and
fortunately, a lot of it was Python based which is usually quite simple to
build. The coming week, though, I intend to work on &lt;a class="reference external" href="https://pagure.io/neuro-sig/NeuroFedora/issue/27"&gt;NEURON&lt;/a&gt;. Unfortunately,
&lt;a class="reference external" href="https://pagure.io/neuro-sig/NeuroFedora/issue/27"&gt;NEURON&lt;/a&gt; isn't the easiest to build:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It depends on &lt;a class="reference external" href="https://github.com/neuronsimulator/iv"&gt;iv&lt;/a&gt;, which bundles a really old version of &lt;a class="reference external" href="http://www.simplesystems.org/libtiff/"&gt;libtiff&lt;/a&gt;. I've filed
a ticket &lt;a class="reference external" href="https://github.com/neuronsimulator/iv/issues/3"&gt;here&lt;/a&gt; about
this, but have not had the time to port the code to the newest version of
&lt;a class="reference external" href="http://www.simplesystems.org/libtiff/"&gt;libtiff&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pagure.io/neuro-sig/NeuroFedora/issue/27"&gt;NEURON&lt;/a&gt; bundles &lt;a class="reference external" href="https://src.fedoraproject.org/rpms/Random123"&gt;Random123&lt;/a&gt;, which was relatively easy to remove. However,
&lt;a class="reference external" href="https://pagure.io/neuro-sig/NeuroFedora/issue/27"&gt;NEURON&lt;/a&gt; also bundles a really old version of the &lt;a class="reference external" href="https://computation.llnl.gov/projects/sundials"&gt;SUNDIALS&lt;/a&gt; libraries, and
updating the code to use the latest versions is not straightforward. I have
filed an issue about it &lt;a class="reference external" href="https://github.com/neuronsimulator/nrn/issues/113"&gt;here&lt;/a&gt; now. This is based on
my initial investigations into building &lt;a class="reference external" href="https://pagure.io/neuro-sig/NeuroFedora/issue/27"&gt;NEURON&lt;/a&gt;. So there's a chance that
more work will need to be done once these issues are solved.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;There is a lot of software available in &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora&lt;/a&gt; already. You can see the
complete list &lt;a class="reference external" href="https://src.fedoraproject.org/group/neuro-sig"&gt;here on Fedora SCM&lt;/a&gt;. Software that is currently
being worked on is listed &lt;a class="reference external" href="https://pagure.io/neuro-sig/NeuroFedora/issues"&gt;on our Pagure project instance&lt;/a&gt;. If you use software that
is not on our list, please suggest it to us using the &lt;a class="reference external" href="https://goo.gl/forms/j6AJ82yOh78MPxby1"&gt;suggestion form&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feedback is always welcome. You can get in touch with us &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora#Communication_and_getting_help"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="the-fedora-community-enabling-open-science"&gt;
&lt;h2&gt;The Fedora community: enabling Open Science&lt;/h2&gt;
&lt;p&gt;While the &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora&lt;/a&gt; SIG is actively working on these packages, it would not
be possible without our friends in the &lt;a class="reference external" href="https://getfedora.org"&gt;Fedora&lt;/a&gt; community that have helped with
the various stages of the package maintenance pipeline.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://fedoraproject.org/wiki/User:Eclipseo"&gt;eclipseo&lt;/a&gt;, &lt;a class="reference external" href="https://fedoraproject.org/wiki/User:Churchyard"&gt;churchyard&lt;/a&gt;, &lt;a class="reference external" href="https://fedoraproject.org/wiki/User:Blackfile"&gt;blackfile&lt;/a&gt;, &lt;a class="reference external" href="https://fedoraproject.org/wiki/User:Zbyszek"&gt;zbyszek&lt;/a&gt; have reviewed these packages
before approving them for inclusion in &lt;a class="reference external" href="https://getfedora.org"&gt;Fedora&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The awesome folks at &lt;a class="reference external" href="https://pagure.io/releng"&gt;releng&lt;/a&gt; have, of course, been super quick with SCM
requests.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We're grateful to the various upstreams that we're bothering with issues, and
everyone in the &lt;a class="reference external" href="https://getfedora.org"&gt;Fedora&lt;/a&gt; community (including people I may have missed) for
enabling us to further &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Open_science"&gt;Open Science&lt;/a&gt; via &lt;a class="reference external" href="https://getfedora.org"&gt;Fedora&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Community"></category><category term="Computational neuroscience"></category><category term="Free software"></category><category term="NEST"></category><category term="Fedora"></category><category term="NeuroFedora"></category><category term="Planet"></category></entry><entry><title>NeuroFedora update: week 44</title><link href="/2018/11/03/neurofedora-update-week-44.html" rel="alternate"></link><published>2018-11-03T10:02:24+00:00</published><updated>2018-11-03T10:02:24+00:00</updated><author><name>ankur</name></author><id>tag:None,2018-11-03:/2018/11/03/neurofedora-update-week-44.html</id><summary type="html">&lt;p class="first last"&gt;A quick update on &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora&lt;/a&gt; at the end of week 44. More software,
some housekeeping, and a few upstream tickets.&lt;/p&gt;
</summary><content type="html">&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="/images/20181005-NeuroFedoraLogo01.png"&gt;&lt;img alt="NeuroFedora logo!" class="text-center img-responsive pagination-centered" src="/images/20181005-NeuroFedoraLogo01.png" style="width: 30%;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;a class="reference external" href="https://pagure.io/design/issue/602"&gt;NeuroFedora logo by Terezahl from the Fedora Design Team&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In week 44:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-PyLEMS"&gt;PyLEMS&lt;/a&gt; was imported into Fedora and is now in &lt;a class="reference external" href="https://bodhi.fedoraproject.org/updates/?packages=python-PyLEMS"&gt;testing&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We received a suggestion to include &lt;a class="reference external" href="https://git.fmrib.ox.ac.uk/fsl/fsleyes"&gt;fsleyes&lt;/a&gt;, so we've begun working on that.
Two of its dependencies are in review now: &lt;a class="reference external" href="https://bugzilla.redhat.com/show_bug.cgi?id=1645329"&gt;fslpy&lt;/a&gt; and &lt;a class="reference external" href="https://bugzilla.redhat.com/show_bug.cgi?id=1645661"&gt;fsleyes-widgets&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keeping in line with the spirit of FOSS development, we try to &lt;a class="reference external" href="https://fedoraproject.org/wiki/Staying_close_to_upstream_projects"&gt;stay close to
upstream&lt;/a&gt;, so:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/python-PyLEMS"&gt;PyLEMS&lt;/a&gt;: issues were filed to request that &lt;a class="reference external" href="https://github.com/LEMS/pylems/issues/42"&gt;examples&lt;/a&gt; and the &lt;a class="reference external" href="https://github.com/LEMS/pylems/issues/39"&gt;license
text&lt;/a&gt; be included in the PyPi
tarball.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/NeuroML/NeuroMLlite"&gt;NeuroMLlite&lt;/a&gt;: I opened a &lt;a class="reference external" href="https://github.com/NeuroML/NeuroMLlite/pull/2"&gt;PR adding the license file to the sources&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/INCF/MUSIC"&gt;MUSIC&lt;/a&gt;: Unfortunately &lt;a class="reference external" href="https://github.com/INCF/MUSIC"&gt;MUSIC&lt;/a&gt; uses a private copy of &lt;a class="reference external" href="https://github.com/mflood/rudeconfig"&gt;rudeconfig&lt;/a&gt; that contains
changes that have not yet been sent upstream. Bundling is &lt;a class="reference external" href="https://fedoraproject.org/wiki/Packaging:Guidelines#Bundling_and_Duplication_of_system_libraries"&gt;to be avoided&lt;/a&gt;
in Fedora for good reason, so I've filed a ticket &lt;a class="reference external" href="https://github.com/INCF/MUSIC/issues/56"&gt;asking if the local
changes to rudeconfig could be sent upstream&lt;/a&gt;. Until this is solved,
&lt;a class="reference external" href="https://github.com/INCF/MUSIC"&gt;MUSIC&lt;/a&gt; cannot be included in Fedora, unless a bundling exception is made.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The task list was moved to the &lt;a class="reference external" href="https://pagure.io/neuro-sig/NeuroFedora/issues"&gt;Pagure issue tracker&lt;/a&gt;.
I've done a bit of housekeeping so that we now use labels like the &lt;a class="reference external" href="https://github.com/nest/nest-simulator/wiki/issue-labeling-scheme"&gt;NEST&lt;/a&gt;
initiative does, inspired by &lt;a class="reference external" href="https://medium.com/&amp;#64;dave_lunny/sane-github-labels-c5d2e6004b63#.ve6i7zcou"&gt;this post&lt;/a&gt;.
It really does make handling issues much easier.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;There is a lot of software available in &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora&lt;/a&gt; already. You can see the
complete list &lt;a class="reference external" href="https://src.fedoraproject.org/group/neuro-sig"&gt;here on Fedora SCM&lt;/a&gt;. Software that is currently
being worked on is listed &lt;a class="reference external" href="https://pagure.io/neuro-sig/NeuroFedora/issues"&gt;on our Pagure project instance&lt;/a&gt;. If you use software that
is not on our list, please suggest it to us using the &lt;a class="reference external" href="https://goo.gl/forms/j6AJ82yOh78MPxby1"&gt;suggestion form&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feedback is always welcome. You can get in touch with us &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora#Communication_and_getting_help"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content><category term="Community"></category><category term="Computational neuroscience"></category><category term="Free software"></category><category term="NEST"></category><category term="Fedora"></category><category term="NeuroFedora"></category><category term="Planet"></category></entry><entry><title>NeuroFedora update: week 43</title><link href="/2018/10/27/neurofedora-update-week-43.html" rel="alternate"></link><published>2018-10-27T10:56:49+01:00</published><updated>2018-10-27T10:56:49+01:00</updated><author><name>ankur</name></author><id>tag:None,2018-10-27:/2018/10/27/neurofedora-update-week-43.html</id><summary type="html">&lt;p class="first last"&gt;A quick update on &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora&lt;/a&gt; at the end of week 43.&lt;/p&gt;
</summary><content type="html">&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="/images/20181005-NeuroFedoraLogo01.png"&gt;&lt;img alt="NeuroFedora logo!" class="text-center img-responsive pagination-centered" src="/images/20181005-NeuroFedoraLogo01.png" style="width: 30%;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;a class="reference external" href="https://pagure.io/design/issue/602"&gt;NeuroFedora logo by Terezahl from the Fedora Design Team&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In week 43:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/INCF/libneurosim"&gt;libneurosim&lt;/a&gt; was &lt;a class="reference external" href="https://bugzilla.redhat.com/show_bug.cgi?id=1638968"&gt;reviewed and approved&lt;/a&gt; and is &lt;a class="reference external" href="https://bodhi.fedoraproject.org/updates/?packages=libneurosim"&gt;currently in
testing&lt;/a&gt;.
&lt;a class="reference external" href="https://github.com/NeuralEnsemble/PyNN"&gt;PyNN&lt;/a&gt; needs &lt;a class="reference external" href="http://nest-simulator.org"&gt;NEST&lt;/a&gt; to be built with &lt;a class="reference external" href="https://github.com/INCF/libneurosim"&gt;libneurosim&lt;/a&gt; support, so that'll have to
be done before &lt;a class="reference external" href="https://github.com/NeuralEnsemble/PyNN"&gt;PyNN&lt;/a&gt; can be submitted for review. That's next on the list.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/NeuralEnsemble/libNeuroML"&gt;libNeuroML&lt;/a&gt; was also &lt;a class="reference external" href="https://bugzilla.redhat.com/show_bug.cgi?id=1643266"&gt;reviewed and approved this week&lt;/a&gt;, and is &lt;a class="reference external" href="https://bodhi.fedoraproject.org/updates/?packages=python-libNeuroML"&gt;now in
testing&lt;/a&gt;. It
should be available for use in the stable repositories in a week.  I can now
work on packaging up &lt;a class="reference external" href="https://github.com/NeuroML/pyNeuroML"&gt;pyNeuroML&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is a lot of software available in &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora&lt;/a&gt; already. You can see the
list &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora/PackageSet"&gt;here&lt;/a&gt;. If
you use software that is not on our list, please suggest it to us using the
&lt;a class="reference external" href="https://goo.gl/forms/j6AJ82yOh78MPxby1"&gt;suggestion form&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feedback is always welcome. You can get in touch with us &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora#Communication_and_getting_help"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content><category term="Community"></category><category term="Computational neuroscience"></category><category term="Free software"></category><category term="NEST"></category><category term="Fedora"></category><category term="NeuroFedora"></category></entry><entry><title>NeuroFedora update: week 42</title><link href="/2018/10/20/neurofedora-update-week-42.html" rel="alternate"></link><published>2018-10-20T16:05:16+01:00</published><updated>2018-10-20T16:05:16+01:00</updated><author><name>ankur</name></author><id>tag:None,2018-10-20:/2018/10/20/neurofedora-update-week-42.html</id><summary type="html">&lt;p class="first last"&gt;A quick update on &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora&lt;/a&gt; at the end of week 42.&lt;/p&gt;
</summary><content type="html">&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="/images/20181005-NeuroFedoraLogo01.png"&gt;&lt;img alt="NeuroFedora logo!" class="text-center img-responsive pagination-centered" src="/images/20181005-NeuroFedoraLogo01.png" style="width: 30%;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;a class="reference external" href="https://pagure.io/design/issue/602"&gt;NeuroFedora logo by Terezahl from the Fedora Design Team&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In week 42:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://nest-simulator.org"&gt;NEST&lt;/a&gt; 2.16.0 has hit the stable repositories. The different variants (with
and without MPI) can now be easily installed using one or two DNF commands.
You can find more information on installing &lt;a class="reference external" href="http://nest-simulator.org"&gt;NEST&lt;/a&gt; on Fedora &lt;a class="reference external" href="https://src.fedoraproject.org/rpms/nest"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/INCF/libneurosim"&gt;libneurosim&lt;/a&gt; has been submitted for &lt;a class="reference external" href="https://bugzilla.redhat.com/show_bug.cgi?id=1638968"&gt;review&lt;/a&gt;. I expect it'll be
approved soon. I learned a few new things about building RPM packages while I
was at it too. Once &lt;a class="reference external" href="https://github.com/INCF/libneurosim"&gt;libneurosim&lt;/a&gt; is approved and built, &lt;a class="reference external" href="http://nest-simulator.org"&gt;NEST&lt;/a&gt; will be rebuilt
to support it too, and then I intend to work on &lt;a class="reference external" href="https://github.com/NeuralEnsemble/PyNN"&gt;PyNN&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I almost have &lt;a class="reference external" href="https://github.com/INCF/MUSIC"&gt;MUSIC&lt;/a&gt; ready for review. I expect to submit a review ticket
soon.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is a lot of software available in &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora&lt;/a&gt; already. You can see the
list &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora/PackageSet"&gt;here&lt;/a&gt;. If
you use software that is not on our list, please suggest it to us using the
&lt;a class="reference external" href="https://goo.gl/forms/j6AJ82yOh78MPxby1"&gt;suggestion form&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feedback is always welcome. You can get in touch with us &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora#Communication_and_getting_help"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content><category term="Community"></category><category term="Computational neuroscience"></category><category term="Free software"></category><category term="NEST"></category><category term="Fedora"></category><category term="NeuroFedora"></category></entry><entry><title>NeuroFedora update: week 41</title><link href="/2018/10/13/neurofedora-update-week-41.html" rel="alternate"></link><published>2018-10-13T18:11:53+01:00</published><updated>2018-10-13T18:11:53+01:00</updated><author><name>ankur</name></author><id>tag:None,2018-10-13:/2018/10/13/neurofedora-update-week-41.html</id><summary type="html">&lt;p class="first last"&gt;A quick update on &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora&lt;/a&gt; at the end of week 41.&lt;/p&gt;
</summary><content type="html">&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="/images/20181005-NeuroFedoraLogo01.png"&gt;&lt;img alt="NeuroFedora logo!" class="text-center img-responsive pagination-centered" src="/images/20181005-NeuroFedoraLogo01.png" style="width: 30%;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;a class="reference external" href="https://pagure.io/design/issue/602"&gt;NeuroFedora logo by Terezahl from the Fedora Design Team&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In week 41, we finally announced &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora&lt;/a&gt; to the community on the &lt;a class="reference external" href="https://lists.fedoraproject.org/archives/list/devel&amp;#64;lists.fedoraproject.org/message/VXN4UBCNIL6BUCDRN55IGVK3IMO3HF6C/"&gt;mailing
list&lt;/a&gt;
and on the &lt;a class="reference external" href="https://communityblog.fedoraproject.org/neurofedora-sig-call-for-participation/"&gt;Fedora Community Blog&lt;/a&gt;.
So, it is officially a thing!&lt;/p&gt;
&lt;p&gt;There is a lot of software available in &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora&lt;/a&gt; already. You can see the
list &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora/PackageSet"&gt;here&lt;/a&gt;. If
you use software that is not on our list, please suggest it to us using the
&lt;a class="reference external" href="https://goo.gl/forms/j6AJ82yOh78MPxby1"&gt;suggestion form&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In week 41:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://nest-simulator.org"&gt;NEST&lt;/a&gt; was updated to &lt;a class="reference external" href="https://github.com/nest/nest-simulator/releases/tag/v2.16.0"&gt;version 2.16.0&lt;/a&gt;. It is in
testing for both &lt;a class="reference external" href="https://bodhi.fedoraproject.org/updates/FEDORA-2018-22afaeeee4"&gt;Fedora 28&lt;/a&gt; and
&lt;a class="reference external" href="https://bodhi.fedoraproject.org/updates/FEDORA-2018-6a80c3dbb1"&gt;Fedora 29&lt;/a&gt;. They
should both move to the stable repositories in a few days. This new version
does not support 32 bit architectures, so I've had to drop support for those.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/INCF/libneurosim"&gt;libneurosim&lt;/a&gt; has now been submitted for &lt;a class="reference external" href="https://bugzilla.redhat.com/show_bug.cgi?id=1638968"&gt;review&lt;/a&gt;. &lt;a class="reference external" href="http://nest-simulator.org"&gt;NEST&lt;/a&gt; must be
built with &lt;a class="reference external" href="https://github.com/INCF/libneurosim"&gt;libneurosim&lt;/a&gt; support for &lt;a class="reference external" href="https://github.com/NeuralEnsemble/PyNN"&gt;PyNN&lt;/a&gt; to work with it properly. So &lt;a class="reference external" href="https://github.com/NeuralEnsemble/PyNN"&gt;PyNN&lt;/a&gt;
will have to wait until this review is approved and &lt;a class="reference external" href="http://nest-simulator.org"&gt;NEST&lt;/a&gt; rebuilt.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I am hoping to spend some time on &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora&lt;/a&gt; every week, and I will provide
regular updates as I do. Feedback is always welcome. You can get in touch with
us &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora#Communication_and_getting_help"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content><category term="Community"></category><category term="Computational neuroscience"></category><category term="Free software"></category><category term="NEST"></category><category term="Fedora"></category><category term="NeuroFedora"></category></entry><entry><title>NeuroFedora: towards a ready to use Free/Open source environment for neuroscientists</title><link href="/2018/10/06/neurofedora-towards-a-ready-to-use-free-open-source-environment-for-neuroscientists.html" rel="alternate"></link><published>2018-10-06T00:19:32+01:00</published><updated>2018-10-06T00:19:32+01:00</updated><author><name>ankur</name></author><id>tag:None,2018-10-06:/2018/10/06/neurofedora-towards-a-ready-to-use-free-open-source-environment-for-neuroscientists.html</id><summary type="html">&lt;p class="first last"&gt;I have recently resurrected the &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora SIG&lt;/a&gt;. We aim to make
&lt;a class="reference external" href="https://getfedora.org"&gt;Fedora&lt;/a&gt; a ready to use platform for neuroscientists, so that they can
focus on the science. Read on to learn more!&lt;/p&gt;
</summary><content type="html">&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="/images/20181005-NeuroFedoraLogo01.png"&gt;&lt;img alt="NeuroFedora logo!" class="text-center img-responsive pagination-centered" src="/images/20181005-NeuroFedoraLogo01.png" style="width: 30%;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;a class="reference external" href="https://pagure.io/design/issue/602"&gt;NeuroFedora logo by Terezahl from the Fedora Design Team&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I've recently resurrected the &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora SIG&lt;/a&gt;. Many thanks to &lt;a class="reference external" href="https://fedoraproject.org/wiki/User:Ignatenkobrain"&gt;Igor&lt;/a&gt; and the others who had
worked on it in the past and have given us a firm base to build on.&lt;/p&gt;
&lt;div class="section" id="the-goal"&gt;
&lt;h2&gt;The goal&lt;/h2&gt;
&lt;p&gt;The (current) goal of the &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora SIG&lt;/a&gt; is to make Fedora an easy to use
platform for neuroscientists. We aim to do this by making commonly used
Neuroscience software easily installable on a &lt;a class="reference external" href="https://getfedora.org"&gt;Fedora&lt;/a&gt; system.&lt;/p&gt;
&lt;p&gt;Neuroscience is an extremely multidisciplinary field. It brings together
mathematicians, chemists, biologists, physicists, psychologists, engineers
(electrical and others), computer scientists and more. A lot of software is used
nowadays in Neuroscience for:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;data collection, analysis, and sharing&lt;/li&gt;
&lt;li&gt;lots of image processing (a lot of ML is used here, think Data Science)&lt;/li&gt;
&lt;li&gt;simulation of brain networks (&lt;a class="reference external" href="https://neuron.yale.edu/neuron/"&gt;NEURON&lt;/a&gt;, &lt;a class="reference external" href="https://nest-simulator.org"&gt;Nest&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/BhallaLab/moose"&gt;Moose&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/NeuralEnsemble/PyNN"&gt;PyNN&lt;/a&gt;, &lt;a class="reference external" href="http://briansimulator.org/"&gt;Brian&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;dissemination of scientific results (peer reviewed and otherwise, think
&lt;a class="reference external" href="http://tug.org/"&gt;LaTeX&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given that a large proportion of neuroscientists are not trained in
computer science, a lot of time and effort is spent setting up systems,
installing software (often building whole &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Dependency_hell"&gt;dependency chains&lt;/a&gt; from source). This can be
hard for people not well-versed in build systems and so on.&lt;/p&gt;
&lt;p&gt;So, at &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora&lt;/a&gt;, we will provide a ready to use &lt;a class="reference external" href="https://getfedora.org"&gt;Fedora&lt;/a&gt; based system for
neuroscientists to work with, so they can quickly get their environment set up
and work on the science.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-fedora"&gt;
&lt;h2&gt;Why Fedora?&lt;/h2&gt;
&lt;p&gt;For one, I have been a &lt;a class="reference external" href="https://fedoraproject.org/wiki/User:Ankursinha"&gt;contributor&lt;/a&gt; for a while and know the
&lt;a class="reference external" href="https://apps.fedoraproject.org/"&gt;community and the infrastructure&lt;/a&gt; quite
well. That applies to me and others from the &lt;a class="reference external" href="https://getfedora.org"&gt;Fedora&lt;/a&gt; community that may work on
this and not the research community in general.&lt;/p&gt;
&lt;p&gt;Technically, there are many advantages of using &lt;a class="reference external" href="https://getfedora.org"&gt;Fedora&lt;/a&gt; as a base.
Fedora is closely linked to the &lt;a class="reference external" href="https://www.redhat.com/en/technologies/linux-platforms/enterprise-linux"&gt;Red Hat Enterprise Linux&lt;/a&gt;
eco system---which &lt;a class="reference external" href="https://www.centos.org/"&gt;Cent OS&lt;/a&gt; is a part of and
&lt;a class="reference external" href="https://www.scientificlinux.org/about/"&gt;Scientific Linux is&lt;/a&gt; is based on
too (Recently, &lt;a class="reference external" href="https://coreos.com/"&gt;CoreOS also joined the Red Hat family&lt;/a&gt;). RPM based systems are commonly deployed in
supercomputers and clusters. So, making this software available on &lt;a class="reference external" href="https://getfedora.org"&gt;Fedora&lt;/a&gt; also
makes it simpler to make it available on these systems.  Additionally, the
&lt;a class="reference external" href="https://getfedora.org"&gt;Fedora&lt;/a&gt; community is promoting &lt;a class="reference external" href="https://flatpak.org/"&gt;Flatpaks&lt;/a&gt;, and working to permit multiple
versions of software via the &lt;a class="reference external" href="https://docs.fedoraproject.org/en-US/modularity/"&gt;modularity&lt;/a&gt; system. &lt;a class="reference external" href="https://getfedora.org"&gt;Fedora&lt;/a&gt; also supports &lt;a class="reference external" href="https://www.docker.com/"&gt;Docker&lt;/a&gt;
very &lt;a class="reference external" href="https://fedoraproject.org/wiki/Docker"&gt;well&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="join-us"&gt;
&lt;h2&gt;Join us!&lt;/h2&gt;
&lt;p&gt;Packaging software is only &lt;em&gt;one&lt;/em&gt; way in which one can contribute.  Writing docs
and answering questions about the software in &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora&lt;/a&gt; are other ways too,
for example.  If you are interested in neuroscience and in promoting &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Open_science"&gt;Open
Science&lt;/a&gt;, please consider
joining the SIG. You can get in touch with us via one of our many
&lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora#Communication_and_getting_help"&gt;communication channels&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This invitation extends to all--undergraduates, post-graduates, trainee
researchers (PhD candidates like me), professional researchers, hobbyists, and
everyone else.  If you work in the field already, it is a great way of
supporting the research community. For others, it is a great place to
learn about neuroscience, and  &lt;a class="reference external" href="https://www.fsf.org/blogs/community/user-liberation-watch-and-share-our-new-video"&gt;Free Software&lt;/a&gt;
and the various technical skills that go into developing software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="current-status"&gt;
&lt;h2&gt;Current status&lt;/h2&gt;
&lt;p&gt;We track the software we are working on &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora/PackageSet"&gt;here&lt;/a&gt;. A lot of
software is now ready to use in Fedora. This includes various Python libraries
and simulators such as &lt;a class="reference external" href="https://nest-simulator.org"&gt;Nest&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/BhallaLab/moose"&gt;Moose&lt;/a&gt;. &lt;a class="reference external" href="https://neuron.yale.edu/neuron/"&gt;Neuron&lt;/a&gt;, &lt;a class="reference external" href="http://briansimulator.org/"&gt;Brian&lt;/a&gt;, and &lt;a class="reference external" href="https://github.com/NeuralEnsemble/PyNN"&gt;PyNN&lt;/a&gt; are all in
the pipeline. All of &lt;a class="reference external" href="http://tug.org/texlive/"&gt;TeX Live&lt;/a&gt; is also available in
&lt;a class="reference external" href="https://getfedora.org"&gt;Fedora&lt;/a&gt;. If there is other Free/Open source software that you use which isn't
on our list, please let us know.  If you can help maintain it with us, that'll
be even better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fedora-free-software-and-science"&gt;
&lt;h2&gt;Fedora/Free software and Science&lt;/h2&gt;
&lt;p&gt;Open science shares the &lt;a class="reference external" href="https://www.gnu.org/philosophy/"&gt;philosophy of FOSS&lt;/a&gt;. The data, the tools, the results, should
be accessible to all to understand, use, learn from, and develop. More and more
researchers are making it a point to keep Science as open as possible whether
it is to do with the &lt;a class="reference external" href="http://opensourceforneuroscience.org/"&gt;tools&lt;/a&gt; or
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Open_access"&gt;dissemination&lt;/a&gt; of their
findings. &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora&lt;/a&gt; hopes to aid this movement. Come, join us!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Community"></category><category term="Computational neuroscience"></category><category term="Fedora"></category><category term="Free software"></category><category term="Linux"></category><category term="NEST"></category><category term="Neuron"></category><category term="Numpy"></category><category term="Pandas"></category><category term="Planet"></category><category term="Python"></category><category term="Reproducible research"></category><category term="Sumatra"></category><category term="TeX"></category><category term="NeuroFedora"></category></entry><entry><title>Testing out Sumatra: a tool for managing iterations of simulations/analyses</title><link href="/2018/05/12/testing-out-sumatra-a-tool-for-managing-iterations-of-simulations-analyses.html" rel="alternate"></link><published>2018-05-12T20:53:25+01:00</published><updated>2018-05-12T20:53:25+01:00</updated><author><name>ankur</name></author><id>tag:None,2018-05-12:/2018/05/12/testing-out-sumatra-a-tool-for-managing-iterations-of-simulations-analyses.html</id><summary type="html">&lt;p class="first last"&gt;When working on projects that require multiple iterations of
simulations and/or analyses, it's really quite hard to keep track of
the changes one makes and how the results vary. &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt; is a tool
that is developed to help researchers manage such projects.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;In the ~4 years that I've spent on my PhD now, I've run hundreds, nay,
thousands of simulations. Research work is incredibly iterative. I (and I
assume others too) make small changes to their methods and then study how these
changes produce different results, and this cycle continues until a
proposed hypothesis has either been accepted or refuted (or a completely new
insight gained, which happens quite often too!).&lt;/p&gt;
&lt;div class="section" id="folders-and-dropbox-please-no"&gt;
&lt;h2&gt;Folders, and Dropbox? Please, no.&lt;/h2&gt;
&lt;p&gt;Keeping track of all these iterations is quite a task. I've seen multiple
methods that people use to do this. A popular method is to make a different
folder for each different version of code, and then use something like Dropbox
to store them all.&lt;/p&gt;
&lt;p&gt;Since I come from a computing background, I firmly believe that this is not a
good way of going about it. It may work for folks---people I know and work with
use this method---but it is simply a bad way of going about it. This &lt;a class="reference external" href="http://phdcomics.com/"&gt;PhDComic&lt;/a&gt;
does a rather good job of showing an example situation. Sure, this is about a
document, but when source code is kept in different folders, a similar
situation arises. You get the idea.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://phdcomics.com/comics/archive.php?comicid=1531"&gt;&lt;img alt="PhDComic!" class="text-center img-responsive pagination-centered" src="http://www.phdcomics.com/comics/archive/phd101212s.gif" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="section" id="version-control-yes"&gt;
&lt;h2&gt;Version control, YES!&lt;/h2&gt;
&lt;p&gt;If there weren't tools designed to track and manage such projects, one could
still argue for using such methods, but the truth is that there is a plethora
of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/List_of_version_control_software"&gt;version control tools&lt;/a&gt; available
under &lt;a class="reference external" href="https://www.gnu.org/philosophy/free-sw.en.html"&gt;Free/Open Source&lt;/a&gt; licenses. Not only do these tools manage projects,
they also make collaborating over source code simple.&lt;/p&gt;
&lt;p&gt;All my simulation code, for example, lives in a &lt;a class="reference external" href="https://git-scm.com/"&gt;Git&lt;/a&gt; repository (which will be
made available under a &lt;a class="reference external" href="https://www.gnu.org/philosophy/free-sw.en.html"&gt;Free/Open source&lt;/a&gt; license as soon as my paper goes out
to ensure that others can read, verify, and build on it). The support scripts
that I use to set up simulations and then analyse the data they produce already
live &lt;a class="reference external" href="https://github.com/sanjayankur31/Sinha2016-scripts"&gt;here on GitHub&lt;/a&gt;,
for example. Please go ahead and use them if they fit your purpose.&lt;/p&gt;
&lt;p&gt;I have different &lt;a class="reference external" href="https://git-scm.com/"&gt;Git&lt;/a&gt; branches for different features that I add to the
simulations---the different hypothesis that I'm testing out. I also keep a
rather meticulous record of everything I do in a research journal in &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; that
also lives in a &lt;a class="reference external" href="https://git-scm.com/"&gt;Git&lt;/a&gt; repository, and uses &lt;a class="reference external" href="https://github.com/sanjayankur31/calliope"&gt;Calliope&lt;/a&gt; (a simple helper script to
manage various journaling tasks). Everything goes in here---graphs, images,
sometimes patches and source code even, and the deductions and other
comments/thoughts too.&lt;/p&gt;
&lt;p&gt;My rather simple system is as follows:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Each new feature/hypothesis gets its own &lt;a class="reference external" href="https://git-scm.com/"&gt;Git&lt;/a&gt; branch.&lt;/li&gt;
&lt;li&gt;Each version of its implementation, therefore, gets its own unique &lt;a class="reference external" href="https://github.com/sanjayankur31/Sinha2016-scripts/blob/master/runners/stri-cluster/start-nest-job.sh#L93"&gt;commit&lt;/a&gt;
(a snapshot of code that &lt;a class="reference external" href="https://git-scm.com/"&gt;Git&lt;/a&gt; saves for the user with a unique identifier and
a complete record of the changes that were made to the project, when they
were made and so on.)&lt;/li&gt;
&lt;li&gt;For each run of a snapshot, the generated data is stored in a folder that is
named &lt;a class="reference external" href="https://github.com/sanjayankur31/Sinha2016-scripts/blob/master/runners/stri-cluster/start-nest-job.sh#L27"&gt;YYYYMMDDHHMM (Year, month, day, time)&lt;/a&gt;,
which, unless you figure out how to go back in time, is also unique.&lt;/li&gt;
&lt;li&gt;The commit hash + YYYYMMDD become a unique identifier for each code snapshot
and the results that it generated.&lt;/li&gt;
&lt;li&gt;A new chapter in my research journal holds a summary of the simulation, and
all the analysis that I do. I even name the chapter &amp;quot;git-hash/YYYYMMDDHHMM&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;a class="reference external image-reference" href="https://xkcd.com/1597/"&gt;&lt;img alt="XKCD on Git." class="text-center img-responsive pagination-centered" src="https://imgs.xkcd.com/comics/git.png" style="width: 50%;" /&gt;&lt;/a&gt;
&lt;p&gt;I know that learning a version control system has a steep initial curve, but I
really do think that this is one tool that is well worth the time.&lt;/p&gt;
&lt;p&gt;Using a version control system has many advantages, some of which are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It lets you keep the full history of your source code, and go back to any
previous version.&lt;/li&gt;
&lt;li&gt;You know exactly what you changed between two snapshots.&lt;/li&gt;
&lt;li&gt;If multiple people work on the code, everyone knows exactly who authored
what.&lt;/li&gt;
&lt;li&gt;These tools make changing code, trying out things, and so on, very very easy.
Try something out in a different branch, if it worked, yay, keep the branch
running; maybe even merge it to the main branch? If it didn't make a note,
delete the branch, and move on!&lt;/li&gt;
&lt;li&gt;With services like &lt;a class="reference external" href="https://github.com"&gt;GitHub&lt;/a&gt;, &lt;a class="reference external" href="https://bitbucket.org"&gt;BitBucket&lt;/a&gt;, and &lt;a class="reference external" href="https://gitlab.com"&gt;GitLab&lt;/a&gt;, collaboration becomes
really easy.&lt;/li&gt;
&lt;li&gt;Ah, and note, that every collaborator has a copy of the source code, so it
has been backed up too! Even if you work alone, there's always another copy
on &lt;a class="reference external" href="https://github.com"&gt;GitHub&lt;/a&gt; (or whatever service you use).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's a quick beginners guide to using &lt;a class="reference external" href="https://git-scm.com/"&gt;Git&lt;/a&gt; and &lt;a class="reference external" href="https://github.com"&gt;GitHub&lt;/a&gt;:
&lt;a class="reference external" href="http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1004668"&gt;http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1004668&lt;/a&gt;
There are many more all over the WWW, of course. &lt;a class="reference external" href="https://duckduckgo.com"&gt;Duckduckgo&lt;/a&gt; is your friend.
(&lt;a class="reference external" href="http://qr.ae/TU1wA9"&gt;Why Duckduckgo and not Google?&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-sumatra-about-then"&gt;
&lt;h2&gt;What's Sumatra about, then?&lt;/h2&gt;
&lt;a class="reference external image-reference" href="http://neuralensemble.org/static/photos/sumatra_logo.png"&gt;&lt;img alt="Sumatra: a tool to manage and track simulation runs." class="text-center img-responsive pagination-centered" src="http://neuralensemble.org/static/photos/sumatra_logo.png" style="width: 30%;" /&gt;&lt;/a&gt;
&lt;p&gt;I've been meaning to try &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt; out for a while now. What &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt; does is
sort of bring the functions of all my scripts together into one well-designed
tool.  &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt; can do the running bit, then save the generated data in a
unique location, and it even lets users add comments about the simulation.
&lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt; even has a web based front end for those that would prefer a graphical
interface instead of the command line.  Lastly, &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt; is written in &lt;a class="reference external" href="https://python.org"&gt;Python&lt;/a&gt;,
so it works on pretty much all systems. Note that &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt; forces the use of a
version control system (from what I've seen yet).&lt;/p&gt;
&lt;div class="section" id="a-quick-walk-through"&gt;
&lt;h3&gt;A quick walk-through&lt;/h3&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://sumatra.readthedocs.io/en/0.7.4/index.html"&gt;documentation&lt;/a&gt;
contains all of this already, but I'll show the steps here too. I used a &lt;a class="reference external" href="https://github.com/sanjayankur31/sumatra-nest-cluster-test"&gt;dummy
repository&lt;/a&gt; to
test it out.&lt;/p&gt;
&lt;p&gt;Installing &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt; is as easy as a &lt;a class="reference external" href="https://docs.python.org/3/installing/index.html"&gt;pip&lt;/a&gt; command. I would suggest setting up a
&lt;a class="reference external" href="https://docs.python.org/3/library/venv.html"&gt;virtual-environment&lt;/a&gt;, though:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
python3 -m venv --system-site-packages sumatra-virtual
&lt;/pre&gt;
&lt;p&gt;We then activate the virtual-environment, and install &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
source sumatra-virtual/bin/activate
pip install sumatra
&lt;/pre&gt;
&lt;p&gt;Once it finishes installing, simply mark a version controlled source
repository as managed by &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
cd my-awesome-project
smt init my-awesome-project
&lt;/pre&gt;
&lt;p&gt;Then, one can see the information that &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt; has on the project, for
example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
smt info
Project name        : test-repo
Default executable  : Python (version: 3.6.5) at /home/asinha/dump/sumatra-virt/bin/python3
Default repository  : GitRepository at /home/asinha/Documents/02_Code/00_repos/00_mine/sumatra-nest-cluster-test (upstream: git&amp;#64;github.com:sanjayankur31/sumatra-nest-cluster-test.git)
Default main file   : test.py
Default launch mode : serial
Data store (output) : /home/asinha/Documents/02_Code/00_repos/00_mine/sumatra-nest-cluster-test/Data
.          (input)  : /
Record store        : Django (/home/asinha/Documents/02_Code/00_repos/00_mine/sumatra-nest-cluster-test/.smt/records)
Code change policy  : error
Append label to     : None
Label generator     : timestamp
Timestamp format    : %Y%m%d-%H%M%S
Plug-ins            : []
Sumatra version     : 0.7.4
&lt;/pre&gt;
&lt;p&gt;My test script only prints a short message. Here's how one would run it using
&lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# so that we don't have to specify this for each run
smt configure --executable=python3 --main=test.py

smt run
Hello Sumatra World!
Record label for this run: '20180512-200859'
No data produced.
&lt;/pre&gt;
&lt;p&gt;One can now see all the runs of this simulation that have been made!&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
smt list --long
--------------------------------------------------------------------------------
Label            : 20180512-200859
Timestamp        : 2018-05-12 20:08:59.761849
Reason           :
Outcome          :
Duration         : 0.050611019134521484
Repository       : GitRepository at /home/asinha/Documents/02_Code/00_repos/00_mine/sumatra-nest-
                 : cluster-test (upstream: git&amp;#64;github.com:sanjayankur31/sumatra-nest-cluster-
                 : test.git)
Main_File        : test.py
Version          : 6f4e1bf05f223a0100ca6f843c11ef4fd70490f3
Script_Arguments :
Executable       : Python (version: 3.6.5) at /home/asinha/dump/sumatra-virt/bin/python3
Parameters       :
Input_Data       : []
Launch_Mode      : serial
Output_Data      : []
User             : Ankur Sinha (Ankur Sinha Gmail) &amp;lt;sanjay.ankur&amp;#64;gmail.com&amp;gt;
Tags             :
Repeats          : None
--------------------------------------------------------------------------------
Label            : 20180512-181422
Timestamp        : 2018-05-12 18:14:22.668655
Reason           :
Outcome          : Well that worked
Duration         : 0.05211901664733887
Repository       : GitRepository at /home/asinha/Documents/02_Code/00_repos/00_mine/sumatra-nest-
                 : cluster-test (upstream: git&amp;#64;github.com:sanjayankur31/sumatra-nest-cluster-
                 : test.git)
Main_File        : test.py
Version          : 4f151a368b1fee1fa8f21026c3b6d2c6b2531da8
Script_Arguments :
Executable       : Python (version: 3.6.5) at /home/asinha/dump/sumatra-virt/bin/python3
Parameters       :
Input_Data       : []
Launch_Mode      : serial
Output_Data      : []
User             : Ankur Sinha (Ankur Sinha Gmail) &amp;lt;sanjay.ankur&amp;#64;gmail.com&amp;gt;
Tags             :
Repeats          : None
&lt;/pre&gt;
&lt;p&gt;There's a lot more that can be done, of course. I'll quickly show the GUI
version here.&lt;/p&gt;
&lt;p&gt;One can run the webversion using:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
smtweb -p 8001 #whatever port number one wants to use
&lt;/pre&gt;
&lt;p&gt;Then, it'll open up in your default web-browser at &lt;a class="reference external" href="http://127.0.0.1:8001/"&gt;http://127.0.0.1:8001/&lt;/a&gt;.&lt;/p&gt;
&lt;a class="reference external image-reference" href="/images/20180512-sumatra1.png"&gt;&lt;img alt="Sumatra initial interface." class="text-center img-responsive pagination-centered" src="/images/20180512-sumatra1.png" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;p&gt;For each project, one can see the various runs, with all the associated
information too.&lt;/p&gt;
&lt;a class="reference external image-reference" href="/images/20180512-sumatra2.png"&gt;&lt;img alt="Records for a project in Sumatra" class="text-center img-responsive pagination-centered" src="/images/20180512-sumatra2.png" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;p&gt;One can then add more information about a run. &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt; already stores lots of
important information as the image shows:&lt;/p&gt;
&lt;a class="reference external image-reference" href="/images/20180512-sumatra3.png"&gt;&lt;img alt="More information on each record in Sumatra" class="text-center img-responsive pagination-centered" src="/images/20180512-sumatra3.png" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;p&gt;Pretty neat, huh?&lt;/p&gt;
&lt;p&gt;I run my simulations on a cluster, and so have my own system to submit jobs to
the queue system. &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt; can run jobs in parallel on a cluster, but I've
still got to check if it also integrates with the queue system that our cluster
runs. Luckily, &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt; also provides an API, so I should be able to write a
few &lt;a class="reference external" href="https://python.org"&gt;Python&lt;/a&gt; scripts to handle that bit too. It's on my TODO list now.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="please-use-version-control-and-a-sumatra-style-record-keeper"&gt;
&lt;h2&gt;Please use version control and a Sumatra style record keeper&lt;/h2&gt;
&lt;p&gt;I haven't found another tool that does what &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt; does yet. Maybe Jupyter
notebooks would come close, but one would have to add some sort of wrapper
around them to keep proper records. It'll probably be similar to my current
system.&lt;/p&gt;
&lt;p&gt;In summary, please use version control, and use a record keeper to manage and
track simulations. Not only does it make it easier for you, the researcher, it
also makes it easier for others to replicate the simulation since the record
keeper provides all the information required to re-run the simulation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="free-open-source-software-promotes-open-science"&gt;
&lt;h2&gt;Free/Open source software promotes Open Science&lt;/h2&gt;
&lt;video controls width="640" height="390" poster="//static.fsf.org/nosvn/FSF30-video/fsf30-poster.png"&gt;
&lt;source src="//static.fsf.org/nosvn/FSF30-video/FSF_30_720p.webm" type="video/webm"&gt;
&lt;track kind="subtitles" label="English" srclang="en" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.en.vtt" default="default" /&gt;
&lt;track kind="subtitles" label="Spanish" srclang="es" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_es.vtt" /&gt;
&lt;track kind="subtitles" label="French" srclang="fr" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.fr.vtt" /&gt;
&lt;track kind="subtitles" label="German" srclang="en" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.de.vtt" /&gt;
&lt;track kind="subtitles" label="русский" srclang="ru" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.ru.vtt" /&gt;
&lt;track kind="subtitles" label="italiano" srclang="it" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.it.vtt" /&gt;
&lt;track kind="subtitles" label="português" srclang="pt" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.pt.vtt" /&gt;
&lt;track kind="subtitles" label="српски" srclang="sr" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.sr.vtt" /&gt;
&lt;track kind="subtitles" label="fārsi" srclang="fa" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.fa.vtt" /&gt;
&lt;track kind="subtitles" label="nederlands" srclang="nl" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.nl.vtt" /&gt;
&lt;track kind="subtitles" label="magyar" srclang="hu" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.hu.vtt" /&gt;
&lt;track kind="subtitles" label="svenska" srclang="se" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.se.vtt" /&gt;
&lt;track kind="subtitles" label="română" srclang="ro" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.ro.vtt" /&gt;
&lt;track kind="subtitles" label="lietuvių" srclang="lt" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.lt.vtt" /&gt;
&lt;track kind="subtitles" label="hebrew" srclang="lt" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.he.vtt" /&gt;
&lt;track kind="subtitles" label="português do Brasil" srclang="pt-br" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.pt-br.vtt" /&gt;
&lt;track kind="subtitles" label="chinese" srclang="lt" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.zh-cn.vtt" /&gt;
&lt;p&gt;&lt;a href="https://www.fsf.org/blogs/community/user-liberation-watch-and-share-our-new-video"&gt;
User liberation video at the Free Software Foundation.
&lt;/a&gt;&lt;/p&gt;
&lt;/video&gt;&lt;p&gt;(The original video is at the &lt;a class="reference external" href="https://www.fsf.org/blogs/community/user-liberation-watch-and-share-our-new-video"&gt;Free Software Foundation's website&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;As a concluding plea, I request everyone to please use &lt;a class="reference external" href="https://www.gnu.org/philosophy/free-sw.en.html"&gt;Free/Open source&lt;/a&gt;
software for all research. Not only are these available free of cost, they
provide everyone with the right to read, validate, study, copy, share, and
modify the software. One can learn so much from reading how research tools are
built. One can be absolutely sure of their results if they can see the code
that carries out the analysis. One can build on others' work if the source is
available for all to use and change. How easy does replication become when the
source and all related resources are given out for all to use?&lt;/p&gt;
&lt;p&gt;Do not use Microsoft Word, for example. Not everyone, even today, has access
to Microsoft software. Should researchers be required to buy a Microsoft
license to be able to collaborate with us? The tools are here to enable
science, not hamper it.  Proprietary software and formats do not enable
science, they restrict it to those that can pay for such software. This is not
a restriction we should endorse in any way.&lt;/p&gt;
&lt;p&gt;Yes, I know that sometimes there aren't &lt;a class="reference external" href="https://www.gnu.org/philosophy/free-sw.en.html"&gt;Free/Open source&lt;/a&gt; software
alternatives that carry the same set of features, but a little bit of extra
work, for me, is an investment towards Open Science. Instead of Word, as an
example, use &lt;a class="reference external" href="https://www.libreoffice.org/"&gt;Libreoffice&lt;/a&gt;, or &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt;. Use &lt;a class="reference external" href="http://opendocumentformat.org/"&gt;Open formats&lt;/a&gt;. There will be bugs, but until we report
them, they will not be fixed. Until these &lt;a class="reference external" href="https://www.gnu.org/philosophy/free-sw.en.html"&gt;Free/Open source&lt;/a&gt; tools replace
restricted software as the standard for science, they will only have small
communities around them that build and maintain them.&lt;/p&gt;
&lt;p&gt;Open Science is a necessity.  Researchers from the neuroscience community
recently signed &lt;a class="reference external" href="http://opensourceforneuroscience.org/"&gt;this letter&lt;/a&gt;
committing to the use of &lt;a class="reference external" href="https://www.gnu.org/philosophy/free-sw.en.html"&gt;Free/Open source&lt;/a&gt; software for their research. There
are similar initiatives in other fields too, and of course, one must be aware
of the Open Access movement etc.&lt;/p&gt;
&lt;p&gt;I've made this plea in the context of science, but the video should also show
you how in everyday life, it is important to use &lt;a class="reference external" href="https://www.gnu.org/philosophy/free-sw.en.html"&gt;Free/Open source&lt;/a&gt; resources.
Please use &lt;a class="reference external" href="https://www.gnu.org/philosophy/free-sw.en.html"&gt;Free/Open source&lt;/a&gt; resources, as much as possible.&lt;/p&gt;
&lt;!-- _ --&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="Reproducible research"></category><category term="Computational neuroscience"></category><category term="Sumatra"></category><category term="Fedora"></category><category term="Planet"></category></entry><entry><title>A channel for neuroscientists on Gitter</title><link href="/2017/06/26/a-channel-for-neuroscientists-on-gitter.html" rel="alternate"></link><published>2017-06-26T10:30:01+01:00</published><updated>2017-06-26T10:30:01+01:00</updated><author><name>ankur</name></author><id>tag:None,2017-06-26:/2017/06/26/a-channel-for-neuroscientists-on-gitter.html</id><summary type="html">&lt;p class="first last"&gt;I've come across a few mailing lists for neuroscientists, but I couldn't find a chat channel. While mailing lists suit certain purposes, open source communities tend to use a combination of mailing lists and chat channels - each platform serves different purposes. TLDR: here's a new chat channel on &lt;a class="reference external" href="https://github.com/gitterHQ"&gt;Gitter&lt;/a&gt; &lt;a class="reference external" href="https://gitter.im/neuroscience-central/Lobby"&gt;here&lt;/a&gt; for everything neuroscience related. It is also accessible using the &lt;a class="reference external" href="https://webchat.freenode.net/?channels=#neuroscience-central-lobby"&gt;IRC&lt;/a&gt; and &lt;a class="reference external" href="https://riot.im/app/#/room/#neuroscience-central-lobby:matrix.org"&gt;Riot&lt;/a&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;As opposed to the free software community, where I've been around long enough to know what's where, I'm still relatively new to the neuroscience community. Over the two years that I've been doing my PhD, I've found a few neuroscience related mailing lists, but not any chat channels. Various teams tend to use &lt;a class="reference external" href="https://slack.com/"&gt;Slack&lt;/a&gt; or another platform for internal communications, but nothing seems to be set up for the community in general - an open for all channel.&lt;/p&gt;
&lt;p&gt;Mailing lists are extremely useful, but by design they are suited to particular types of tasks. They are very well suited for longer discussions, and general queries that are not time sensitive, for example. On the other hand, they do not work well for urgent queries, and of course, sometimes sending e-mails back and forth is quite an overhead for simpler tasks or collaborative development.&lt;/p&gt;
&lt;p&gt;Most open source communities have both mailing lists and chat channels. I figured it'd be nice to have one for the neuroscience community too. There's the question of what platform was best suited, of course. We use &lt;a class="reference external" href="https://slack.com/"&gt;Slack&lt;/a&gt; for our internal communication, but &lt;a class="reference external" href="https://slack.com/"&gt;Slack&lt;/a&gt; only works well for small teams. It isn't designed for larger communities. The &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Internet_Relay_Chat"&gt;IRC&lt;/a&gt; is ideal for larger communities, but on the flip side, the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Internet_Relay_Chat"&gt;IRC&lt;/a&gt; is not very user friendly.&lt;/p&gt;
&lt;p&gt;The third option, and the popular alternative to IRC and Slack, is &lt;a class="reference external" href="https://github.com/gitterHQ"&gt;Gitter&lt;/a&gt; - it's been recently &lt;a class="reference external" href="https://about.gitlab.com/2017/03/15/gitter-acquisition/"&gt;acquired by GitLab&lt;/a&gt; and will be completely open sourced soon. It's completely free to use unlike &lt;a class="reference external" href="https://slack.com/"&gt;Slack&lt;/a&gt; where one needs to pay more as the number of group members increases, and is designed for large communities that number in the thousands. One can login using either Github or Twitter - so that's quite convenient too. There's even an &lt;a class="reference external" href="https://irc.gitter.im/"&gt;IRC gateway&lt;/a&gt; for more technical users.&lt;/p&gt;
&lt;p&gt;So here's the channel then - &lt;a class="reference external" href="https://gitter.im/neuroscience-central/Lobby"&gt;https://gitter.im/neuroscience-central/Lobby&lt;/a&gt;. I hope it'll be useful, and if it doesn't, well no harm done :)&lt;/p&gt;
&lt;p&gt;Update (12 July 2017):&lt;/p&gt;
&lt;p&gt;To enable people to communicate over various platforms, I've also set the channel up with &lt;a class="reference external" href="https://riot.im"&gt;Riot&lt;/a&gt;. This enables people using &lt;a class="reference external" href="https://github.com/gitterHQ"&gt;Gitter&lt;/a&gt;, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Internet_Relay_Chat"&gt;IRC&lt;/a&gt;, and &lt;a class="reference external" href="https://riot.im"&gt;Riot&lt;/a&gt; to &lt;a class="reference external" href="/2017/07/12/bringing-together-gitter-irc-and-slack-channels-in-one-place-on-riot.html"&gt;communicate with each other in one place using whatever platform they prefer&lt;/a&gt;. So, we also have:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://webchat.freenode.net/?channels=#neuroscience-central-lobby"&gt;#neuroscience-central-lobby&lt;/a&gt; on &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Internet_Relay_Chat"&gt;IRC&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://riot.im/app/#/room/#neuroscience-central-lobby:matrix.org"&gt;neuroscience-central/Lobby&lt;/a&gt; on &lt;a class="reference external" href="https://riot.im"&gt;Riot&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="Community"></category><category term="Computational neuroscience"></category><category term="Gitter"></category><category term="Planet"></category></entry><entry><title>Python - analysing large files - some notes to self</title><link href="/2017/01/10/python-analysing-large-files-some-notes-to-self.html" rel="alternate"></link><published>2017-01-10T15:38:26+00:00</published><updated>2017-01-10T15:38:26+00:00</updated><author><name>ankur</name></author><id>tag:None,2017-01-10:/2017/01/10/python-analysing-large-files-some-notes-to-self.html</id><summary type="html">&lt;p class="first last"&gt;I use Python to post process large amounts of spike data from my simulations. This post documents some observations I've made while writing my scripts.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="use-pandas-instead-of-numpy-to-load-your-data"&gt;
&lt;h2&gt;Use Pandas instead of Numpy to load your data&lt;/h2&gt;
&lt;p&gt;When most of us think of using Python for scientific computing, &lt;a class="reference external" href="http://www.numpy.org/"&gt;Numpy&lt;/a&gt; comes to mind. I've used it before. Recently, I ran into &lt;a class="reference external" href="http://pandas.pydata.org/"&gt;Pandas&lt;/a&gt; which is a library that's tailored for data analysis. Usually, you'd use Numpy to load data, but it was extremely slow with my large data (30 Gb) files. When I looked around a bit, I found &lt;a class="reference external" href="http://akuederle.com/stop-using-numpy-loadtxt"&gt;this post&lt;/a&gt; which explained it - so, do not use &lt;code&gt;numpy.loadtxt()&lt;/code&gt;, instead use &lt;code&gt;pandas.load_csv()&lt;/code&gt;. An alternative would be to to use &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Memory-mapped_file"&gt;memory mapped files&lt;/a&gt; as &lt;a class="reference external" href="/2015/02/20/extracting-small-chunks-of-data-from-extremely-large-files-say-hello-to-memory-mapped-files.html"&gt;I'd done before with C++&lt;/a&gt; - Numpy &lt;a class="reference external" href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.memmap.html"&gt;does support them&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-matplotlib-for-easy-stuff-but-gnuplot-when-you-need-performance"&gt;
&lt;h2&gt;Use Matplotlib for easy stuff but Gnuplot when you need performance&lt;/h2&gt;
&lt;p&gt;I usually use &lt;a class="reference external" href="http://www.gnuplot.info/"&gt;Gnuplot&lt;/a&gt; to plot my graphs. As &lt;a class="reference external" href="http://stackoverflow.com/a/23883352/375067"&gt;this answer on stackoverflow shows&lt;/a&gt;, Gnuplot performs much better than &lt;a class="reference external" href="http://matplotlib.org/"&gt;Matplotlib&lt;/a&gt;. The common complain seems to be that the figures from Gnuplot don't look modern enough. This, however, is only so if you use the default Gnuplot settings. There are &lt;a class="reference external" href="http://labs.guidolin.net/2010/03/how-to-create-beautiful-gnuplot-graphs.html"&gt;multiple posts on the internet&lt;/a&gt; that explain how to improve Gnuplot figures by changing the default settings. Both Gnuplot and Matplotlib are tools and they fit specific purposes. I'm now using Gnuplot for large data sets (multiple Gbs) and Matplotlib for smaller ones (a few Mbs).&lt;/p&gt;
&lt;p&gt;An example graph generated using Gnuplot is shown below. This is with modified settings, of course. Doesn't look too bad, does it?&lt;/p&gt;
&lt;a class="reference external image-reference" href="/images/20160711-gnuplot-graph.png"&gt;&lt;img alt="Graph generated using Gnuplot" class="align-center" src="/images/20160711-gnuplot-graph.png" style="width: 800px;" /&gt;&lt;/a&gt;
&lt;p&gt;If you're looking to use Gnuplot with Python, there's a &lt;a class="reference external" href="http://gnuplot-py.sourceforge.net/"&gt;Gnuplot.py&lt;/a&gt; package that makes it much easier. Unfortunately, though, the package does not work with Python3. Upstream seems to be inactive - my e-mail to the mailing list hasn't received any replies. &lt;a class="reference external" href="https://github.com/sanjayankur31/gnuplot-py"&gt;I've put the code here on Github at the moment&lt;/a&gt;. When I do have free cycles, I'll look at &lt;a class="reference external" href="https://github.com/sanjayankur31/gnuplot-py/issues/1"&gt;porting it over to Python3&lt;/a&gt;. Pull requests are welcome, of course.&lt;/p&gt;
&lt;p&gt;There's even a library that lets you use Gnuplot with C++ &lt;a class="reference external" href="https://github.com/dstahlke/gnuplot-iostream"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-chunks-when-loading-data-in-pandas"&gt;
&lt;h2&gt;Use chunks when loading data in Pandas&lt;/h2&gt;
&lt;p&gt;Pandas lets you load files in chunks and process these chunks individually. This way, even if you have extremely large files, you won't run end up using all your RAM.&lt;/p&gt;
&lt;p&gt;Here's an example below. This takes a spike file which is a file with two columns: &lt;code&gt;(neuron_IDs TAB spike_times)&lt;/code&gt; and counts the spikes in each second to print them to a new file that I pass to Gnuplot.
Note that since I need a sliding window to count my spikes, I keep the required bits of the previous chunk around.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;
Take a nest gdf file with spike times and calculate mean population firing rates.

File: spike2hz.py

Copyright 2016 Ankur Sinha
Author: Ankur Sinha &amp;lt;sanjay DOT ankur AT gmail DOT com&amp;gt;

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.
&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gc&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;spike2hz&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Main class for utlity.

    Nest gdf file format:

        &amp;lt;neuron gid&amp;gt;    &amp;lt;spike_time&amp;gt;

    Takes an entire spike file and generates the mean population firing
    rate file to be used for time graphs.
    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Main init method.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="c1"&gt;# Initial indices&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt;  &lt;span class="c1"&gt;# ms&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_neurons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;8000.&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;100000000.&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_neurons&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;8000.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;100000000.&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Setup various things.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input_filename&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;output_filename&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_neurons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_neurons&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input_filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input_filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;st_size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;File not found. Skipping.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__validate_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dataframe&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Check to see the input file is a two column file.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dataframe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Data seems incorrect - should have 2 columns. &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                  &lt;span class="s2"&gt;&amp;quot;Please check and re-run&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Read &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataframe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                  &lt;span class="s2"&gt;&amp;quot; rows.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Do the work.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;start_row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1000.&lt;/span&gt;
        &lt;span class="n"&gt;old_spikes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
        &lt;span class="n"&gt;old_times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pandas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'\s+'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;neuronID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;spike_time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                     &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'neuronID'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uint16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                            &lt;span class="s1"&gt;'spike_time'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                                     &lt;span class="n"&gt;lineterminator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="n"&gt;skipinitialspace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index_col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="n"&gt;chunksize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__validate_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Error in file. Skipping.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

            &lt;span class="n"&gt;spikes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

            &lt;span class="c1"&gt;# Keep some part of the previous chunk - because I subtract&lt;/span&gt;
            &lt;span class="c1"&gt;# 1000ms from the current time to count the number of spikes.&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_spikes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;spikes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_spikes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spikes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_times&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;Times from {} to {} being analysed containing {} rows&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Current time is {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

            &lt;span class="c1"&gt;# Reset chunks&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;searchsorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt;
                                                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;1000.&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                                &lt;span class="n"&gt;side&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'left'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;searchsorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;side&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'right'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="n"&gt;statement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{}&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;{}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;1000.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                            &lt;span class="n"&gt;spikes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_neurons&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

                &lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;

            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Printed till {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;old_times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;)):])&lt;/span&gt;
            &lt;span class="n"&gt;old_spikes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spikes&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spikes&lt;/span&gt;&lt;span class="p"&gt;)):])&lt;/span&gt;

            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;spikes&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;
            &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="miscellaneous-tips"&gt;
&lt;h2&gt;Miscellaneous tips&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/3899980/how-to-change-the-font-size-on-a-matplotlib-plot"&gt;Changing font size in Matplotlib&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Do not use numpy datatypes for arithmetic operations - &lt;a class="reference external" href="http://stackoverflow.com/questions/5956783/numpy-float-10x-slower-than-builtin-in-arithmetic-operations"&gt;it is 10x slower than Python built-ins&lt;/a&gt;. I learned of this the hard way - my processing times went up from a few hours to more than a day and I kept wondering why!&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://matplotlib.org/faq/howto_faq.html#generate-images-without-having-a-window-appear"&gt;Generating images without a window in Matplotlib&lt;/a&gt; - useful when you're using a headless system for your analysis.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Computational neuroscience"></category><category term="Fedora"></category><category term="Programming"></category><category term="Gnuplot"></category><category term="Matplotlib"></category><category term="Python"></category><category term="Pandas"></category><category term="Numpy"></category></entry><entry><title>Two new planets for neuroscientists</title><link href="/2016/11/26/two-new-planets-for-neuroscientists.html" rel="alternate"></link><published>2016-11-26T14:53:57+00:00</published><updated>2016-11-26T14:53:57+00:00</updated><author><name>ankur</name></author><id>tag:None,2016-11-26:/2016/11/26/two-new-planets-for-neuroscientists.html</id><summary type="html">&lt;p class="first last"&gt;No, not heavenly bodies, feed aggregators.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Keeping up with research publications is always a challenge for researchers. There's simply too much going on. Most of us have a daily or maybe hebdomadal slot where we go over various journals and news. We use things like e-mail alerts, RSS feeds, and that sort of thing. I have a &lt;a class="reference external" href="https://github.com/sanjayankur31/feedlists"&gt;rather long list of RSS feeds&lt;/a&gt; set up in the excellent &lt;a class="reference external" href="https://lzone.de/liferea/"&gt;Liferea&lt;/a&gt; reader myself.&lt;/p&gt;
&lt;p&gt;Now, the one problem with using a desktop application is that it must be set up on every machine that you use - even on your phone. This isn't ideal, really. It is also not ideal that we all end up having our own private lists. So, I thought it'd be nicer if I could set something up on the web that we could all access from everywhere without needing an app. The simple choice was to use &lt;a class="reference external" href="http://intertwingly.net/code/venus/"&gt;venus&lt;/a&gt; to set up &lt;em&gt;planet&lt;/em&gt; instances.&lt;/p&gt;
&lt;p&gt;Those that have been around the free and open source community will already know what planets are. They're web pages that aggregate feeds from various sources - usually community members' blogs. There are quite a few around and I follow a few myself -  &lt;a class="reference external" href="https://planet.fedoraproject.org/"&gt;Planet Fedora&lt;/a&gt;, &lt;a class="reference external" href="http://planet.gnome.org/"&gt;Planet GNOME&lt;/a&gt;, and &lt;a class="reference external" href="https://planet.mozilla.org/"&gt;Planet Mozilla&lt;/a&gt;, for example. They're extremely useful to keep onesself up to date with the happenings in the communities.&lt;/p&gt;
&lt;p&gt;So, I've gone ahead and set up two new planet instances to aggregate information from a myriad of neuroscience sources. The first is &lt;a class="reference external" href="https://sanjayankur31.github.io/planet-neuroscience/"&gt;Planet neuroscience&lt;/a&gt;. The feeds this one aggregates are all from peer reviewed journals. So, pure research on this one. It's one long list of new publications.&lt;/p&gt;
&lt;p&gt;The second one is &lt;a class="reference external" href="https://sanjayankur31.github.io/planet-neuroscientists/"&gt;Planet neuroscientists&lt;/a&gt;. On this one, I collect posts from various neuroscience news sites and blogs. Quite a few of these sources help make neuroscience more accessible by summarising concepts and results. They also discuss more general topics such as the research method, collaboration, open access, and the sort. So, these are also quite useful to read.&lt;/p&gt;
&lt;p&gt;I hope that these two planet instances will help us keep up to date with neuroscience research with less effort than before. They're both hosted on Github and are therefore, public pages. I don't reckon there'd be any bandwidth issues either. They're just static pages. Please do give them a go to see if you find them useful and of course, please spread the word too.&lt;/p&gt;
&lt;p&gt;At the moment, I have a cron job that updates them once daily, and I've put up some initial source that I was already following. If you know of any other sources that are worth following too, please do get in touch with me. The themes are extremely simple. You can always open pull requests if you'd like to make them better.&lt;/p&gt;
&lt;p&gt;Have a great weekend, and do drop me a line if you find these new planets useful!&lt;/p&gt;
</content><category term="Fedora"></category><category term="Community"></category><category term="Computational neuroscience"></category><category term="Git"></category></entry><entry><title>On jargon</title><link href="/2016/10/17/on-jargon.html" rel="alternate"></link><published>2016-10-17T08:26:30+01:00</published><updated>2016-10-17T08:26:30+01:00</updated><author><name>ankur</name></author><id>tag:None,2016-10-17:/2016/10/17/on-jargon.html</id><summary type="html">&lt;p class="first last"&gt;When we speak of jargon, it is usually because we heard something we couldn't make sense of. We focus on how it adversely affects the listener. The truth is, it also affects the speaker if the speaker does indeed intend to get the point across. In this post I discuss how it affects my work and me and I try to document what I can do to improve my communications to make it easier for my listeners and me to understand each other correctly.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Jargon is more often than not looked at unfavourably. Jargon is just the &amp;quot;language of a trade&amp;quot; and so, by itself, I don't see why I should denounce it. Rather, to me, it is the usage of jargon that is the issue. If you think of a workplace where people are aware of the context and meaning of certain jargon, I see no reason why it isn't appropriate usage. In fact, in such scenarios, jargon makes conversation efficient since the parties must not needlessly simplify their communications. So, when I go over to my lab mate's desk and say &amp;quot;&lt;em&gt;well, the STDP rule doesn't seem to result in an AI state&lt;/em&gt;&amp;quot;, he knows exactly what I mean. I'd find it quite difficult to rephrase that sentence to make it any simpler. The same applies for most professions if not all of them. Whether it's farming or mechanics; IT or medicine; cooking or sewing; designing or the media; they will all have some specialised terminology. It is just normal evolution of language in the same way that &amp;quot;selfie&amp;quot; is now a word. Jargon is simply a set of words that encapsulate concepts that are frequently used in a context.&lt;/p&gt;
&lt;p&gt;So why are we up in arms about jargon, then? Why is everyone continuously talking about how we need to cut it out? Quite simply, because when jargon is used in the wrong scenario, it hampers transfer of information. If work related terminology is used in a social setting where other listeners are not privy to it, for example, the conversation does not serve to pass on any material. Furthermore, it usually has the effect of making the audience feel out of place. It is quite similar to speaking to a single member of a group in a language that the others do not comprehend. It is considered impolite.&lt;/p&gt;
&lt;p&gt;To take it a step further, jargon seems to be used frequently with the malintent to obfuscate - especially in sales and marketing. The idea seems to be to coin and use fancy wording to trick consumers into buying products. The billboards and slogans that we see on a daily basis while not untrue, are not always created with aim to elucidate facts.&lt;/p&gt;
&lt;p&gt;Another use of jargon is straightforward snobbery. It makes the snob feel like part of an exclusive club. There isn't much to say about this other than that one should simply not engage with such individuals.&lt;/p&gt;
&lt;p&gt;Scenarios where the use of jargon is unintentional are more complex to deal with. Most research falls in this category. Consider people like me who spend a majority of their time in an environment that requires the use of an uncommon vocabulary. So, I read research papers that contain specific words, I write papers using these same words, the discussions I partake in utilise these too - this jargon is quite unavoidable to a large extent in work life. I'm only 2 years into my Ph.D. and I find it hard to speak about the same subject matter without employing the same dialect already. While this does not affect my daily activities as they are limited to colleagues who are well versed in our diction, it greatly limits my ability to spread the science I work in to a wider audience. This, in contrast, does effect me, and you too. If we're not working similar areas, we have very little understanding of each other's work.&lt;/p&gt;
&lt;p&gt;While I can't speak for types of work, this, in general, is an issue in research and academia - the lack of ability in us researchers to disseminate our work to people in other streams, especially non research careers, is an accepted weakness.&lt;/p&gt;
&lt;p&gt;Computational neuroscience, for example, is extremely multidisciplinary. At my lab alone, we have biologists, physicist, mathematicians, and us computer scientists, all working under the same roof on similar research questions. The dialect each of us speak is different. Yet, we read and publish in the same channels. When I read a paper that is heavy on biological detail, I find it much harder because the text utilises biological terminology that I'm not well aware of. In our case, though, there's only the one solution of learning what we need to know. It is how we manage to collaborate across disciplines, and it takes work - the difference in jargon ever so slightly increasing the required exertions.&lt;/p&gt;
&lt;p&gt;Extend this scenario to someone who isn't working in computational neuroscience at all. Of course, it'll be even harder for them to understand the same text. Given how important research is for all life in general, it is imperative that people who do not conduct research be made aware of progress that is continuously made. If you don't understand why research is important, let me point out to you that &lt;em&gt;every&lt;/em&gt; manufactured product you use in your home is the end result of some research somewhere. Take a moment to wonder how it all came about - it isn't magic; it is years of hard work and failure.&lt;/p&gt;
&lt;p&gt;To insure the future of research, it is important that young students are exposed to it at an early age. It is the simplest way of arousing enough interest in them to guarantee that research receives a constant stream of capable bearers to build on past innovations. It really doesn't matter what they take up - contributions to each field count.&lt;/p&gt;
&lt;p&gt;It is also helpful for consumers to have some idea of how things are manufactured and the amount of work that goes into it. It helps them pick between brands and decide what price they should pay for a product. A general awareness helps build immunity to the different tricks in use today that gently nudge consumers into buying products - creating demand for a product that wasn't required some time before.&lt;/p&gt;
&lt;p&gt;A last but important note is that most research makes use of public funds that are obtained via government grants. If the tax payer is funding some research, the tax payer should know how the money is being utilised.&lt;/p&gt;
&lt;p&gt;So, yes, making research information easily accessible to everyone is of great value. This is where jargon stands out as quite a bottle neck. Individuals that are not aware of the context, or those that do not have the required background knowledge cannot be expected to read research papers to understand the state of knowledge. Rather, academics have to work towards simplifying the data to an extent that it can be consumed by individuals from all walks of life. This isn't easy, and simplification usually goes hand in hand with omission of lesser important details but it is certainly possible to synthesise an overall picture of a concept.&lt;/p&gt;
&lt;p&gt;What I've written isn't new by any standards. The problem is well known, and communities are working towards making knowledge more understandable. If you watch the stuff the BBC puts up, for example, you'll see a lot of work by individuals like &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Brian_Cox_(physicist)"&gt;Professor Brian Cox&lt;/a&gt; that is aimed at explaining complex physical phenomena in simpler terms. A start has certainly been made.&lt;/p&gt;
&lt;p&gt;The point of this post was to give myself some time to think about the issue. After writing about a thousand words on the subject, I have a better understanding of it myself. I also have a better handle on what I should do to do my bit. It simply takes practice and some feedback. That's all it is. So, as I blog frequently about my Fedora related activities, I am going to make more of an attempt to write about my research too. A target is always helpful. Since it takes some effort at the moment, I'm going to set myself a target of one research related post every two to three weeks to begin with. Today being the 16th of October, I'll publish the first one before the 7th of November. Let's see how that goes.&lt;/p&gt;
</content><category term="Computational neuroscience"></category><category term="Fedora"></category><category term="Social"></category></entry><entry><title>Using NEURON - Part II</title><link href="/2016/09/02/using-neuron-part-ii.html" rel="alternate"></link><published>2016-09-02T13:39:16+01:00</published><updated>2016-09-02T13:39:16+01:00</updated><author><name>ankur</name></author><id>tag:None,2016-09-02:/2016/09/02/using-neuron-part-ii.html</id><summary type="html">&lt;p class="first last"&gt;This second post on using &lt;a class="reference external" href="http://www.neuron.yale.edu/neuron/"&gt;NEURON&lt;/a&gt; documents how to run an existing model, for example, from &lt;a class="reference external" href="https://senselab.med.yale.edu/ModelDB/ModelList.cshtml?id=1882"&gt;ModelDB&lt;/a&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://senselab.med.yale.edu/ModelDB/ModelList.cshtml?id=1882"&gt;ModelDB&lt;/a&gt; is a popular resource where the computational neuroscience community puts up models that were used in various publications. Since I'm quite new to &lt;a class="reference external" href="http://www.neuron.yale.edu/neuron/"&gt;NEURON&lt;/a&gt;, I thought I'd play with some existing models to get a hang of things. Here I document how to run an existing model.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://senselab.med.yale.edu/ModelDB/ModelList.cshtml?id=1882"&gt;ModelDB&lt;/a&gt; has quite a few models that use &lt;a class="reference external" href="http://www.neuron.yale.edu/neuron/"&gt;NEURON&lt;/a&gt;. Find one that suits you. I'll pick &lt;a class="reference external" href="https://senselab.med.yale.edu/ModelDB/ShowModel.cshtml?model=139653"&gt;L5b PC model constrained for BAC firing and perisomatic current step firing (Hay et al., 2011)&lt;/a&gt; for now.&lt;/p&gt;
&lt;div class="section" id="download-the-model"&gt;
&lt;h2&gt;Download the model&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://senselab.med.yale.edu/modeldb/eavBinDown.cshtml?o=139653&amp;amp;a=23&amp;amp;mime=application/zip"&gt;Download the zip&lt;/a&gt; file from the model page to a convenient location. There's a link right on the top of the page. Extract it.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
$ unzip L5bPCmodelsEH.zip
$ lash
total 668K
&lt;span class="m"&gt;4&lt;/span&gt;.0K drwxr-xr-x. &lt;span class="m"&gt;7&lt;/span&gt; asinha asinha &lt;span class="m"&gt;4&lt;/span&gt;.0K Mar &lt;span class="m"&gt;30&lt;/span&gt;  &lt;span class="m"&gt;2013&lt;/span&gt; L5bPCmodelsEH
664K -rw-r-----. &lt;span class="m"&gt;1&lt;/span&gt; asinha asinha 662K Sep  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt;:55 L5bPCmodelsEH.zip
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="building-and-running-the-model"&gt;
&lt;h2&gt;Building and running the model&lt;/h2&gt;
&lt;p&gt;Enter the directory:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; L5bPCmodelsEH/
&lt;/pre&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.neuron.yale.edu/neuron/"&gt;NEURON&lt;/a&gt; code comprises of two sets of code files. You have the HOC files, and the NMODL files. NMODL files need to be compiled before the model can be run.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
$ ~/dump/neuron-installation/x86_64/bin/nrnivmodl mod
Creating x86_64 directory &lt;span class="k"&gt;for&lt;/span&gt; .o files.

/home/asinha/dump/neuron-blog/L5bPCmodelsEH
mod/CaDynamics_E2.mod mod/Ca_HVA.mod mod/Ca_LVAst.mod mod/epsp.mod mod/Ih.mod mod/Im.mod mod/K_Pst.mod mod/K_Tst.mod mod/Nap_Et2.mod mod/NaTa_t.mod mod/NaTs2_t.mod mod/SK_E2.mod mod/SKv3_1.mod
CaDynamics_E2.mod Ca_HVA.mod Ca_LVAst.mod epsp.mod Ih.mod Im.mod K_Pst.mod K_Tst.mod Nap_Et2.mod NaTa_t.mod NaTs2_t.mod SK_E2.mod SKv3_1.mod
&lt;span class="s2"&gt;&amp;quot;/home/asinha/dump/neuron-installation/x86_64/bin/nocmodl&amp;quot;&lt;/span&gt; CaDynamics_E2
Translating CaDynamics_E2.mod into CaDynamics_E2.c
Thread Safe
&lt;span class="s2"&gt;&amp;quot;/home/asinha/dump/neuron-installation/share/nrn/libtool&amp;quot;&lt;/span&gt; --tag&lt;span class="o"&gt;=&lt;/span&gt;CC --mode&lt;span class="o"&gt;=&lt;/span&gt;compile mpicc -DHAVE_CONFIG_H  -I. -I.. -I&lt;span class="s2"&gt;&amp;quot;/home/asinha/dump/neuron-installation/include/nrn&amp;quot;&lt;/span&gt; -I&lt;span class="s2"&gt;&amp;quot;/home/asinha/dump/neuron-installation/x86_64/lib&amp;quot;&lt;/span&gt;      -O2 -g -pipe -Wall -Werror&lt;span class="o"&gt;=&lt;/span&gt;format-security -Wp,-D_FORTIFY_SOURCE&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; -fexceptions -fstack-protector-strong --param&lt;span class="o"&gt;=&lt;/span&gt;ssp-buffer-size&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; -grecord-gcc-switches -specs&lt;span class="o"&gt;=&lt;/span&gt;/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune&lt;span class="o"&gt;=&lt;/span&gt;generic -c -o CaDynamics_E2.lo CaDynamics_E2.c
libtool: compile:  mpicc -DHAVE_CONFIG_H -I. -I.. -I/home/asinha/dump/neuron-installation/include/nrn -I/home/asinha/dump/neuron-installation/x86_64/lib -O2 -g -pipe -Wall -Werror&lt;span class="o"&gt;=&lt;/span&gt;format-security -Wp,-D_FORTIFY_SOURCE&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; -fexceptions -fstack-protector-strong --param&lt;span class="o"&gt;=&lt;/span&gt;ssp-buffer-size&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; -grecord-gcc-switches -specs&lt;span class="o"&gt;=&lt;/span&gt;/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune&lt;span class="o"&gt;=&lt;/span&gt;generic -c CaDynamics_E2.c  -fPIC -DPIC -o .libs/CaDynamics_E2.o
CaDynamics_E2.c:94:34: warning: missing braces around initializer &lt;span class="o"&gt;[&lt;/span&gt;-Wmissing-braces&lt;span class="o"&gt;]&lt;/span&gt;
  static VoidFunc hoc_intfunc&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  ...
  ....
  ...
  ...
&lt;/pre&gt;
&lt;p&gt;You'll see a new &lt;code&gt;x86_64&lt;/code&gt; directory which contains the compiled code. Now, simply run &lt;a class="reference external" href="http://www.neuron.yale.edu/neuron/"&gt;NEURON&lt;/a&gt; as usual. If everything went well, the simulation will run:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
$ ~/dump/neuron-installation/x86_64/bin/nrngui mosinit.hoc
&lt;/pre&gt;
&lt;p&gt;Remember that you must run &lt;code&gt;nrngui&lt;/code&gt; in the directory where the &lt;code&gt;x86_64&lt;/code&gt; directory resides for &lt;a class="reference external" href="http://www.neuron.yale.edu/neuron/"&gt;NEURON&lt;/a&gt; to find it.&lt;/p&gt;
&lt;p&gt;That's it!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Fedora"></category><category term="Neuron"></category><category term="Computational neuroscience"></category></entry><entry><title>Quickly scripting a grid-search for parameter tuning</title><link href="/2016/08/27/quickly-scripting-a-grid-search-for-parameter-tuning.html" rel="alternate"></link><published>2016-08-27T10:10:04+01:00</published><updated>2016-08-27T10:10:04+01:00</updated><author><name>ankur</name></author><id>tag:None,2016-08-27:/2016/08/27/quickly-scripting-a-grid-search-for-parameter-tuning.html</id><summary type="html">&lt;p class="first last"&gt;Finding the right set of parameters is quite important in a lot of research - machine learning and computational neuroscience are two fields that I know of. I recently had to ascertain the optimal parameter set for my simulations too. I came up with a quick script to do it for me.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;A lot of models rely on different parameters. In my cortical models, these are usually variables like conductances of different sets of synapses, the sparsity of different synapse sets, learning rates of spike time dependent plasticity learning rules and so on. Given how finely tuned neuronal networks sometimes are, models don't depict the expected behaviours for the entire domain of parameter values. Instead, we often must find the right ranges of these parameters.&lt;/p&gt;
&lt;p&gt;In my simulations, I have some sets of synapses, and in my recent investigations, I needed to find the right &amp;quot;balance&amp;quot; between them. The standard way of going about this is to carry out an organised parameter search, what I think is referred to as a &amp;quot;grid search&amp;quot;. In a grid search, each point in the parameter space is tested to find the ranges where the required behaviour is simulated - really just simple brute force at play here. Now, since I have three parameters to test, my parameter space would be a three dimensional grid - the Cartesian product of the domains of the three parameters - &lt;code&gt;p1 x p2 x p3&lt;/code&gt;. For all possible ordered sets of p1, p2, and p3, I need to run my simulation - the number of possible combinations being &lt;code&gt;n(p1) x n(p2) x n(p3)&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is the cardinality of each set.&lt;/p&gt;
&lt;p&gt;Of course, I wrote myself a script. Modifying the parameters by hand and then queuing up all these simulations manually on the cluster would just take too much time.&lt;/p&gt;
&lt;div class="section" id="the-idea"&gt;
&lt;h2&gt;The idea&lt;/h2&gt;
&lt;p&gt;It's a simple Python script, and this fits well with my &lt;a class="reference external" href="20160531-some-tips-and-tricks-for-running-simulations-on-a-cluster.rst"&gt;workflow&lt;/a&gt; (which intensively uses Git and scripts to queue jobs on the cluster). The idea is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;create a new Git branch for the grid search (so we keep things organised!)&lt;/li&gt;
&lt;li&gt;use a simple scripting language to iterate over the parameter space&lt;/li&gt;
&lt;li&gt;modify the parameters in the simulation source code&lt;/li&gt;
&lt;li&gt;create a new commit for each point in the parameter space&lt;/li&gt;
&lt;li&gt;queue up all these commits on the cluster&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="the-script"&gt;
&lt;h2&gt;The script&lt;/h2&gt;
&lt;p&gt;I've used Python - you can use another scripting language that you prefer. I wouldn't recommend a shell script - even though it's powerful, handling arrays and floats and the sort is quite tedious in bash.&lt;/p&gt;
&lt;pre class="code Python literal-block"&gt;
&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;
Copyright 2016 Ankur Sinha
Author: Ankur Sinha &amp;lt;sanjay DOT ankur AT gmail DOT com&amp;gt;

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.
&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GridSearch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Set up your simulations for a grid search.


    This will modify the source in a branch, make changes, commit
    and then you can set these commits up on the cluster.
    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Initialise.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/path/to/source/file/&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;master&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Print usage.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Usage:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python3 grid_search.py &amp;lt;branch&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Branch MUST be specified.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Set it up.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param1'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param1_increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param1_min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param1'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param1_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param1'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param1_increment&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param1'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param1_increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param1'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param1_min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param1'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param1_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param1'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param1_increment&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;param1 not found in dict. Exiting.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param2'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param2_increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param2_min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param2'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param2_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param2'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param2_increment&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param2'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param2_increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param2'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param2_min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param2'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param2_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param2'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param2_increment&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;param2 not found in dict. Exiting.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param3'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param3_increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param3_min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param3'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param3_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param3'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param3_increment&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param3'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param3_increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param3'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param3_min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param3'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param3_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param3'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param3_increment&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;param3 not found in dict. Exiting.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Run.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;# checkout the branch&lt;/span&gt;
        &lt;span class="n"&gt;git_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;checkout&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;grid_search-{}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;())),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'git'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;git_args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;param1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param1_min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param1_max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param1_increment&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param2_min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param2_max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param2_increment&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;param3&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param3_min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param3_max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param3_increment&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

                    &lt;span class="n"&gt;sed_args_param1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'sed'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'-i'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="s2"&gt;&amp;quot;s/param1 = .*$/param1 = {}/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sed_args_param1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                    &lt;span class="n"&gt;sed_args_param2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'sed'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'-i'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="s2"&gt;&amp;quot;s/param2 = .*$/param2 = {}/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sed_args_param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                    &lt;span class="n"&gt;sed_args_param3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'sed'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'-i'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="s2"&gt;&amp;quot;s/param3 = .*$/param3 = {}/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sed_args_param3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                    &lt;span class="n"&gt;git_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;add&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'git'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;git_args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                    &lt;span class="n"&gt;commit_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;{} {} {} {}&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt; &lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                    &lt;span class="n"&gt;git_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;commit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-m&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;commit_msg&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'git'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;git_args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;git_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;checkout&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'git'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;git_args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GridSearch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="c1"&gt;# dictionary that holds the required grid ranges&lt;/span&gt;
        &lt;span class="c1"&gt;# specify min, max if want a grid search, else specify only one value&lt;/span&gt;
        &lt;span class="c1"&gt;# if you specify max, min, you must specify increment&lt;/span&gt;
        &lt;span class="n"&gt;setup_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;'param1'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'param2'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'param3'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;30.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setup_dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Since I'm calling &lt;code&gt;sed&lt;/code&gt; to modify my source and replace the parameter values, the only requirement here is that my source code needs to have the three lines (look at the regular expressions):&lt;/p&gt;
&lt;pre class="code Python literal-block"&gt;
&lt;span class="n"&gt;param1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;
&lt;span class="n"&gt;param2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;
&lt;span class="n"&gt;param3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;If all goes well, you should have a new branch:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;* 74866b6 - (3 months ago) Bugfix - neurons first, synapses later — Ankur Sinha (Ankur Sinha Gmail)
| * fd6a7fa - (5 days ago) 2016-08-22 3.0 3.0 -30.0 — Ankur Sinha (Ankur Sinha Gmail) (origin/grid_search-2016-08-22, grid_search-2016-08-22)
| * 33c95be - (5 days ago) 2016-08-22 3.0 3.0 -25.0 — Ankur Sinha (Ankur Sinha Gmail)
| * 51f96c1 - (5 days ago) 2016-08-22 3.0 3.0 -20.0 — Ankur Sinha (Ankur Sinha Gmail)
| * e8c106e - (5 days ago) 2016-08-22 3.0 3.0 -15.0 — Ankur Sinha (Ankur Sinha Gmail)
| * eaa7341 - (5 days ago) 2016-08-22 3.0 3.0 -10.0 — Ankur Sinha (Ankur Sinha Gmail)
| * 4597114 - (5 days ago) 2016-08-22 3.0 3.0 -5.0 — Ankur Sinha (Ankur Sinha Gmail)
| * a111e00 - (5 days ago) 2016-08-22 3.0 2.5 -30.0 — Ankur Sinha (Ankur Sinha Gmail)
| * 5261f4b - (5 days ago) 2016-08-22 3.0 2.5 -25.0 — Ankur Sinha (Ankur Sinha Gmail)
| * d10a686 - (5 days ago) 2016-08-22 3.0 2.5 -20.0 — Ankur Sinha (Ankur Sinha Gmail)
| * 91bc10e - (5 days ago) 2016-08-22 3.0 2.5 -15.0 — Ankur Sinha (Ankur Sinha Gmail)
| * add5188 - (5 days ago) 2016-08-22 3.0 2.5 -10.0 — Ankur Sinha (Ankur Sinha Gmail)
| * c93c817 - (5 days ago) 2016-08-22 3.0 2.5 -5.0 — Ankur Sinha (Ankur Sinha Gmail)
| * 8e779b9 - (5 days ago) 2016-08-22 3.0 2.0 -30.0 — Ankur Sinha (Ankur Sinha Gmail)
| * 9f67e1c - (5 days ago) 2016-08-22 3.0 2.0 -25.0 — Ankur Sinha (Ankur Sinha Gmail)
.....&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Now, with the help of some bash hacking I get a list of all the commits I need to queue up in a single line:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# list all commits reachable from grid_search.. branch but not from the base_branch
&lt;/span&gt;$ git log base_branch..grid_search-2016-08-22  --oneline &lt;span class="p"&gt;|&lt;/span&gt; cut -f1 -d&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tr &lt;span class="s2"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;
fd6a7fa 33c95be 51f96c1 .. e8c106e eaa7341
&lt;/pre&gt;
&lt;p&gt;Then, I use the bash &lt;code&gt;for&lt;/code&gt; construct to queue them all up as before:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
$ &lt;span class="k"&gt;for&lt;/span&gt; commit in fd6a7fa 33c95be 51f96c1 .. e8c106e eaa7341&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; ./start-job.sh &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$commit&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; sleep 1m&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Note - I used the &lt;code&gt;sleep&lt;/code&gt; command to space out each job by a minute. This is because my workflow uses folder names which are timestamps of when the job was queued up, like this: &lt;code&gt;201608121234&lt;/code&gt; (YYYYMMDDHHMM). So, I can't have two commits starting at the same minute.&lt;/p&gt;
&lt;p&gt;There are many ways of carrying out the same method. This is what I quickly came up with. &lt;a class="reference external" href="http://scikit-learn.org"&gt;Scikit&lt;/a&gt;, for example has &lt;a class="reference external" href="http://scikit-learn.org/stable/modules/grid_search.html"&gt;methods for grid search&lt;/a&gt;, but they don't gel well with my simulations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="postprocessing-all-this-data"&gt;
&lt;h2&gt;Postprocessing all this data&lt;/h2&gt;
&lt;p&gt;I have a bunch of scripts for post processing too - this grid search had 36 simulations, the postprocessing is still trudging along. The bigger question is: is there a good way of visualising all these results? I've had to resort to a spreadsheet - but if you have any suggestions, please do let me know. I really haven't found a nice front-end that would let me log results to a database and visualise them - over time, over parameters and so on - does anyone know one? What do people use to keep track of all their data?&lt;/p&gt;
&lt;p&gt;Anyway, it's a long weekend here with Monday being a bank holiday. Enjoy the weekend, everyone!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Computational neuroscience"></category><category term="Fedora"></category><category term="Git"></category><category term="Programming"></category><category term="Python"></category></entry><entry><title>Using NEURON - Part I</title><link href="/2016/08/05/using-neuron-part-i.html" rel="alternate"></link><published>2016-08-05T13:24:48+01:00</published><updated>2016-08-05T13:24:48+01:00</updated><author><name>ankur</name></author><id>tag:None,2016-08-05:/2016/08/05/using-neuron-part-i.html</id><summary type="html">&lt;p class="first last"&gt;I've got some time on my hands so I've decided to learn how to use the &lt;a class="reference external" href="http://www.neuron.yale.edu/neuron/"&gt;NEURON&lt;/a&gt; simulator. This series of posts are my personal notes. In this first one, we install &lt;a class="reference external" href="http://www.neuron.yale.edu/neuron/"&gt;NEURON&lt;/a&gt;.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="what-is-neuron"&gt;
&lt;h2&gt;What is NEURON&lt;/h2&gt;
&lt;p&gt;From the &lt;a class="reference external" href="http://www.neuron.yale.edu/neuron/what_is_neuron"&gt;website&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;NEURON is a simulation environment for modeling individual neurons and networks of neurons. It provides tools for conveniently building, managing, and using models in a way that is numerically sound and computationally efficient. It is particularly well-suited to problems that are closely linked to experimental data, especially those that involve cells with complex anatomical and biophysical properties.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-neuron-on-fedora-24"&gt;
&lt;h2&gt;Installing NEURON on Fedora 24&lt;/h2&gt;
&lt;p&gt;The first thing you do is install the simulator. I've been trying to build &lt;a class="reference external" href="https://copr.fedorainfracloud.org/coprs/ankursinha/neuroscience-research/"&gt;copr&lt;/a&gt; packages but they're not as simple as I'd have liked - the configurations that upstream uses for iv and neuron are outdated and require quite a bit of patching.&lt;/p&gt;
&lt;div class="section" id="download-the-sources"&gt;
&lt;h3&gt;Download the sources&lt;/h3&gt;
&lt;p&gt;First, download the source files:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# Make sure we're in the /home/&amp;lt;user&amp;gt; directory
&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;
&lt;span class="c1"&gt;# Make a new directory - use what you want but be consistent
&lt;/span&gt;mkdir -p dump/neuron

&lt;span class="c1"&gt;# Another one for the installed files
# You can use /opt or /usr/local or any other directory
# Using a directory in your home folder doesn't require root access
&lt;/span&gt;mkdir -p dump/neuron-installation

&lt;span class="c1"&gt;# Keep the sources here
&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/dump/neuron

&lt;span class="c1"&gt;# Install mercurial to checkout the neuron source code
&lt;/span&gt;sudo dnf install hg
&lt;span class="c1"&gt;# Download the source code
# Can't build from the latest tar somehow.
# http://www.neuron.yale.edu/neuron/download/getdevel
&lt;/span&gt;hg clone http://www.neuron.yale.edu/hg/neuron/nrn

&lt;span class="c1"&gt;# Check http://www.neuron.yale.edu/neuron/download/getstd for correct links
&lt;/span&gt;wget http://www.neuron.yale.edu/ftp/neuron/versions/v7.4/iv-19.tar.gz

&lt;span class="c1"&gt;# Untar the source for iv - this seems to work
&lt;/span&gt;tar -xvf iv-19.tar.gz
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="prep"&gt;
&lt;h3&gt;Prep&lt;/h3&gt;
&lt;p&gt;We need to build iv first. On Fedora 24, the default gcc flags include &lt;code&gt;-Wformat-security&lt;/code&gt; so a quick patch needs to be applied to iv to get it to build. The patch &lt;a class="reference external" href="https://www.neuron.yale.edu/phpBB/viewtopic.php?f=20&amp;amp;t=3536"&gt;has been reported here&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code diff literal-block"&gt;
&lt;span class="gh"&gt;diff -ur ../iv-18.orig/src/lib/IV-2_6/matcheditor.cpp ./src/lib/IV-2_6/matcheditor.cpp
&lt;/span&gt;&lt;span class="gd"&gt;--- ../iv-18.orig/src/lib/IV-2_6/matcheditor.cpp   2014-01-08 19:10:44.895487120 +1100
&lt;/span&gt;&lt;span class="gi"&gt;+++ ./src/lib/IV-2_6/matcheditor.cpp   2014-01-08 19:11:05.949315579 +1100
&lt;/span&gt;&lt;span class="gu"&gt;&amp;#64;&amp;#64; -82,7 +82,7 &amp;#64;&amp;#64;
&lt;/span&gt;         strncpy(buf, text-&amp;gt;Text(), length);
         while (length &amp;gt; 0) {
             buf[length] = '\0';
&lt;span class="gd"&gt;-            if (sscanf(buf, pattern) == EOF) {
&lt;/span&gt;&lt;span class="gi"&gt;+            if (sscanf(buf, &amp;quot;%s&amp;quot;, pattern) == EOF) {
&lt;/span&gt;                 break;
             }
             --length;
&lt;/pre&gt;
&lt;p&gt;Copy the diff into a file and call it &lt;code&gt;iv-format-security.patch&lt;/code&gt;. Place this in the directory where you have the neuron sources (&lt;code&gt;~/dump/neuron&lt;/code&gt;).
To apply the patch, enter the uncompressed iv directory:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; iv
patch -p1 &amp;lt; ../iv-format-security.patch
&lt;span class="c1"&gt;# On success, it'll say:
# patching file src/lib/IV-2_6/matcheditor.cpp&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Before we build either iv or neuron, we need to install the build dependencies:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# Install dependencies from the standard repositories
&lt;/span&gt;sudo dnf install xorg-x11-server-devel chrpath libtiff-devel imake libX11-devel automake autoconf libtool libXext-devel ncurses-devel readline-devel Random123-devel Cython openmpi-devel
&lt;/pre&gt;
&lt;p&gt;I've left out Java - I have no intention of using the Java support. Instead of openmpi, you can also use mpich - that's up to you - replace &lt;code&gt;openmpi-devel&lt;/code&gt; with &lt;code&gt;mpich-devel&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="build"&gt;
&lt;h3&gt;Build&lt;/h3&gt;
&lt;p&gt;Follow the instructions &lt;a class="reference external" href="http://www.neuron.yale.edu/neuron/download/compile_linux"&gt;here&lt;/a&gt;.
First we build iv:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# we're already in the iv source directory
# ./configure --help for all available options
# I use the default Fedora CFLAGS and CXXFLAGS
# You needn't use these
# rpm -E %optflags will tell you what the default ones on your system are
# echo $CFLAGS
# -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic
# echo $CXXFLAGS
# -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic
&lt;/span&gt;
&lt;span class="c1"&gt;# iv doesn't build with -Wnarrowing which is also default, so we disable it
&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;CFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$CFLAGS&lt;/span&gt;&lt;span class="s2"&gt; -Wno-narrowing&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;CXXFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$CXXFLAGS&lt;/span&gt;&lt;span class="s2"&gt; -Wno-narrowing&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# configure, make, make install
&lt;/span&gt;./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;/home/asinha/dump/neuron-installation/ --with-x
&lt;span class="c1"&gt;# I have 24 processors, check to see how many you do
&lt;/span&gt;make -j24
make install
&lt;/pre&gt;
&lt;p&gt;Then, we build neuron&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; ../nrn
&lt;span class="c1"&gt;# configure --help to see all options
# Enable MPI
&lt;/span&gt;module load mpi/openmpi-x86_64
&lt;span class="c1"&gt;# More change to flags to get the thing to build
&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;CFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$CFLAGS&lt;/span&gt;&lt;span class="s2"&gt; -Wno-narrowing -std=c99 -D_POSIX_C_SOURCE=200809L&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;CXXFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$CXXFLAGS&lt;/span&gt;&lt;span class="s2"&gt; -Wno-narrowing -D_POSIX_C_SOURCE=200809L&amp;quot;&lt;/span&gt;
./build.sh
./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;/home/asinha/dump/neuron-installation/ --with-x --with-paranrn --with-mpi --with-multisend --with-nrniv --with-iv&lt;span class="o"&gt;=&lt;/span&gt;/home/asinha/dump/neuron-installation
&lt;span class="c1"&gt;# I have 24 processors, check to see how many you do
&lt;/span&gt;make -j24
make install
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="check"&gt;
&lt;h3&gt;Check&lt;/h3&gt;
&lt;p&gt;Follow the instructions &lt;a class="reference external" href="http://www.neuron.yale.edu/neuron/download/compile_linux"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; dump/neuron-installation/
find . -name &lt;span class="s2"&gt;&amp;quot;neurondemo&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# You'll get something like: ./x86_64/bin/neurondemo
&lt;/span&gt;./86_64/bin/neurondemo
&lt;span class="c1"&gt;# Will give out something like:
# NEURON -- VERSION 7.5 (1454:2350fc838a79) 2016-08-01
# Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
# See http://neuron.yale.edu/neuron/credits
#
# loading membrane mechanisms from /home/asinha/dump/neuron-installation/share/nrn/demo/release/x86_64/.libs/libnrnmech.so
# Additional mechanisms from files
#  cabpump.mod cachan1.mod camchan.mod capump.mod invlfire.mod khhchan.mod mcna.mod nacaex.mod nachan.mod release.mod
# first instance of j
# first instance of itmp
# first instance of using_cvode_
# first instance of movie_frame_dur_
# first instance of realtime
# first instance of running_
# first instance of rtstart
# first instance of stdrun_quiet
# first instance of screen_update_invl
# first instance of tstop
# first instance of steps_per_ms
# first instance of nstep_steprun
# first instance of runStopAt
# first instance of runStopIn
# first instance of global_ra
# first instance of mapped_nrnmainmenu_
# first instance of v_init
# first instance of n_graph_lists
# first instance of i
# first instance of eventslow
# first instance of eventcount
# first instance of cnt
# oc&amp;gt;
#&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="post"&gt;
&lt;h3&gt;Post&lt;/h3&gt;
&lt;p&gt;Last, we update the PATH and things so that everything works smoothly in the future. The docs suggest an &lt;code&gt;nrnenv&lt;/code&gt; file that can be sourced in the &lt;code&gt;.bashrc&lt;/code&gt; file. We'll just follow the suggested method.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
cat &amp;gt;&amp;gt; ~/dump/neuron-installation/x86_64/bin/nrnenv &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF
export NRNINSTALLATION=&amp;quot;\$HOME/dump/neuron-installation&amp;quot;
export NRNCPU=&amp;quot;x86_64&amp;quot;
export PATH=&amp;quot;\$PATH:\$NRNINSTALLATION/\$NRNCPU/bin&amp;quot;

EOF&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;and modify &lt;code&gt;.bashrc&lt;/code&gt; to source it:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;source /home/asinha/dump/neuron-installation/x86_64/bin/nrnenv&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc
&lt;/pre&gt;
&lt;p&gt;Log out and back in, or source the file again: &lt;code&gt;source ~/.bashrc&lt;/code&gt;.  All the binaries for neuron should then be available to you:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
$ ls ~/dump/neuron-installation/x86_64/bin/
bbswork.sh   iclass  idraw  memacs        modlunit  mos2nrn2.sh  nocmodl  nrngui  nrniv_makefile  nrnmech_makefile  nrnoc_makefile  nrnpyenv.sh  set_nrnpyenv.sh
hel2mos1.sh  idemo   ivoc   mkthreadsafe  mos2nrn   neurondemo   nrnenv   nrniv   nrnivmodl       nrnoc             nrnocmodl       oc           sortspike

$ which idraw
~/dump/neuron-installation/x86_64/bin/idraw
$ which nrniv
~/dump/neuron-installation/x86_64/bin/nrniv
$ which nrnoc
~/dump/neuron-installation/x86_64/bin/nrnoc
$ which oc
~/dump/neuron-installation/x86_64/bin/oc
&lt;/pre&gt;
&lt;p&gt;I think that should be it! I've tested the instructions on my Fedora 24 machine but if you run into issues, drop a comment and I'll look into it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Fedora"></category><category term="Neuron"></category><category term="Computational neuroscience"></category></entry><entry><title>Tinkering with OpenLayers and JS - Cajal - a hacked up neuroscience research map</title><link href="/2016/08/04/tinkering-with-openlayers-and-js-cajal-a-hacked-up-neuroscience-research-map.html" rel="alternate"></link><published>2016-08-04T18:49:08+01:00</published><updated>2016-08-04T18:49:08+01:00</updated><author><name>ankur</name></author><id>tag:None,2016-08-04:/2016/08/04/tinkering-with-openlayers-and-js-cajal-a-hacked-up-neuroscience-research-map.html</id><summary type="html">&lt;p class="first last"&gt;I was tinkering with &lt;a class="reference external" href="https://www.javascript.com/"&gt;JavaScript&lt;/a&gt; and &lt;a class="reference external" href="http://openlayers.org/"&gt;OpenLayers&lt;/a&gt; recently and came up with a web application that shows the different Neuroscience labs on the world and some summary information on them. Still needs a lot of data to be really useful, but it's a start.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I was a bit fed up with the various minute issues my simulations kept throwing at me and decided I needed a distraction to keep me from completely burning out. Research is hard work, and sometimes we hit solid walls where no progress seems possible. I haven't hit one yet, but I was beginning to see that my performance had begun to drop. The simplest answer to this situation is to take a holiday - a change of scenery. Unfortunately, I haven't any plans to take one at the moment. I've never understood the appeal of wandering around crowded cities with throngs of tourists anyway. Instead, I decided to set my simulations aside for a few days and tinker with other things for a bit.&lt;/p&gt;
&lt;p&gt;I decided to take up a short &amp;quot;passion project&amp;quot;. It needed to be something that would keep me occupied for a few days at the most. I'd tinkered with &lt;a class="reference external" href="http://openlayers.org/"&gt;OpenLayers&lt;/a&gt; before and I'd been meaning to brush up on my &lt;a class="reference external" href="https://www.javascript.com/"&gt;JavaScript&lt;/a&gt; recently seeing as how it's become quite a dominant scripting language. So I thought up a simple web application that would use the two to do something useful.&lt;/p&gt;
&lt;div class="section" id="cajal"&gt;
&lt;h2&gt;Cajal&lt;/h2&gt;
&lt;p&gt;To start with, the app needs to have a name. I've come up with some unique ones before (&lt;a class="reference external" href="http://ankursinha.in/blog/tag/zaphod/"&gt;Zaphod&lt;/a&gt;, &lt;a class="reference external" href="http://ankursinha.in/blog/tag/calliope/"&gt;Calliope&lt;/a&gt;). This time I decided to pay homage to &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Santiago_Ram%C3%B3n_y_Cajal"&gt;Santiago Ramón y Cajal&lt;/a&gt; who is considered the father of modern neuroscience. There are multiple applications called Cajal already, but not too many of them seem to be related to neuroscience. Unique enough, then.&lt;/p&gt;
&lt;p&gt;Cajal is a simple web page that shows a world map. On this map are markers that denote different neuroscience laboratories. The markers are clickable, so when you click one of these, some information about the laboratory is displayed below the map - the principal investigator, the website address, and the sort. I've only managed to add a few laboratories to it now, but I've hosted a working demo &lt;a class="reference external" href="http://ankursinha.in/cajal-map/"&gt;here&lt;/a&gt;. The screenshot below shows what it looks like.&lt;/p&gt;
&lt;a class="reference external image-reference" href="/images/20160804-cajal.png"&gt;&lt;img alt="Screenshot of Cajal web application" class="align-center" src="/images/20160804-cajal.png" style="height: 400.0px;" /&gt;&lt;/a&gt;
&lt;p&gt;The code is quite simple. The data is stored in a &lt;code&gt;yaml&lt;/code&gt; file at &lt;code&gt;data/groups.yaml&lt;/code&gt;. The Python script &lt;code&gt;bin/populate_map.py&lt;/code&gt; takes this file and generates a &lt;a class="reference external" href="https://www.javascript.com/"&gt;JavaScript&lt;/a&gt; file with functions to set up the map, overlay the markers, and assign them all &lt;code&gt;singleclick&lt;/code&gt; events that display information - &lt;code&gt;js/cajal.js&lt;/code&gt;. The main &lt;code&gt;index.html&lt;/code&gt; file uses this JavaScript file to show a map and the markers with their associated information.&lt;/p&gt;
&lt;p&gt;Maybe there is a better, less hacky, way of going about it, but this works for a quick two day project. In the future, maybe I can use a server side database and so on - it depends on how much it needs to scale. I know my shared hosting account can't handle all that!&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/sanjayankur31/cajal/"&gt;source code is available on Github&lt;/a&gt;. To add more laboratories, entries need to be added to the &lt;code&gt;data/groups.yaml&lt;/code&gt; file - that's all. If you're a neuroscience researcher and want to add to the map, please open pull requests and I can then periodically regenerate the page as required.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Community"></category><category term="Computational neuroscience"></category><category term="Fedora"></category><category term="Programming"></category><category term="Python"></category><category term="OpenLayers"></category><category term="JavaScript"></category><category term="Cajal"></category></entry><entry><title>Checking your LaTeX sources for spelling errors with Hunspell</title><link href="/2016/06/02/checking-your-latex-sources-for-spelling-errors-with-hunspell.html" rel="alternate"></link><published>2016-06-02T11:42:00+01:00</published><updated>2016-06-02T11:42:00+01:00</updated><author><name>ankur</name></author><id>tag:None,2016-06-02:/2016/06/02/checking-your-latex-sources-for-spelling-errors-with-hunspell.html</id><summary type="html">&lt;p class="first last"&gt;For command line users that write in &lt;a class="reference external" href="https://latex-project.org/intro.html"&gt;LaTeX&lt;/a&gt;, &lt;a class="reference external" href="http://hunspell.github.io/"&gt;Hunspell&lt;/a&gt; is a great tool to check spellings.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I usually use &lt;a class="reference external" href="http://www.vim.org/"&gt;Vim&lt;/a&gt; and a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Makefile"&gt;Makefile&lt;/a&gt; when writing LaTeX documents. Even though &lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/spell.html"&gt;Vim does permit you to check your spellings&lt;/a&gt;, it's always nice to run the entire text through a standalone spell checker before passing your documents on to others.&lt;/p&gt;
&lt;p&gt;The workflow is quite simple. Once you've written your text, you commit your changes, and then you can use one of either &lt;a class="reference external" href="http://aspell.net/"&gt;Aspell&lt;/a&gt; or &lt;a class="reference external" href="http://hunspell.github.io/"&gt;Hunspell&lt;/a&gt; to check your text for spelling errors. Both provide an interactive interface that makes them easy to use.&lt;/p&gt;
&lt;p&gt;On &lt;a class="reference external" href="http://getfedora.org"&gt;Fedora&lt;/a&gt;, you can install them using &lt;code&gt;dnf&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
sudo dnf install aspell hunspell
&lt;/pre&gt;
&lt;p&gt;You'll also need to make sure you have the language files installed:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
sudo dnf install aspell-en hunspell-en
&lt;/pre&gt;
&lt;p&gt;Then, to check all your &lt;code&gt;.tex&lt;/code&gt; files, you can use something like this:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
find . -name &lt;span class="s2"&gt;&amp;quot;*.tex&amp;quot;&lt;/span&gt; -exec aspell --lang&lt;span class="o"&gt;=&lt;/span&gt;en --mode&lt;span class="o"&gt;=&lt;/span&gt;tex check &lt;span class="s2"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt; &lt;span class="c1"&gt;# Aspell
&lt;/span&gt;find . -name &lt;span class="s2"&gt;&amp;quot;*.tex&amp;quot;&lt;/span&gt; -exec hunspell -t -i utf-8 &lt;span class="s1"&gt;'{}'&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt; &lt;span class="c1"&gt;# Hunspell&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I looked around a bit, and decided to use &lt;a class="reference external" href="http://hunspell.github.io/"&gt;Hunspell&lt;/a&gt;. It's used by LibreOffice, Firefox, and other applications. I commit my work first and then run the above command which opens a window like this:&lt;/p&gt;
&lt;a class="reference external image-reference" href="/images/hunspell-example.png"&gt;&lt;img alt="Hunspell screenshot" src="/images/hunspell-example.png" style="width: 750px;" /&gt;&lt;/a&gt;
&lt;p&gt;Once you've gone through it and made your changes, you can then use &lt;code&gt;git diff --word-diff&lt;/code&gt; to review your changes. If you'd like to undo some of them, use &lt;code&gt;git add -i&lt;/code&gt; and so on:&lt;/p&gt;
&lt;a class="reference external image-reference" href="/images/git-word-diff.png"&gt;&lt;img alt="Git diff screenshot" src="/images/git-word-diff.png" style="width: 750px;" /&gt;&lt;/a&gt;
&lt;p&gt;That's it! Happy writing!&lt;/p&gt;
</content><category term="Fedora"></category><category term="Git"></category><category term="LaTeX"></category><category term="Linux"></category><category term="Vim"></category></entry><entry><title>Some tips and tricks for running simulations on a cluster</title><link href="/2016/05/31/some-tips-and-tricks-for-running-simulations-on-a-cluster.html" rel="alternate"></link><published>2016-05-31T19:17:32+01:00</published><updated>2016-05-31T19:17:32+01:00</updated><author><name>ankur</name></author><id>tag:None,2016-05-31:/2016/05/31/some-tips-and-tricks-for-running-simulations-on-a-cluster.html</id><summary type="html">&lt;p class="first last"&gt;I use the cluster here at university to run my simulations in &lt;a class="reference external" href="https://github.com/nest/nest-simulator"&gt;Nest&lt;/a&gt;. This post documents some tips and tricks I've come up with to make my cluster tasks easier.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;To begin with, you must use a terminal multiplexer! I use &lt;a class="reference external" href="http://byobu.org/"&gt;Byobu with tmux&lt;/a&gt; to multiplex a single SSH session. I use it on all my machines. It's an excellent tool.&lt;/p&gt;
&lt;div class="section" id="monitoring-your-jobs"&gt;
&lt;h2&gt;Monitoring your jobs&lt;/h2&gt;
&lt;p&gt;Three of my Byobu screens run these commands to monitor the queue and my jobs:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
watch -n &lt;span class="m"&gt;30&lt;/span&gt; qstat main
watch -n &lt;span class="m"&gt;30&lt;/span&gt; qstat -B
watch -n &lt;span class="m"&gt;30&lt;/span&gt; /usr/local/maui/bin/showq -u asinha
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;showq&lt;/code&gt; may be installed elsewhere. Use &lt;code&gt;which showq&lt;/code&gt; to locate it. More information on the commands can be found in their manuals:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
man watch
man qstat
&lt;/pre&gt;
&lt;p&gt;Remember, to find a man page, you can use the &lt;code&gt;apropos&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;I run all my simulations in a specific directory on the shared data disk. I usually also monitor this folder. It gives me an idea of how much my simulations have progressed. Something like this works:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
watch -n &lt;span class="m"&gt;30&lt;/span&gt; &lt;span class="s1"&gt;'du -sch *'&lt;/span&gt; &lt;span class="c1"&gt;# in the directory that stores simulation results*&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="use-git"&gt;
&lt;h2&gt;Use Git&lt;/h2&gt;
&lt;p&gt;Of course. If you make frequent changes, you must use a version control system. I stick to &lt;code&gt;git&lt;/code&gt; myself. You can use &lt;code&gt;svn&lt;/code&gt; or &lt;code&gt;hg&lt;/code&gt; if you wish - whatever floats your boat.&lt;/p&gt;
&lt;p&gt;An issue I've stumbled upon while working with the cluster is that the program you want it to run is not loaded into memory until your job begins to run. So, if you want to run a certain version of your program on the cluster, say some version_1, you must not make any changes to this version until the queued job has begun to run. This is extremely inconvenient, especially if you make frequent changes to your simulations, as is often the case in research. I would, for example, like to queue separate jobs in parallel for a myriad of tiny changes and then compare results.&lt;/p&gt;
&lt;p&gt;Enter &lt;a class="reference external" href="https://git-scm.com/docs/git-worktree"&gt;git work-tree&lt;/a&gt;! The simplest solution to the aforementioned issue is to checkout different work-trees for commits you want to test and queue up jobs for each individually. This would work really well. Once the simulation finishes, you can remove the work-tree.&lt;/p&gt;
&lt;p&gt;Unfortunately, clusters usually run stable long term support oriented versions of Linux distributions - EL/CentOS/Scientific. As a result, it's quite probable that the version of git on the cluster doesn't support work-trees - as is the case with the cluster I use. I came up with a workaround which works somewhat like work-trees - I manually clone my source repository to a temporary location, checkout the commit I want to run (which is what work-trees sort of are), and set up a job that runs this particular simulation version. It uses two scripts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A template PBS script for the simulation run. This will be passed to &lt;code&gt;qsub&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A script that clones my repo, checks out the required commit, completes the template script, and calls &lt;code&gt;qsub&lt;/code&gt; to queue up the job.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first is a simple PBS script:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# File: run-sim.sh
&lt;/span&gt;
&lt;span class="c1"&gt;#PBS -l walltime=48:00:00
#PBS -l nodes=50
#PBS -m abe
#PBS -N nest_v_s
&lt;/span&gt;
module unload mpi/mpich-x86_64
module load mvapich2-1.7

&lt;span class="nv"&gt;SIM_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/stri-data/asinha/simulations-nest/&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;SIM_TIME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;PROGRAM_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SIM_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SIM_TIME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;/Sinha2016/src/Sinha2016.py&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;RESULT_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SIM_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SIM_TIME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;/result/&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;NUM_NODES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; ------------------------------------------------------
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Job is running on nodes'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; cat &lt;span class="nv"&gt;$PBS_NODEFILE&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; ------------------------------------------------------
&lt;span class="nb"&gt;echo&lt;/span&gt; PBS: qsub is running on &lt;span class="nv"&gt;$PBS_O_HOST&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; PBS: originating queue is &lt;span class="nv"&gt;$PBS_O_QUEUE&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; PBS: executing queue is &lt;span class="nv"&gt;$PBS_QUEUE&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; PBS: working directory is &lt;span class="nv"&gt;$PBS_O_WORKDIR&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; PBS: execution mode is &lt;span class="nv"&gt;$PBS_ENVIRONMENT&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; PBS: job identifier is &lt;span class="nv"&gt;$PBS_JOBID&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; PBS: job name is &lt;span class="nv"&gt;$PBS_JOBNAME&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; PBS: node file is &lt;span class="nv"&gt;$PBS_NODEFILE&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; PBS: current home directory is &lt;span class="nv"&gt;$PBS_O_HOME&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; PBS: &lt;span class="nv"&gt;PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$PBS_O_PATH&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; ------------------------------------------------------

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ANKUR&amp;gt;&amp;gt; Begun at &lt;/span&gt;&lt;span class="nv"&gt;$SIM_TIME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ANKUR&amp;gt;&amp;gt; Script: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

mkdir -pv &lt;span class="nv"&gt;$RESULT_PATH&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$RESULT_PATH&lt;/span&gt;

/usr/local/bin/mpiexec -n &lt;span class="nv"&gt;$NUM_NODES&lt;/span&gt; python &lt;span class="nv"&gt;$PROGRAM_PATH&lt;/span&gt;

&lt;span class="nv"&gt;END_TIME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date +%Y%m%d%H%M&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ANKUR&amp;gt;&amp;gt; Ended at &lt;/span&gt;&lt;span class="nv"&gt;$END_TIME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It sets up the required PBS options, then loads the MPI module I wish to use. It creates a directory where my simulation's results will be stored, enters it, and then uses &lt;code&gt;mpiexec&lt;/code&gt; to run my Python program.&lt;/p&gt;
&lt;p&gt;The second script is a wrapper that clones the required commit, sets up the correct paths in the above script and the calls &lt;code&gt;qsub&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# File: setup-job.sh
&lt;/span&gt;
&lt;span class="nv"&gt;SOURCE_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home/asinha/Documents/02_Code/00_repos/00_mine/Sinha2016/&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;GIT_COMMIT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;SIM_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/stri-data/asinha/simulations-nest/&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;SIM_TIME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date +%Y%m%d%H%M&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;RUN_SCRIPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;scripts/cluster/nest-runsim.sh&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;RUN_NEW&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;ERROR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;no&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;NUM_NODES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;
&lt;span class="nv"&gt;CUR_SIM_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; queue_task
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;pushd&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$CUR_SIM_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        qsub &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$RUN_NEW&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;popd&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; setup_env
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;CUR_SIM_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SIM_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SIM_TIME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;This simulation will run in: &lt;/span&gt;&lt;span class="nv"&gt;$CUR_SIM_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    mkdir -pv &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$CUR_SIM_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

    &lt;span class="nb"&gt;pushd&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$CUR_SIM_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Cloning source repository...&amp;quot;&lt;/span&gt;
        git clone &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SOURCE_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Sinha2016&amp;quot;&lt;/span&gt;

        &lt;span class="nb"&gt;pushd&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Sinha2016&amp;quot;&lt;/span&gt;
            &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Checking out commit &lt;/span&gt;&lt;span class="nv"&gt;$GIT_COMMIT&lt;/span&gt;&lt;span class="s2"&gt;...&amp;quot;&lt;/span&gt;
            git checkout -b this_sim &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$GIT_COMMIT&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -ne &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;then&lt;/span&gt;
                &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Error occured. Could not checkout &lt;/span&gt;&lt;span class="nv"&gt;$GIT_COMMIT&lt;/span&gt;&lt;span class="s2"&gt;. Exiting...&amp;quot;&lt;/span&gt;
                &lt;span class="nv"&gt;ERROR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;yes&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;fi&lt;/span&gt;
        &lt;span class="nb"&gt;popd&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xyes&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;  x&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$ERROR&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;then&lt;/span&gt;
            &lt;span class="nb"&gt;exit&lt;/span&gt; -1
        &lt;span class="k"&gt;fi&lt;/span&gt;

        &lt;span class="nv"&gt;RUN_NEW&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;nest_&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$GIT_COMMIT&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;.sh&amp;quot;&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Setting up &lt;/span&gt;&lt;span class="nv"&gt;$RUN_NEW&lt;/span&gt;&lt;span class="s2"&gt;...&amp;quot;&lt;/span&gt;
        cp &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SOURCE_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$RUN_SCRIPT&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$RUN_NEW&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -v
        sed -i &lt;span class="s2"&gt;&amp;quot;s|nest_v_s|nest_&lt;/span&gt;&lt;span class="nv"&gt;$GIT_COMMIT&lt;/span&gt;&lt;span class="s2"&gt;|&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$RUN_NEW&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        sed -i &lt;span class="s2"&gt;&amp;quot;s|nodes=.*|nodes=&lt;/span&gt;&lt;span class="nv"&gt;$NUM_NODES&lt;/span&gt;&lt;span class="s2"&gt;|&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$RUN_NEW&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        sed -i &lt;span class="s2"&gt;&amp;quot;s|NUM_NODES=.*|NUM_NODES=&lt;/span&gt;&lt;span class="nv"&gt;$NUM_NODES&lt;/span&gt;&lt;span class="s2"&gt;|&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$RUN_NEW&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        sed -i &lt;span class="s2"&gt;&amp;quot;s|SIM_TIME=.*|SIM_TIME=&lt;/span&gt;&lt;span class="nv"&gt;$SIM_TIME&lt;/span&gt;&lt;span class="s2"&gt;|&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$RUN_NEW&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;popd&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; usage
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Usage: &lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Queue up a job to run a particular git commit&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="s2"&gt; &amp;lt;git_commit&amp;gt; &amp;lt;number_nodes&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$#&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -ne &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Error occurred. Exiting...&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Received &lt;/span&gt;&lt;span class="nv"&gt;$#&lt;/span&gt;&lt;span class="s2"&gt; arguments. Expected: 3&amp;quot;&lt;/span&gt;
    usage
    &lt;span class="nb"&gt;exit&lt;/span&gt; -1
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nv"&gt;GIT_COMMIT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;NUM_NODES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
setup_env
queue_task

&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This takes two arguments, as the &lt;code&gt;usage&lt;/code&gt; function will tell you. The first argument is the commit you want to run the simulation for, and the second is the number of nodes you want to use. It'll clone your repository to a temporary location and checkout this specified commit. Then, it'll modify the first script &lt;code&gt;run-sim.sh&lt;/code&gt; to set up the correct path to the code and also correctly specify the number of nodes you'd want to request. Finally, once all this is done, it'll call &lt;code&gt;qsub run-sim.sh&lt;/code&gt; to queue up your job. I use unique date stamps as directory names to distinguish between simulation runs, but you can use another unique identifier.&lt;/p&gt;
&lt;p&gt;Now, this copy of your code, at the specified commit will be used for the job you've queued. You can merrily go about tinkering with the main source repo without affecting queued up jobs. Yay!&lt;/p&gt;
&lt;p&gt;Even though I've used Python here, you can use similar scripts for compiled languages. You'll simply have to compile your executable after you checkout the required commit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-miscellaneous-stuff"&gt;
&lt;h2&gt;Other miscellaneous stuff&lt;/h2&gt;
&lt;p&gt;My lab mate, Alex, recently introduced me to &lt;a class="reference external" href="https://www.continuum.io/downloads"&gt;Anaconda&lt;/a&gt;. It's a great tool for that lets you install packages in your user specific directory. It contains quite a few python and other related packages. No need to use &lt;code&gt;sudo&lt;/code&gt; with it, and you can use &lt;code&gt;pip&lt;/code&gt; etc. with it too. It even lets you set up virtual environments and things.&lt;/p&gt;
&lt;p&gt;I think that's it for today. I'll update the post with other things I find/learn as I continue my adventures with the cluster.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Bash"></category><category term="Computational neuroscience"></category><category term="Git"></category><category term="Linux"></category><category term="NEST"></category><category term="Programming"></category><category term="Fedora"></category></entry><entry><title>Calliope - helping you keep a diary - in LaTeX!</title><link href="/2016/03/05/calliope-helping-you-keep-a-diary-in-latex.html" rel="alternate"></link><published>2016-03-05T14:07:52+00:00</published><updated>2016-03-05T14:07:52+00:00</updated><author><name>ankur</name></author><id>tag:None,2016-03-05:/2016/03/05/calliope-helping-you-keep-a-diary-in-latex.html</id><summary type="html">&lt;p class="first last"&gt;Most researchers keep a research journal where we note down our musings, notes and so on. While a paper diary is still quite common, I'd really prefer something on my laptop/computer. There are various applications out there for journal writing, but none of them really match up to good old &lt;a class="reference external" href="https://en.wikibooks.org/wiki/LaTeX"&gt;LaTeX&lt;/a&gt;. I've written a simple script that makes it really easy to maintain a journal using LaTeX - &lt;a class="reference external" href="https://github.com/sanjayankur31/calliope"&gt;Calliope&lt;/a&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Quite a few people write personal diaries - researchers tend to also keep research diaries where we note our generally brilliant ideas. I've used &lt;a class="reference external" href="http://lifeograph.sourceforge.net/wiki/Main_Page"&gt;Lifeograph&lt;/a&gt; for a number of years now. It's a great application with all the right features that a diary needs - chapters, tags, and  metrics. It doesn't quite work for a &lt;em&gt;research diary&lt;/em&gt;, though - it doesn't support maths notation for a start, and we really do write a lot of very complicated maths from time to time. (The kinds with lots of symbols you see in the films? Think &amp;quot;&lt;a class="reference external" href="http://www.imdb.com/title/tt0268978/"&gt;A beautiful mind&lt;/a&gt;&amp;quot;.)&lt;/p&gt;
&lt;p&gt;The simple solution, of course, is &lt;a class="reference external" href="http://lifeograph.sourceforge.net/wiki/Main_Page"&gt;LaTeX&lt;/a&gt;. &lt;a class="reference external" href="http://lifeograph.sourceforge.net/wiki/Main_Page"&gt;LaTeX&lt;/a&gt; is used extensively in academic writing. While it does have a reputation for being complex and complicated (&lt;a class="reference external" href="http://english.stackexchange.com/questions/10459/what-is-the-difference-between-complicated-and-complex"&gt;YES! There's a difference in the two words - they're not interchangeable!&lt;/a&gt;) at times, it is by far the best tool for academic writing. It has everything a researcher needs - citation support, can be customised to fit multiple format, and if you pair it with &lt;a class="reference external" href="https://git-scm.com/"&gt;Git&lt;/a&gt; you even have versioning and &lt;a class="reference external" href="http://ankursinha.in/blog/tag/zaphod/"&gt;change tracking&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="calliope"&gt;
&lt;h2&gt;Calliope&lt;/h2&gt;
&lt;p&gt;I went looking for packages that may provide this functionality in &lt;a class="reference external" href="http://lifeograph.sourceforge.net/wiki/Main_Page"&gt;LaTeX&lt;/a&gt; but didn't quite find any that had a convenient workflow and so on. I ran into a &lt;a class="reference external" href="https://github.com/mikhailklassen/research-diary-project"&gt;this Github project&lt;/a&gt; instead, which is a set of templates and scripts that does quite a good job. I've forked it and made some improvements. There's now a single script that takes arguments, for example. I've also added support for indexing - which works similar to tagging - it'll generate a nice clickable index at the end of the document. Of course, I've given it a fancy name, &lt;a class="reference external" href="https://github.com/sanjayankur31/calliope"&gt;Calliope, and put it up on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Usage is quite straightforward:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="o"&gt;[&lt;/span&gt;asinha&amp;#64;cs-as14aho-2-herts-ac-uk  00_research_diary&lt;span class="o"&gt;(&lt;/span&gt;master %&lt;span class="o"&gt;=)]&lt;/span&gt;$ ./calliope.sh -h
    usage: ./calliope.sh options

    Master script file that provides functions to maintain a journal using LaTeX.

    OPTIONS:
    -h  Show this message and quit

    -t  Add new entry &lt;span class="k"&gt;for&lt;/span&gt; today

    -c  Compile today&lt;span class="err"&gt;'&lt;/span&gt;s entry

    -a  &amp;lt;year&amp;gt;
        Year to generate anthology of

    -p  &amp;lt;year&amp;gt;
        Compile all entries in this year

    -s  &amp;lt;entry&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;yyyy-mm-dd&lt;span class="o"&gt;)&lt;/span&gt;
        Compile specific entry
&lt;/pre&gt;
&lt;p&gt;This is what the directory structure looks like:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="o"&gt;[&lt;/span&gt;asinha&amp;#64;cs-as14aho-2-herts-ac-uk  00_research_diary&lt;span class="o"&gt;(&lt;/span&gt;master %&lt;span class="o"&gt;=)]&lt;/span&gt;$ tree
.
├── calliope.sh
├── diary
│&amp;nbsp;&amp;nbsp; ├── &lt;span class="m"&gt;2016&lt;/span&gt;
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── &lt;span class="m"&gt;2016&lt;/span&gt;-03-04.tex
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── &lt;span class="m"&gt;2016&lt;/span&gt;-03-05.tex
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── images
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── research_diary.sty -&amp;gt; ../../templates/research_diary.sty
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── stdp_connection_symmetric.h
│&amp;nbsp;&amp;nbsp; └── research_diary.sty -&amp;gt; ../templates/research_diary.sty
├── pdfs
│&amp;nbsp;&amp;nbsp; └── &lt;span class="m"&gt;2016&lt;/span&gt;
│&amp;nbsp;&amp;nbsp;     ├── &lt;span class="m"&gt;2016&lt;/span&gt;-03-04.pdf
│&amp;nbsp;&amp;nbsp;     └── &lt;span class="m"&gt;2016&lt;/span&gt;-03-05.pdf
├── README.rst
└── templates
    ├── entry.tex
    └── research_diary.sty

        &lt;span class="m"&gt;6&lt;/span&gt; directories, &lt;span class="m"&gt;11&lt;/span&gt; files
&lt;/pre&gt;
&lt;p&gt;The script generates your source &lt;a class="reference external" href="http://lifeograph.sourceforge.net/wiki/Main_Page"&gt;LaTeX&lt;/a&gt; files and puts them in the folders in &lt;tt class="docutils literal"&gt;diary/&lt;/tt&gt;. Then you write up and use the script to compile it - the generated pdfs are collected in the &lt;tt class="docutils literal"&gt;pdfs/&lt;/tt&gt; folder. The script can also generate an anthology for a year you pick. The resultant pdf for a daily entry will look like this:&lt;/p&gt;
&lt;a class="reference external image-reference" href="/images/20160305-Calliope.png"&gt;&lt;img alt="Screenshot showing pdf generated by Calliope" class="align-center" src="/images/20160305-Calliope.png" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p&gt;That's pretty much it. Commit your entry to Git and you're done.&lt;/p&gt;
&lt;p&gt;So, give it a go and please &lt;a class="reference external" href="https://github.com/sanjayankur31/calliope/issues/"&gt;file issues&lt;/a&gt; if you have any suggestions that would improve it.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Fedora"></category><category term="Git"></category><category term="LaTeX"></category><category term="Linux"></category><category term="Calliope"></category></entry><entry><title>sli.vim - syntax file for the NEST simulator's SLI language</title><link href="/2016/03/02/sli-vim-syntax-file-for-the-nest-simulators-sli-language.html" rel="alternate"></link><published>2016-03-02T10:53:58+00:00</published><updated>2016-03-02T10:53:58+00:00</updated><author><name>ankur</name></author><id>tag:None,2016-03-02:/2016/03/02/sli-vim-syntax-file-for-the-nest-simulators-sli-language.html</id><summary type="html">&lt;p class="first last"&gt;I've hacked up a syntax file for &lt;a class="reference external" href="http://nest-simulator.org"&gt;NEST&lt;/a&gt;'s &lt;a class="reference external" href="http://www.nest-simulator.org/quickref/"&gt;SLI&lt;/a&gt; simulation language. It is by no means complete, but it already makes reading and writing SLI a lot easier.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I've been reading some of &lt;a class="reference external" href="http://nest-simulator.org"&gt;NEST&lt;/a&gt;'s &lt;a class="reference external" href="http://www.nest-simulator.org/quickref/"&gt;SLI&lt;/a&gt; examples to understand the simulation better. I noticed that these files had no syntax highlighting at all which made the code difficult to read. I couldn't find a syntax highlighting file for Vim anywhere so I've begun writing my own. It isn't complete, and I'm sure it's buggy, but it already seems to make reading and writing SLI easier. Here's what it makes an SLI file look like:&lt;/p&gt;
&lt;a class="reference external image-reference" href="/images/20160302-sli-vim.png"&gt;&lt;img alt="Screenshot showing SLI syntax highlighting in Vim" class="align-center" src="/images/20160302-sli-vim.png" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;It's just a syntax file. You can drop it in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.vim/syntax/&lt;/span&gt;&lt;/tt&gt; directory (on Linux) or you can use &lt;a class="reference external" href="https://github.com/tpope/vim-pathogen"&gt;pathogen&lt;/a&gt; and just clone the repository and so on. Once done, add this to your &lt;tt class="docutils literal"&gt;vimrc&lt;/tt&gt; file:&lt;/p&gt;
&lt;pre class="code vim literal-block"&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;BufRead&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;BufNewFile&lt;/span&gt; *.sli &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="k"&gt;filetype&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;sli
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; sli &lt;span class="k"&gt;setl&lt;/span&gt; &lt;span class="nb"&gt;foldenable&lt;/span&gt; &lt;span class="nb"&gt;foldmethod&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;syntax&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The file is &lt;a class="reference external" href="https://github.com/sanjayankur31/sli.vim"&gt;hosted on Github&lt;/a&gt;. Feel free to open issues, or even better, pull requests ;)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Computational neuroscience"></category><category term="Fedora"></category><category term="Programming"></category><category term="Vim"></category><category term="NEST"></category><category term="sli-vim"></category></entry><entry><title>New Zaphod release - v0.5.7</title><link href="/2016/02/28/new-zaphod-release-v0-5-7.html" rel="alternate"></link><published>2016-02-28T16:52:27+00:00</published><updated>2016-02-28T16:52:27+00:00</updated><author><name>ankur</name></author><id>tag:None,2016-02-28:/2016/02/28/new-zaphod-release-v0-5-7.html</id><summary type="html">&lt;p class="first last"&gt;I've released a new version of &lt;a class="reference external" href="https://github.com/sanjayankur31/zaphod"&gt;Zaphod&lt;/a&gt; - A LaTeX change tracking tool that I've been working on recently.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="/2016/02/13/zaphod-a-latex-change-tracking-tool.html"&gt;I'd written about Zaphod recently&lt;/a&gt;. I've been making some tweaks to it - just some enhancements to the revision bit which will make it easier to use. The diff bit is still the same - I didn't see the need to make too many improvements there.&lt;/p&gt;
&lt;div class="section" id="new-revision-bits"&gt;
&lt;h2&gt;New revision bits&lt;/h2&gt;
&lt;p&gt;Now, it looks like this when you start it up:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="o"&gt;[&lt;/span&gt;asinha&amp;#64;cs-as14aho-2-herts-ac-uk  latex-changes&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;201602281328&lt;/span&gt;-latexdiff-annotated&lt;span class="o"&gt;)]&lt;/span&gt;$ python3 ../zaphod/zaphod.py revise -m paper.tex -s src
&lt;span class="o"&gt;[&lt;/span&gt;Zaphod&lt;span class="o"&gt;]&lt;/span&gt; LaTeX files with annotations:
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/discussion.tex
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/introduction.tex
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/paper.tex
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/methods.tex

Pick file to revise? &lt;span class="m"&gt;1&lt;/span&gt;-4/Q/q:
&lt;/pre&gt;
&lt;p&gt;The idea here is that the user should be able to pick what file they want to edit. Previously, Zaphod just went file after file.&lt;/p&gt;
&lt;p&gt;Once you pick a file, it'll look like this:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
....
Pick file to revise? &lt;span class="m"&gt;1&lt;/span&gt;-4/Q/q: &lt;span class="nv"&gt;1&lt;/span&gt;

&lt;span class="o"&gt;======&lt;/span&gt; src/discussion.tex &lt;span class="o"&gt;======&lt;/span&gt;
+++ Addition found +++
&lt;span class="se"&gt;\s&lt;/span&gt;ection&lt;span class="o"&gt;{&lt;/span&gt;Discussion&lt;span class="o"&gt;}&lt;/span&gt;

Add a new file.

+++ Addition found +++
Accept addition? Y/N/Q/y/n/q: y
&lt;span class="o"&gt;[&lt;/span&gt;Zaphod&lt;span class="o"&gt;]&lt;/span&gt; Addition accepted.

&lt;span class="o"&gt;[&lt;/span&gt;Zaphod&lt;span class="o"&gt;]&lt;/span&gt; File src/discussion.tex revised and saved.
&lt;span class="o"&gt;[&lt;/span&gt;Zaphod&lt;span class="o"&gt;]&lt;/span&gt; LaTeX files with annotations:
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/introduction.tex
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/paper.tex
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/methods.tex

Pick file to revise? &lt;span class="m"&gt;1&lt;/span&gt;-3/Q/q:
&lt;/pre&gt;
&lt;p&gt;But, you can also make partial revisions. This is handy in situations where you have a long file and do not have the time to go over all of it at once. So, here's an example. I go over some changes, but I need to stop there for the moment:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
...
&lt;span class="o"&gt;[&lt;/span&gt;Zaphod&lt;span class="o"&gt;]&lt;/span&gt; LaTeX files with annotations:
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/introduction.tex
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/paper.tex
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/methods.tex

Pick file to revise? &lt;span class="m"&gt;1&lt;/span&gt;-3/Q/q: &lt;span class="nv"&gt;2&lt;/span&gt;

&lt;span class="o"&gt;======&lt;/span&gt; src/paper.tex &lt;span class="o"&gt;======&lt;/span&gt;
--- Deletion found ---
Tracking
--- Deletion found ---
Accept deletion? Y/N/Q/y/n/q: y
&lt;span class="o"&gt;[&lt;/span&gt;Zaphod&lt;span class="o"&gt;]&lt;/span&gt; Deletion accepted.

&lt;span class="o"&gt;======&lt;/span&gt; src/paper.tex &lt;span class="o"&gt;======&lt;/span&gt;
+++ Addition found +++
Visualising
+++ Addition found +++
Accept addition? Y/N/Q/y/n/q: y
&lt;span class="o"&gt;[&lt;/span&gt;Zaphod&lt;span class="o"&gt;]&lt;/span&gt; Addition accepted.

&lt;span class="o"&gt;======&lt;/span&gt; src/paper.tex &lt;span class="o"&gt;======&lt;/span&gt;
+++ Addition found +++
&lt;span class="se"&gt;\i&lt;/span&gt;nput&lt;span class="o"&gt;{&lt;/span&gt;discussion&lt;span class="o"&gt;}&lt;/span&gt;

+++ Addition found +++
Accept addition? Y/N/Q/y/n/q: q
Save partial file? Y/N/y/n: y
&lt;span class="o"&gt;[&lt;/span&gt;Zaphod&lt;span class="o"&gt;]&lt;/span&gt; Some files still have latexdiff annotations:
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/introduction.tex
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/methods.tex

Generate pdf? Y/y/N/n: n
&lt;span class="o"&gt;[&lt;/span&gt;Zaphod&lt;span class="o"&gt;]&lt;/span&gt; Not generating pdf.
&lt;span class="o"&gt;[&lt;/span&gt;Zaphod&lt;span class="o"&gt;]&lt;/span&gt; Following files have been revised &lt;span class="o"&gt;(&lt;/span&gt;maybe partially&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/discussion.tex
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/paper.tex

Commit current changes? Y/y/N/n: n
&lt;span class="o"&gt;[&lt;/span&gt;Zaphod&lt;span class="o"&gt;]&lt;/span&gt; Exiting without committing.
&lt;/pre&gt;
&lt;p&gt;There's one catch here, though. Because I want to make absolutely sure that Zaphod doesn't make any changes &amp;quot;by mistake&amp;quot;, you'll have to either stash or commit these changes before you can run Zaphod again. This is just to be on the safer side. A better way would probably be for Zaphod to remember what files were partially revised, but I haven't implemented it at the moment. I'd actually just commit the changes - I mean, that's why we've got Git, right?&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="o"&gt;[&lt;/span&gt;asinha&amp;#64;cs-as14aho-2-herts-ac-uk  latex-changes&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;201602281328&lt;/span&gt;-latexdiff-annotated *&lt;span class="o"&gt;)]&lt;/span&gt;$ python3 ../zaphod/zaphod.py revise -m paper.tex -s src
Modifed or untracked files found.
git status output:
 M src/discussion.tex
 M src/paper.tex

Please stash or commit and rerun Zaphod.
&lt;/pre&gt;
&lt;p&gt;That's it. I think it's a lot easier to use now, and in this design addresses a lot more use cases than it did before.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/sanjayankur31/zaphod/releases"&gt;Give it a go&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/sanjayankur31/zaphod/issues/new"&gt;let me know&lt;/a&gt; if things break - I've tested it myself, but only on a mock document.&lt;/p&gt;
&lt;/div&gt;
</content><category term="LaTeX"></category><category term="Programming"></category><category term="Git"></category><category term="Fedora"></category><category term="Zaphod"></category></entry><entry><title>Zaphod - a LaTeX change tracking tool</title><link href="/2016/02/13/zaphod-a-latex-change-tracking-tool.html" rel="alternate"></link><published>2016-02-13T17:16:24+00:00</published><updated>2016-02-13T17:16:24+00:00</updated><author><name>ankur</name></author><id>tag:None,2016-02-13:/2016/02/13/zaphod-a-latex-change-tracking-tool.html</id><summary type="html">&lt;p class="first last"&gt;Introducing &lt;a class="reference external" href="https://github.com/sanjayankur31/zaphod"&gt;Zaphod&lt;/a&gt; - a &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; script that attempts to help &lt;a class="reference external" href="https://en.wikipedia.org/wiki/LaTeX"&gt;LaTeX&lt;/a&gt; users collaborate over their academic writing. It uses the power of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Git_(software)"&gt;Git&lt;/a&gt; to track changes, &lt;a class="reference external" href="https://www.ctan.org/pkg/latexdiff?lang=en"&gt;latexdiff&lt;/a&gt; to generate a PDF with annotated additions and removals from the document, and provides a simple interactive review tool that lets the user pick what changes they want to accept. You can use Zaphod to track changes in your LaTeX documents.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="the-name"&gt;
&lt;h2&gt;The name&lt;/h2&gt;
&lt;p&gt;Well, I needn't say much here, need I? &lt;a class="reference external" href="https://en.wikipedia.org/wiki/The_Hitchhiker%27s_Guide_to_the_Galaxy"&gt;Hitchhiker's guide to the galaxy&lt;/a&gt;, anyone?&lt;/p&gt;
&lt;p&gt;Of course, a good tip to naming a new open source tool is to pick a project name that is easily searchable. With &lt;a class="reference external" href="https://en.wikipedia.org/wiki/LaTeX"&gt;LaTeX&lt;/a&gt; related searches, it's a tad difficult - the addition of the word to LaTeX to anything tends to generate rather undesirable results. Fortunately, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Zaphod_Beeblebrox"&gt;Zaphod&lt;/a&gt; seems to have been spared the honour..&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="latex-is-great"&gt;
&lt;h2&gt;LaTeX is great!&lt;/h2&gt;
&lt;p&gt;Academics really like &lt;a class="reference external" href="https://en.wikipedia.org/wiki/LaTeX"&gt;LaTeX&lt;/a&gt; - it's a brilliant tool, the best one in my opinion, for academic writing. Using LaTeX is widely accepted to be more complex than using a simple &lt;a class="reference external" href="https://en.wikipedia.org/wiki/WYSIWYG"&gt;WYSIWYG&lt;/a&gt; tool like Word. One writes in plain text using LaTeX constructs and then compiles it to produce a brilliantly formatted PDF. The point of using LaTeX is that you get to focus on the matter - the actual text, and LaTeX largely takes care of the look, the formatting and all that. There are &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Comparison_of_TeX_editors"&gt;quite a few applications&lt;/a&gt; that provide one click compilation and other features, by the way, so you don't absolutely have to use the command line. There's even &lt;a class="reference external" href="https://www.lyx.org/"&gt;Lyx&lt;/a&gt; which is quite close to a WYSIWYG application for LaTeX.&lt;/p&gt;
&lt;div class="section" id="tracking-changes"&gt;
&lt;h3&gt;Tracking changes&lt;/h3&gt;
&lt;p&gt;Another limitation of using LaTeX is that you can't easily see what's changed between versions of PDFs. This makes collaboration using LaTeX difficult.&lt;/p&gt;
&lt;p&gt;Word, for example, has a very useful &amp;quot;&lt;a class="reference external" href="https://support.office.com/en-us/article/Track-changes-while-you-edit-024158a3-7e62-4f05-8bb7-dc3ecf0295c4"&gt;Track changes&lt;/a&gt;&amp;quot; feature that lets you record your changes and then lets the next person easily review them and decide which ones are to be applied.&lt;/p&gt;
&lt;p&gt;There are various tools strewn over the Internet that do help with this, but they aren't quite as convenient as I'd have hoped. Some examples:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.ctan.org/pkg/latexdiff?lang=en"&gt;latexdiff&lt;/a&gt; (Zaphod is based on this and uses it to generate changes - why reinvent the wheel?)&lt;/li&gt;
&lt;li&gt;the &lt;a class="reference external" href="http://www.ctan.org/pkg/changes"&gt;changes&lt;/a&gt; package&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://trackchanges.sourceforge.net/"&gt;track changes&lt;/a&gt; (didn't try this out)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="so-zaphod"&gt;
&lt;h2&gt;So - Zaphod&lt;/h2&gt;
&lt;p&gt;Various editors make writing LaTeX quite easy. That isn't much of an issue any more. Zaphod tries to address the second issue - tracking changes. It combines existing tools to implement a certain workflow where you can write text, send it to people, verify and include their changes.&lt;/p&gt;
&lt;div class="section" id="the-workflow-an-example"&gt;
&lt;h3&gt;The workflow - an example&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create a Git repository for your LaTeX paper.&lt;/li&gt;
&lt;li&gt;Write your draft.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm using a &lt;a class="reference external" href="https://github.com/sanjayankur31/latex-changes"&gt;test repository&lt;/a&gt; which looks like this:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="o"&gt;[&lt;/span&gt;asinha&amp;#64;ankur  latex-changes&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;master&lt;/span&gt;&lt;span class="o"&gt;=)]&lt;/span&gt;$ tree
.
├── LICENSE
├── README.rst
└── src
    ├── abstract.tex
    ├── conclusion.tex
    ├── discussion.tex
    ├── introduction.tex
    ├── Makefile
    ├── methods.tex
    ├── paper.pdf
    ├── paper.tex
    └── results.tex

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;19&lt;/span&gt; files
&lt;span class="o"&gt;[&lt;/span&gt;asinha&amp;#64;ankur  latex-changes&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;master&lt;/span&gt;&lt;span class="o"&gt;=)]&lt;/span&gt;$
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Commit your changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Your repository will look something like this:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="o"&gt;[&lt;/span&gt;asinha&amp;#64;ankur  latex-changes&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;master&lt;/span&gt;&lt;span class="o"&gt;=)]&lt;/span&gt;$ git lg
* 280fef6 - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; days ago&lt;span class="o"&gt;)&lt;/span&gt; Subsection &lt;span class="nb"&gt;test&lt;/span&gt; — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; master, origin/master, origin/HEAD&lt;span class="o"&gt;)&lt;/span&gt;
* 0c0238b - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; days ago&lt;span class="o"&gt;)&lt;/span&gt; Moved script to its own repository — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt;
....
* 164e0d3 - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt; days ago&lt;span class="o"&gt;)&lt;/span&gt; Add vim temp files to gitignore — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt;
* bd02966 - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt; days ago&lt;span class="o"&gt;)&lt;/span&gt; Commit fake paper — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt;
* 11ad32b - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt; days ago&lt;span class="o"&gt;)&lt;/span&gt; Initial commit — Ankur Sinha
&lt;/pre&gt;
&lt;p&gt;This is all pretty standard Git usage. Now, the interesting part:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Send your PDF and LaTeX sources to your collaborator (or give them access to your repository).&lt;/li&gt;
&lt;li&gt;They make changes and commit them. Now, your Git revision tree will look something like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="o"&gt;[&lt;/span&gt;asinha&amp;#64;ankur  latex-changes&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;master&lt;/span&gt;&lt;span class="o"&gt;=)]&lt;/span&gt;$ git lg
* 46d0c11 - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; hours ago&lt;span class="o"&gt;)&lt;/span&gt; Add a new file. — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; master, origin/master, origin/HEAD&lt;span class="o"&gt;)&lt;/span&gt;
* ba4b06d - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; days ago&lt;span class="o"&gt;)&lt;/span&gt; Update readme — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt;
* 53033b8 - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; days ago&lt;span class="o"&gt;)&lt;/span&gt; Remove example output directory — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt;
* d82266b - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; days ago&lt;span class="o"&gt;)&lt;/span&gt; More subsection changes — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt;
* 280fef6 - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; days ago&lt;span class="o"&gt;)&lt;/span&gt; Subsection &lt;span class="nb"&gt;test&lt;/span&gt; — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt;
  ...
&lt;/pre&gt;
&lt;p&gt;Zaphod lets you specify two Git revisions and generates a list of changes between these two. So, for example, running the diff command would do this:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="o"&gt;[&lt;/span&gt;asinha&amp;#64;ankur  latex-changes&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;master&lt;/span&gt;&lt;span class="o"&gt;=)]&lt;/span&gt;$ python3 ../zaphod/zaphod.py diff -r bd02966 -m paper.tex -s src
 ....
 ....
 COMPLETE: The following branches have been created:
 &lt;span class="m"&gt;201602131935&lt;/span&gt;-latexdiff-rev1: Revision &lt;span class="m"&gt;1&lt;/span&gt;.
 &lt;span class="m"&gt;201602131935&lt;/span&gt;-latexdiff-rev2: Revision &lt;span class="m"&gt;2&lt;/span&gt;.
 &lt;span class="m"&gt;201602131935&lt;/span&gt;-latexdiff-annotated: Branch with annotated versions of sources and diff pdf.
 The generated diff pdf is: src/diff-bd02966-master.pdf.
&lt;/pre&gt;
&lt;p&gt;and your repository now looks like this:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
* 9e58178 - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; minutes ago&lt;span class="o"&gt;)&lt;/span&gt; Save annotated changes between bd02966 and master — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; &lt;span class="m"&gt;201602131935&lt;/span&gt;-latexdiff-annotated&lt;span class="o"&gt;)&lt;/span&gt;
* 46d0c11 - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt; hours ago&lt;span class="o"&gt;)&lt;/span&gt; Add a new file. — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;origin/master, origin/HEAD, master, &lt;span class="m"&gt;201602131935&lt;/span&gt;-latexdiff-rev2&lt;span class="o"&gt;)&lt;/span&gt;
* ba4b06d - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; days ago&lt;span class="o"&gt;)&lt;/span&gt; Update readme — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt;
....
* bd02966 - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt; days ago&lt;span class="o"&gt;)&lt;/span&gt; Commit fake paper — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;201602131935&lt;/span&gt;-latexdiff-rev1&lt;span class="o"&gt;)&lt;/span&gt;
* 11ad32b - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt; days ago&lt;span class="o"&gt;)&lt;/span&gt; Initial commit — Ankur Sinha
&lt;/pre&gt;
&lt;p&gt;Zaphod uses latexdiff to check for differences between the two revisions, marks them as branches for easy reference, and then creates a new branch with annotated source files and a nice pdf which looks like this:&lt;/p&gt;
&lt;a class="reference external image-reference" href="/images/20160213-zaphod-screenshot.png"&gt;&lt;img alt="Screenshot of annotated PDF" class="align-center" src="/images/20160213-zaphod-screenshot.png" style="height: 400.0px;" /&gt;&lt;/a&gt;
&lt;p&gt;That looks rather nice, isn't it? And it resembles what a Word document with annotations looks like too. latexdiff has various markup styles which can be passed to Zaphod as arguments to modify how the annotations look. The most important part here is that because Zaphod is using mighty Git, there's no chance of you losing any work at all. &lt;em&gt;In fact, if you have untracked and uncommitted changes in your repository, Zaphod refuses to run at all.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now, a look at how the revise function works:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="o"&gt;[&lt;/span&gt;asinha&amp;#64;ankur  latex-changes&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;201602131935&lt;/span&gt;-latexdiff-annotated&lt;span class="o"&gt;)]&lt;/span&gt;$ python3 ../zaphod/zaphod.py revise -s src/ -m paper.tex
Working on file: src/paper.tex.
File under revision: src/paper.tex

Deletion found:
---
Tracking
---

Delete? Y/N/y/n: y
Deleted

File under revision: src/paper.tex

Addition found:
+++
Visualising
+++

Add? Y/N/y/n: n
Skipped

File under revision: src/paper.tex

Addition found:
+++
&lt;span class="se"&gt;\i&lt;/span&gt;nput&lt;span class="o"&gt;{&lt;/span&gt;discussion&lt;span class="o"&gt;}&lt;/span&gt;

+++

Add? Y/N/y/n:
....
....
....
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;201602131935&lt;/span&gt;-latexdiff-annotated 3ba757f&lt;span class="o"&gt;]&lt;/span&gt; Save after going through changes
 &lt;span class="m"&gt;5&lt;/span&gt; files changed, &lt;span class="m"&gt;34&lt;/span&gt; insertions&lt;span class="o"&gt;(&lt;/span&gt;+&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;56&lt;/span&gt; deletions&lt;span class="o"&gt;(&lt;/span&gt;-&lt;span class="o"&gt;)&lt;/span&gt;
 create mode &lt;span class="m"&gt;100644&lt;/span&gt; src/accepted.pdf
 rewrite src/paper.tex &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;72&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;

COMPLETE: Changes accepted and committed.
The generated pdf is: src//accepted.pdf.
You can merge this branch to master &lt;span class="k"&gt;if&lt;/span&gt; you wish.
&lt;/pre&gt;
&lt;p&gt;and your repository looks like this:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="o"&gt;[&lt;/span&gt;asinha&amp;#64;ankur  latex-changes&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;201602131935&lt;/span&gt;-latexdiff-annotated&lt;span class="o"&gt;)]&lt;/span&gt;$ git lg
* 3ba757f - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;53&lt;/span&gt; seconds ago&lt;span class="o"&gt;)&lt;/span&gt; Save after going through changes — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; &lt;span class="m"&gt;201602131935&lt;/span&gt;-latexdiff-annotated&lt;span class="o"&gt;)&lt;/span&gt;
* 9e58178 - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;17&lt;/span&gt; minutes ago&lt;span class="o"&gt;)&lt;/span&gt; Save annotated changes between bd02966 and master — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt;
* 46d0c11 - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt; hours ago&lt;span class="o"&gt;)&lt;/span&gt; Add a new file. — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;origin/master, origin/HEAD, master, &lt;span class="m"&gt;201602131935&lt;/span&gt;-latexdiff-rev2&lt;span class="o"&gt;)&lt;/span&gt;
....
&lt;/pre&gt;
&lt;p&gt;The new pdf, accepted.pdf, is the latest version of your document and includes the changes you think should make the cut. If you're happy with these, you can simply merge this branch into master, and continue working. If you're not, you can go back to master, or another commit, and tinker some more - we're using Git, do what you want. In line with what I did above, the PDF looks like this:&lt;/p&gt;
&lt;a class="reference external image-reference" href="/images/20160213-zaphod-2.png"&gt;&lt;img alt="Screenshot of annotated PDF" class="align-center" src="/images/20160213-zaphod-2.png" style="height: 400.0px;" /&gt;&lt;/a&gt;
&lt;p&gt;Pretty neat, huh? At least I think so ;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="give-it-a-go"&gt;
&lt;h2&gt;Give it a go!&lt;/h2&gt;
&lt;p&gt;I've tested the tool out myself on a number of different cases, but I'm quite certain I've missed some and there are always bugs that I haven't run into yet. It's a rather simple script in its current version - not all the commands that are called are checked for errors and so on. As I get more time in the future, I'll keep improving it. For the time being, though, it does work.&lt;/p&gt;
&lt;p&gt;Give it a go and let me know what you think? It's &lt;a class="reference external" href="https://github.com/sanjayankur31/zaphod"&gt;hosted on Github&lt;/a&gt;, so feel free to report issues and open pull requests. Let's make LaTeX even more usable!&lt;/p&gt;
&lt;/div&gt;
</content><category term="LaTeX"></category><category term="Programming"></category><category term="Git"></category><category term="Fedora"></category><category term="Zaphod"></category></entry><entry><title>Copr repository for neuroscience related packages</title><link href="/2015/09/06/copr-repository-for-neuroscience-related-packages.html" rel="alternate"></link><published>2015-09-06T19:50:46+01:00</published><updated>2015-09-06T19:50:46+01:00</updated><author><name>ankur</name></author><id>tag:None,2015-09-06:/2015/09/06/copr-repository-for-neuroscience-related-packages.html</id><summary type="html">&lt;p class="first last"&gt;I now maintain a COPR repository where I host neuroscience related packages that Fedora users can use. These packages will be submitted for review to Fedora when I have time in the future.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Just a quick quick post to announce that I've set up &lt;a class="reference external" href="https://copr.fedoraproject.org/coprs/ankursinha/neuroscience-research/"&gt;a COPR repository where I host software used in neuroscience research&lt;/a&gt;. At the moment, the repository contains just a few packages:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.neuron.yale.edu/neuron/"&gt;Neuron&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.python.org/pypi/Brian2"&gt;Brian&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'm working on &lt;a class="reference external" href="http://www.math.pitt.edu/~bard/xpp/xpp.html"&gt;XPPAUT&lt;/a&gt; now and should have that up soon and then I plan to work on &lt;a class="reference external" href="http://www.nest-simulator.org/"&gt;NEST&lt;/a&gt; and &lt;a class="reference external" href="http://neuralensemble.org/PyNN/"&gt;PyNN&lt;/a&gt;. If there are other applications you'd like packaged for Fedora, please &lt;a class="reference external" href="mailto:ankursinha&amp;#64;fedoraproject.org"&gt;drop me an e-mail&lt;/a&gt; and I'll put them up.&lt;/p&gt;
&lt;p&gt;Of course, to install the packages, all you need to do is:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
$ sudo dnf copr &lt;span class="nb"&gt;enable&lt;/span&gt; ankursinha/neuroscience-research
$ sudo dnf install nrn &lt;span class="c1"&gt;# to install NEURON&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;In the long term, the idea is to have all these packages in the Fedora repositories and then have a new shiny neuroscience spin! Of course, if you'd like to help, please drop me a mail too!&lt;/p&gt;
</content><category term="Computational neuroscience"></category><category term="Fedora"></category></entry><entry><title>CNS 2015 - Workshops</title><link href="/2015/08/14/cns-2015-workshops.html" rel="alternate"></link><published>2015-08-14T14:41:46+01:00</published><updated>2015-08-14T14:41:46+01:00</updated><author><name>ankur</name></author><id>tag:None,2015-08-14:/2015/08/14/cns-2015-workshops.html</id><summary type="html">&lt;p class="first last"&gt;I recently attended the conference for computational neuroscience (CNS 2015) in Prague. This post is a summary of the event. These have not been proofread at all. They're just what I noted during the conference.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;The notes have not been proofread. Please do your research before you pick anything from this post. It is meant to be a rough sketch of everything that I heard and noted at the conference. Since quite a bit of this is new to me, it is bound to be inaccurate, unspecific, and possibly even incorrectly quoted.&lt;/p&gt;
&lt;div class="section" id="dendritic-growth-and-wiring-workshop"&gt;
&lt;h2&gt;Dendritic growth and wiring workshop&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Hippocampus - theta oscillation and place cell firing -&amp;gt; directly proportional to locomotion speed.&lt;/li&gt;
&lt;li&gt;Place related firing of place cells is dendritic function.&lt;/li&gt;
&lt;li&gt;Can control the speed of locomotion by external stimulation -&amp;gt; reaches a plateau.&lt;/li&gt;
&lt;li&gt;CITE: Fuhrmann 2015&lt;/li&gt;
&lt;li&gt;Cerebellar synaptic units: bouton and synapses placements and distance distribution&lt;ol class="arabic"&gt;
&lt;li&gt;Double boutons - split and meet 2 neurons.&lt;/li&gt;
&lt;li&gt;Purkinje cells have access to many boutons - lots of boutons close by&lt;/li&gt;
&lt;li&gt;Not same as interneurons which have few boutons around&lt;/li&gt;
&lt;li&gt;Peter's rule of synapse formation.&lt;/li&gt;
&lt;li&gt;PF connectivity is constrained by volume exclusion.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Deconstructing and reconstructing neuronal morphology - George Ascoli&lt;ol class="arabic"&gt;
&lt;li&gt;Biochemistry is very similar to muscles&lt;/li&gt;
&lt;li&gt;B(ranch)A(dvance/extend)R(etract)T(urn)&lt;/li&gt;
&lt;li&gt;CITE: Zhou et al. 2002&lt;/li&gt;
&lt;li&gt;Neuromorpho.org&lt;/li&gt;
&lt;li&gt;BOOK: Trees of the brain, roots of the mind&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Computational modelling of synaptic and dendritic plasticity in the hippocampus - Peter Jedlicka&lt;ol class="arabic"&gt;
&lt;li&gt;Neural activity -&amp;gt; synaptic plasticity -&amp;gt; synaptic efficiency -&amp;gt; neural activity ...&lt;/li&gt;
&lt;li&gt;Dentate Gyrus - (LTP + heterosynaptic STD) (homoeostatic mechanism)&lt;/li&gt;
&lt;li&gt;Model based on STDP and BCM&lt;/li&gt;
&lt;li&gt;STDP:&lt;ol class="arabic"&gt;
&lt;li&gt;LTP amplitude and :math: &lt;cite&gt;tau&lt;/cite&gt;&lt;/li&gt;
&lt;li&gt;LTD amplitude and :math: &lt;cite&gt;tau&lt;/cite&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;BCM homoeostasis rule LTP/LTD amplitudes vary, proportional to integrated spike count (60 second).&lt;/li&gt;
&lt;li&gt;MPP and LPP are spontaneously active.&lt;/li&gt;
&lt;li&gt;Removing BCM homoeostasis/metaplasticity deteriorates performance&lt;/li&gt;
&lt;li&gt;If the mechanism is too quick, plasticity is hampered - why?&lt;/li&gt;
&lt;li&gt;Working on dendritic remodelling following lesions -&amp;gt; computational modelling&lt;/li&gt;
&lt;li&gt;Functional relevance of dendritic retraction&lt;/li&gt;
&lt;li&gt;Algorithms based on wiring optimisations&lt;/li&gt;
&lt;li&gt;BAPs are selectively stronger in the denervated dendritic layer&lt;/li&gt;
&lt;li&gt;At a dendritic morphology level&lt;/li&gt;
&lt;li&gt;Homoeostasis following dendritic retraction&lt;/li&gt;
&lt;li&gt;Smaller neurons fire more because their resistance is higher(?)&lt;/li&gt;
&lt;li&gt;Compensatory enhancement of the intrinsic excitability -&amp;gt; in spite of lower number of stimulated&lt;/li&gt;
&lt;li&gt;Excitability homoeostasis is present in all dendritic trees which undergo lengthening or shortening of their branches while keeping synaptic density constant&lt;/li&gt;
&lt;li&gt;Friedemann is working on homoeostasis and time scales&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Different inputs project on different parts of the dendritic tree&lt;ol class="arabic"&gt;
&lt;li&gt;Both BAPs and Calcium spikes are involved in synaptic plasticity.&lt;/li&gt;
&lt;li&gt;Inhibition can switch plasticity on and off - hypothesis&lt;/li&gt;
&lt;li&gt;BAP (sodium spike)&lt;/li&gt;
&lt;li&gt;An inhibitory neuron makes about 12 connections to a post synaptic neuron?&lt;/li&gt;
&lt;li&gt;Calcium spikes cause soma to burst&lt;/li&gt;
&lt;li&gt;This is all a GABA-a inhibition&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="plasticity-workshop"&gt;
&lt;h2&gt;Plasticity workshop&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Concepts&lt;ol class="arabic"&gt;
&lt;li&gt;Pathways are different for LTP and LTD and so on&lt;/li&gt;
&lt;li&gt;Synaptic plasticity&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Hebbian plasticity and STDP is unstable.&lt;/li&gt;
&lt;li&gt;Homoeostasis&lt;ol class="arabic"&gt;
&lt;li&gt;On synapses
#. Local - homosynaptic
#. Global - heterosynaptic&lt;/li&gt;
&lt;li&gt;Change firing properties&lt;ol class="arabic"&gt;
&lt;li&gt;Threshold&lt;/li&gt;
&lt;li&gt;Intrinsic excitability&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Modulation of plasticity rule (metaplasticity)&lt;/li&gt;
&lt;li&gt;Anti-hebbian&lt;/li&gt;
&lt;li&gt;Putative role of glial cells&lt;/li&gt;
&lt;li&gt;Synaptic scaling - slow (&lt;span class="math"&gt;\(\tau_{home} = 1~day\)&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;CITE: Kech 2013 - lesioning is followed by upscaling synapses also&lt;/li&gt;
&lt;li&gt;CITE: Zenke 2013 - metaplastic triplet&lt;/li&gt;
&lt;li&gt;All of them have the same behaviour - oscillations if the time scle of STDP is much larger than that homoeostatic mechanism.&lt;/li&gt;
&lt;li&gt;Functional significance of oscillations in weights? No answer yet.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Synaptic plasticity and scaling their role in memory formation&lt;ol class="arabic"&gt;
&lt;li&gt;Can SPM explain dynamics of memory?&lt;/li&gt;
&lt;li&gt;Memory consolidation during sleep -&amp;gt; important&lt;/li&gt;
&lt;li&gt;Once an assembly (memory) has been formed, they can be consolidated by a completely unspecific stimulus&lt;/li&gt;
&lt;li&gt;Slow wave sleep is important for consolidation&lt;/li&gt;
&lt;li&gt;Recall by partial stimulus causes weakening of assembly because of imbalance of activity - recall acts as perturbation&lt;/li&gt;
&lt;li&gt;Similarly, learning a related, overlapping task also has the tendency to act as a perturbation.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Modelling the dynamic interaction between hebbian and homoeostatic plasticity (synaptic scaling)&lt;ol class="arabic"&gt;
&lt;li&gt;Hebbian is fast&lt;/li&gt;
&lt;li&gt;Homoestatic is slow&lt;/li&gt;
&lt;li&gt;How can homoeostatic plasticity be powerful enough and slow enough at the same time?&lt;/li&gt;
&lt;li&gt;If homoeostasis is slow, it can result in oscillations&lt;/li&gt;
&lt;li&gt;Data from monocular deprivation&lt;/li&gt;
&lt;li&gt;TNF-alpha mediates homoeostatic plasticity&lt;/li&gt;
&lt;li&gt;Spines fluctuate - explain volume distribution in absence of neuronal activity&lt;/li&gt;
&lt;li&gt;Fluctuation is directly proportional to spine size&lt;/li&gt;
&lt;li&gt;CITE: Yasamatsu 2008&lt;/li&gt;
&lt;li&gt;Small spines tend to stay for longer periods&lt;/li&gt;
&lt;li&gt;CITE: Kasai et al 2010&lt;/li&gt;
&lt;li&gt;Spike fluctuation are responsible for synaptic normalisation (hypothesis!)&lt;/li&gt;
&lt;li&gt;At a population level spike volume exhibits bistability&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="open-source-brain-workshop"&gt;
&lt;h2&gt;Open source brain workshop&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;NeuroML - XML for computational neuroscience&lt;/li&gt;
&lt;li&gt;neuroconstruct&lt;/li&gt;
&lt;li&gt;neuromorpho&lt;/li&gt;
&lt;li&gt;channelpedia&lt;/li&gt;
&lt;li&gt;Allen database&lt;/li&gt;
&lt;li&gt;pyNeuroML and jNeuroML&lt;/li&gt;
&lt;li&gt;Openworm&lt;ol class="arabic"&gt;
&lt;li&gt;Cell by cell 3D neurmechanical model&lt;/li&gt;
&lt;li&gt;&lt;ol class="first upperalpha" start="3"&gt;
&lt;li&gt;elegans&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;302 neurons&lt;/li&gt;
&lt;li&gt;956 cells&lt;/li&gt;
&lt;li&gt;Fully sequenced genome&lt;/li&gt;
&lt;li&gt;Current state:&lt;ol class="arabic"&gt;
&lt;li&gt;Ready issues are mentioned on GitHub main page like Travis build status&lt;/li&gt;
&lt;li&gt;Wormsim&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="large-scale-modelling-workshop"&gt;
&lt;h2&gt;Large scale modelling workshop&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Visual cortex in NEST - Sacha Van Albada&lt;/li&gt;
&lt;li&gt;Towards rewiring of full scale cortical networks - Rinke and Butz&lt;ol class="arabic"&gt;
&lt;li&gt;Synaptogenesis&lt;ol class="arabic"&gt;
&lt;li&gt;Directly proportional to f(distance)&lt;/li&gt;
&lt;li&gt;Direclty proportional to f(availability of neurites)&lt;/li&gt;
&lt;li&gt;Time per axon: &lt;span class="math"&gt;\(O(n)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Time total &lt;span class="math"&gt;\(O(n^2)\)&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Deletion:&lt;ol class="arabic"&gt;
&lt;li&gt;Time per axon: &lt;span class="math"&gt;\(O(1)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Time total &lt;span class="math"&gt;\(O(n^2)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;For increasing number of neurons, the runtime increase drastically. (&lt;span class="math"&gt;\(10^3 \rightarrow 100ms, 10^4 \rightarrow 10s, 10^5 \rightarrow 16m, 10^6 \rightarrow 27 hours\)&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;The probability calculation for 1 neurite takes 100ms&lt;/li&gt;
&lt;li&gt;Optimisation method is inspired by the Barnes-Hut n-body method.&lt;ol class="arabic"&gt;
&lt;li&gt;Formation&lt;ol class="arabic"&gt;
&lt;li&gt;Tree construction - &lt;span class="math"&gt;\(O(n log n)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Time per axon - &lt;span class="math"&gt;\(O(log n^2n)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Total: &lt;span class="math"&gt;\(O(nlog^2n)\)&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Deletion&lt;ol class="arabic"&gt;
&lt;li&gt;Time per axon - &lt;span class="math"&gt;\(O(1)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Total: &lt;span class="math"&gt;\(O(n)\)&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Runtime (&lt;span class="math"&gt;\(10^3 \rightarrow 10ms, 10^4 \rightarrow 200ms, 10^5 \rightarrow 3s, 10^6 \rightarrow 40s, 10^7 \rightarrow 10min\)&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;Further parallelisation will reduce times even further&lt;/li&gt;
&lt;li&gt;Current and future:&lt;ol class="arabic"&gt;
&lt;li&gt;Validate results&lt;/li&gt;
&lt;li&gt;Parallelise&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "left",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'blue ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Computational neuroscience"></category><category term="Fedora"></category></entry><entry><title>CNS 2015 Day 2 and 3</title><link href="/2015/08/14/cns-2015-day-2-and-3.html" rel="alternate"></link><published>2015-08-14T14:00:59+01:00</published><updated>2015-08-14T14:00:59+01:00</updated><author><name>ankur</name></author><id>tag:None,2015-08-14:/2015/08/14/cns-2015-day-2-and-3.html</id><summary type="html">&lt;p class="first last"&gt;I recently attended the conference for computational neuroscience (CNS 2015) in Prague. This post is a summary of the event. These have not been proofread at all. They're just what I noted during the conference.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;The notes have not been proofread. Please do your research before you pick anything from this post. It is meant to be a rough sketch of everything that I heard and noted at the conference. Since quite a bit of this is new to me, it is bound to be inaccurate, unspecific, and possibly even incorrectly quoted.&lt;/p&gt;
&lt;div class="section" id="day-2-collective-information-storage-by-stochastic-model-of-structural-plasticity"&gt;
&lt;h2&gt;Day 2 - Collective information storage by stochastic model of structural plasticity&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;If animal is learning, spine formation and destruction is much higher.&lt;/li&gt;
&lt;li&gt;Model of structural plasticity&lt;ol class="arabic"&gt;
&lt;li&gt;Neural activity.&lt;/li&gt;
&lt;li&gt;Synaptic weights.&lt;/li&gt;
&lt;li&gt;Network structure.&lt;/li&gt;
&lt;li&gt;Weight is directly proportional to spine volume&lt;/li&gt;
&lt;li&gt;Spine volume is directly proportional to spine stability&lt;/li&gt;
&lt;li&gt;Stochastic&lt;/li&gt;
&lt;li&gt;P(removal), P(formation)&lt;/li&gt;
&lt;li&gt;Calibrated using experimental data.&lt;/li&gt;
&lt;li&gt;Post synaptic correlation stabilises synaptic weight.&lt;/li&gt;
&lt;li&gt;Synapses between 2 neurons don't know about each other.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="limited-range-correlations-when-modulated-by-firing-rate-can-substantially-improve-neural-population-coding"&gt;
&lt;h2&gt;Limited range correlations, when modulated by firing rate, can substantially improve neural population coding&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Noisy population coding problem.&lt;/li&gt;
&lt;li&gt;Retina displays rate dependent correlations that strongly enhance population codes.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="day-3-gerstner-keynote"&gt;
&lt;h2&gt;Day 3 - Gerstner Keynote&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Model scales&lt;ol class="arabic"&gt;
&lt;li&gt;Population rate model (Wilson Cowan) -&amp;gt; &lt;em&gt;coarse graining&lt;/em&gt; -&amp;gt; phenomenological model (LIF) -&amp;gt; &lt;em&gt;simplification&lt;/em&gt; -&amp;gt; biophysical (Hodgkin-Huxley).&lt;/li&gt;
&lt;li&gt;CITE: Harris &amp;amp; Shepperd 2015 - populations of neuron and classification.&lt;/li&gt;
&lt;li&gt;Parameter extraction&lt;/li&gt;
&lt;li&gt;Adaptation&lt;/li&gt;
&lt;li&gt;Generalised linear model (GLM) or spine response model (SRM).&lt;/li&gt;
&lt;li&gt;CITE: Gerstner and Naud 2009&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Steps:&lt;ol class="arabic"&gt;
&lt;li&gt;Systematic optimisation of parameters&lt;ol class="arabic"&gt;
&lt;li&gt;Predict membrane potential -&amp;gt; quadratic error function&lt;/li&gt;
&lt;li&gt;We have potentials, now optimise spike timings.&lt;/li&gt;
&lt;li&gt;Very quick process&lt;/li&gt;
&lt;li&gt;Spikes and thresholds have an effect on functioning of neuron from about 10 seconds.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Quantifying spike timing - 90% predictability&lt;/li&gt;
&lt;li&gt;CITE: Mensi et al. J. neurophsyiology 2011&lt;/li&gt;
&lt;li&gt;Allen Institute - high throughput work&lt;/li&gt;
&lt;li&gt;CITE: Naud and Gerstner 2012 - PLOS computational biology.&lt;/li&gt;
&lt;li&gt;Fluctuations are good because they ensure that multiple solutions are exhibited&lt;/li&gt;
&lt;li&gt;Finite size issue&lt;/li&gt;
&lt;li&gt;Power spectrum&lt;/li&gt;
&lt;li&gt;Schwalger et al. 2014 + poster at CNS&lt;/li&gt;
&lt;li&gt;For differential equations -&amp;gt; find fixed points -&amp;gt; linearise -&amp;gt; them other analysis.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="misc"&gt;
&lt;h2&gt;Misc&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Critical state -&amp;gt; functions of network are most efficient&lt;/li&gt;
&lt;li&gt;Lots of evidence from models but only recently have they received experimental data - Poster 221&lt;/li&gt;
&lt;li&gt;Disadvantages of criticality&lt;ol class="arabic"&gt;
&lt;li&gt;Fine tuning&lt;/li&gt;
&lt;li&gt;Slightly sub-critical is better.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="Computational neuroscience"></category><category term="Fedora"></category></entry><entry><title>CNS 2015 - Day 1</title><link href="/2015/07/30/cns-2015-day-1.html" rel="alternate"></link><published>2015-07-30T13:43:52+01:00</published><updated>2015-07-30T13:43:52+01:00</updated><author><name>ankur</name></author><id>tag:None,2015-07-30:/2015/07/30/cns-2015-day-1.html</id><summary type="html">&lt;p class="first last"&gt;I recently attended the conference for computational neuroscience (CNS 2015) in Prague. This post is a summary of the first day event. These have not been proofread at all. They're just what I noted during the conference.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;The notes have not been proofread. Please do your research before you pick anything from this post. It is meant to be a rough sketch of everything that I heard and noted at the conference. Since quite a bit of this is new to me, it is bound to be inaccurate, unspecific, and possibly even incorrectly quoted.&lt;/p&gt;
&lt;div class="section" id="day-0-keynote-birdsong"&gt;
&lt;h2&gt;Day 0 Keynote - &amp;quot;Birdsong&amp;quot;&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Adrienne Fairhall&lt;/li&gt;
&lt;li&gt;Birds learn their songs by trial and error.&lt;/li&gt;
&lt;li&gt;The Zebra Finch has a single song.&lt;/li&gt;
&lt;li&gt;STDP may require sustained depolarisation or bursting to occur.&lt;/li&gt;
&lt;li&gt;The structure of the basal ganglia is pretty conserved in all mammals.&lt;/li&gt;
&lt;li&gt;EI -&amp;gt; atractor -&amp;gt; stability&lt;/li&gt;
&lt;li&gt;Dopamine effect is U shaped in avalanche distribution in basal ganglia, therefore, both too much and too little will give negative results.&lt;/li&gt;
&lt;li&gt;Q: Why do you need variability for learning? (Structured variability)&lt;/li&gt;
&lt;li&gt;Q: How do we isolate the variability that was &amp;quot;good&amp;quot;?&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="day-1-keynote-wilson-cowan-equations"&gt;
&lt;h2&gt;Day 1 keynote - Wilson-Cowan equations&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Jack Cowan&lt;/li&gt;
&lt;li&gt;Wilson-Cowan equations.&lt;/li&gt;
&lt;li&gt;Attractor dynamics in neural systems.&lt;/li&gt;
&lt;li&gt;Exhibit various stable behaviours&lt;/li&gt;
&lt;li&gt;Oscillations before settle to a fixed point&lt;ol class="arabic"&gt;
&lt;li&gt;Stable forms.&lt;/li&gt;
&lt;li&gt;In the Vogels self organising model&lt;/li&gt;
&lt;li&gt;CITE: paper in press&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Near a phase transition, no need to look at details of single neurons - you're not missing anything by ignoring single neuron details.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="limits-of-scalability-of-cortical-network-models"&gt;
&lt;h2&gt;Limits of scalability of cortical network models&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Sacha van Albada&lt;/li&gt;
&lt;li&gt;Mechanism at &lt;span class="math"&gt;\(N \rightarrow \infty\)&lt;/span&gt; is not the same mechanism at finite size.&lt;/li&gt;
&lt;li&gt;Inappropriate scaling can also cause the network to become unstable -&amp;gt; for example, cause large osciallations.&lt;/li&gt;
&lt;li&gt;Asynchronous irregular state, therefore, Gaussian inputs assumed&lt;/li&gt;
&lt;li&gt;LIF is like the rate model with white noise added to outputs&lt;/li&gt;
&lt;li&gt;So, while scaling you have to maintain effective connectivity and also maintain mean activities.&lt;/li&gt;
&lt;li&gt;Important to simulate at natural scale to verify.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="complex-synapses-as-efficient-memory-systems"&gt;
&lt;h2&gt;Complex synapses as efficient memory systems&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Markus Benna.&lt;/li&gt;
&lt;li&gt;Dense coding.&lt;/li&gt;
&lt;li&gt;Also use SNR.&lt;/li&gt;
&lt;li&gt;Synaptic weight distribution gets wider and wider - diffusion process.&lt;/li&gt;
&lt;li&gt;Good synaptic memory model:&lt;ol class="arabic"&gt;
&lt;li&gt;Work with tightly bounded weights&lt;/li&gt;
&lt;li&gt;Online learning&lt;/li&gt;
&lt;li&gt;High SNR.&lt;/li&gt;
&lt;li&gt;Not too complicated&lt;/li&gt;
&lt;li&gt;Long life time&lt;/li&gt;
&lt;li&gt;CITE: Amit and Fusi 1994&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Cascade model of complex synapse&lt;/li&gt;
&lt;li&gt;Need a balance of LTP/LTD - otherwise your distribution is squished against one of the boundaries.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="self-organisation-of-computation-in-neural-systems-by-interaction-between-homoeostatic-and-synaptic-plasticity"&gt;
&lt;h2&gt;Self-organisation of computation in neural systems by interaction between homoeostatic and synaptic plasticity&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Sakyasingha Dasgupta&lt;/li&gt;
&lt;li&gt;Cell assembly properties&lt;ol class="arabic"&gt;
&lt;li&gt;Pattern completion&lt;/li&gt;
&lt;li&gt;I-O association&lt;/li&gt;
&lt;li&gt;Persistent activity&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Synaptic scaling is about 50-100 times slower than synaptic plasticity process&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="a-model-for-spatially-periodic-firing-in-the-hippocampal-formation-based-on-interacting-excitatory-and-inhibitory-plasticity"&gt;
&lt;h2&gt;A model for spatially periodic firing in the hippocampal formation based on interacting excitatory and inhibitory plasticity&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Simon Weber&lt;/li&gt;
&lt;li&gt;If inhibition is not precise enough, you get periodic firing.&lt;/li&gt;
&lt;li&gt;Model of grid and place cells&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "left",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'blue ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Computational neuroscience"></category><category term="Fedora"></category></entry><entry><title>CNS 2015 - Day 0</title><link href="/2015/07/29/cns-2015-day0.html" rel="alternate"></link><published>2015-07-29T11:04:59+01:00</published><updated>2015-07-29T11:04:59+01:00</updated><author><name>ankur</name></author><id>tag:None,2015-07-29:/2015/07/29/cns-2015-day0.html</id><summary type="html">&lt;p class="first last"&gt;I recently attended the conference for computational neuroscience (CNS 2015) in Prague. This post is a summary of the event. These have not been proofread at all. They're just what I noted during the conference.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;The notes have not been proofread. Please do your research before you pick anything from this post. It is meant to be a rough sketch of everything that I heard and noted at the conference. Since quite a bit of this is new to me, it is bound to be inaccurate, unspecific, and possibly even incorrectly quoted.&lt;/p&gt;
&lt;div class="section" id="conference-details"&gt;
&lt;h2&gt;Conference details&lt;/h2&gt;
&lt;p&gt;The conference was between July 18 and July 23, 2015 and was at the University of Economics in Prague. More information on the conference can be found at the &lt;a class="reference external" href="http://www.cnsorg.org/cns-2015"&gt;website here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="arrival-in-prague"&gt;
&lt;h2&gt;Arrival in Prague&lt;/h2&gt;
&lt;p&gt;We arrived by a slightly late flight at the Prague airport. Even before we'd left the airport, my supervisor, Volker, introduced us to &lt;a class="reference external" href="http://www.izhikevich.org/"&gt;Eugene Izhikevich&lt;/a&gt; at the baggage carousel. I was obviously star struck and mentally noted how well the trip had begun. We took a bus and a train to get to our hotels which were all around the conference venue in Prague 3.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="day-0-tutorials"&gt;
&lt;h2&gt;Day 0 - tutorials&lt;/h2&gt;
&lt;p&gt;I initially started at the &lt;a class="reference external" href="http://briansimulator.org/brian-tutorial-at-cns-2015/"&gt;Brian tutorial&lt;/a&gt; hoping to learn more about the simulator. The tutorial was more about using the simulator, and since I'm not using the simulator at the moment, I moved to the &lt;a class="reference external" href="http://www.cnsorg.org/cns-2015-tutorials#t5"&gt;tutorial on Calcium Dynamics&lt;/a&gt;. The tutorial was most informative, and of course, a rather large part of the information was completely new to me. Here are the notes I scribbled in my not so scientific terms:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Calcium is critical for plasticity.&lt;/li&gt;
&lt;li&gt;Kinase takes a phosphate group and puts it on to another molecule.&lt;/li&gt;
&lt;li&gt;CaMKII is required for LTP but not required nor activated in LTD.&lt;/li&gt;
&lt;li&gt;Inhibition of CaMKII blocks LTP and memory.&lt;/li&gt;
&lt;li&gt;Phosphatases play a role in LTD, for example PP2B (Calcineurin) is also activated by Ca.&lt;/li&gt;
&lt;li&gt;Both LTD and LTP require elevation in Ca++, so how does the Ca++ decide whether to bind to CaMKII (LTP) or PP2B(LTD)?&lt;ol class="arabic"&gt;
&lt;li&gt;Calcium calmodulin first binds to PP2B.&lt;/li&gt;
&lt;li&gt;With higher concentrations of Calcium calmodulin, the excess Ca binds to CaMKII.&lt;/li&gt;
&lt;li&gt;The CaMKII activity overcomes PP2B activity.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;The dynamics of Ca and CaMKII do not explain everything.&lt;ol class="arabic"&gt;
&lt;li&gt;In neocortical Calcium neurons, for example, the magnitude of peak Calcium does not always predict the direction of plasticity.&lt;/li&gt;
&lt;li&gt;CITE: Nevian and Sakmann - J. neuroscience 2006.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Other protein kinases:&lt;ol class="arabic"&gt;
&lt;li&gt;Protein kinase C&lt;/li&gt;
&lt;li&gt;Protein kinase A and so on.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;E-LTP - early LTP&lt;/li&gt;
&lt;li&gt;L-LTP - late LTP&lt;ol class="arabic"&gt;
&lt;li&gt;These names aren't the best since people sometimes confuse themselves by thinking that the L means &amp;quot;late induction&amp;quot;, which is not the case.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Signal pathways and LTP:&lt;ol class="arabic"&gt;
&lt;li&gt;Neurotransmitter -&amp;gt; receptor -&amp;gt; second messenger -&amp;gt; kinase/phosphatase -&amp;gt; nucleus.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;It is yet to be shown that STDP is protein synthesis dependent.&lt;/li&gt;
&lt;li&gt;General method of studying effects of molecules seems to be the introduction of inhibitors and analysis of their effects.&lt;/li&gt;
&lt;li&gt;MAPK activation is reqired for L-LTP and fear learning.&lt;/li&gt;
&lt;li&gt;There are changes in the dendritic spine.&lt;/li&gt;
&lt;li&gt;Synaptic plasticity, excitability, gene regulation and memory are all controlled by intracellular signalling pathways.&lt;/li&gt;
&lt;li&gt;G protein coupled (metabotrophic) receptors are involved in LTP.&lt;ol class="arabic"&gt;
&lt;li&gt;Direct action - directly gates channel&lt;/li&gt;
&lt;li&gt;Indirect action - via downstream messengers.&lt;/li&gt;
&lt;li&gt;For direct action, the channels that are closest are acted upon.&lt;/li&gt;
&lt;li&gt;For indirect action, G protein binds to an enzyme -&amp;gt; enzyme produces second messenger -&amp;gt; therefore, wide spatial extent due to diffusible second messenger.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;G proteins can be heterotrimetric:&lt;ol class="arabic"&gt;
&lt;li&gt;They are made up of three subunits: alpha, beta and gamma.&lt;/li&gt;
&lt;li&gt;The beta and gamma subunits bind to the alpha subunit and prevent it from binding.&lt;/li&gt;
&lt;li&gt;GDP - inactive.&lt;/li&gt;
&lt;li&gt;GTP - active.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Enzymes activated by G proteins:&lt;ol class="arabic"&gt;
&lt;li&gt;Adenylyl cyclase (Gs)&lt;/li&gt;
&lt;li&gt;Phospholipase C (Gq)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Stoichiometric reactions - the equations provide information on the number of molecules required&lt;/li&gt;
&lt;li&gt;The transition from closed to open channels are a first order chemical reaction:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="math"&gt;
\begin{align*}
substrate &amp;amp;\underset{k_b}{\overset{k_b}{\rightleftharpoons}} product \\
p/s &amp;amp;= k_f/k_b \\
d[prod]/dt &amp;amp;= k_f[substrate] - k_b[product] \\
[substrate] &amp;amp;= [initial\_concentration] - [product]
\end{align*}
&lt;/div&gt;
&lt;ol class="arabic simple" start="22"&gt;
&lt;li&gt;Second order reactions:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="math"&gt;
\begin{align*}
substrate1 + substrate2 &amp;amp;\underset{k_b}{\overset{k_b}{\rightleftharpoons}} product \\
d[prod]/dt &amp;amp;= k_f[substrate1][substrate2] - k_b[product] \\
[substrate1] &amp;amp;= [initial\_concentration\_substrate1] - [product]  \\
[substrate2] &amp;amp;= [initial\_concentration\_substrate2] - [product]
\end{align*}
&lt;/div&gt;
&lt;ol class="arabic simple" start="23"&gt;
&lt;li&gt;Third order reactions:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="math"&gt;
\begin{align*}
substrate1 + 2~substrate2 &amp;amp;\underset{k_b}{\overset{k_b}{\rightleftharpoons}} product \\
d[prod]/dt &amp;amp;= k_f[substrate1]{[substrate2]}^2 - k_b[product] \\
[substrate1] &amp;amp;= [initial\_concentration\_substrate1] - [product] \\
[substrate2] &amp;amp;= [initial\_concentration\_substrate2] - 2~[product]
\end{align*}
&lt;/div&gt;
&lt;ol class="arabic simple" start="24"&gt;
&lt;li&gt;Enzymatic reactions:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="math"&gt;
\begin{align*}
Enzyme + substrate &amp;amp;\underset{k_b}{\overset{k_b}{\rightleftharpoons}} ES \overset{k_{cat}}{\rightarrow} Enzyme + product \\
d[ES]/dt &amp;amp;= k_f[Enzyme][substrate] - (k_{cat} - k_b).[ES] \\
dprod/dt &amp;amp;= k_{cat}.[ES]
\end{align*}
&lt;/div&gt;
&lt;ol class="arabic simple" start="25"&gt;
&lt;li&gt;Backward rate constant is very near zero.&lt;/li&gt;
&lt;li&gt;Michalis-Menton Dynamics(?).&lt;/li&gt;
&lt;li&gt;ES rapdly reaches equilibrium.&lt;/li&gt;
&lt;li&gt;Substrate is in excess (enzyme quantity is rate limiting).&lt;/li&gt;
&lt;li&gt;At equilibrium:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="math"&gt;
\begin{align*}
d[ES]/dt &amp;amp;= 0 \\
k_f[Enzyme][Substrate] - (k_b + k_{cat}).[ES] &amp;amp;= 0 \\
[Enzyme] &amp;amp;= [Enzyme\_total] - [ES] \\
[ES] &amp;amp;= ([Enzyme\_total].[Substrate])/((k_b + k_{cat})/kf + [Substrate]) \\
d[product]/dt &amp;amp;= (k_{cat}.[Enzyme\_total].[Substrate])/([Substrate] + k_m) \\
k_m &amp;amp;= (k_{cat} + k_b)/k_f
\end{align*}
&lt;/div&gt;
&lt;ol class="arabic simple" start="30"&gt;
&lt;li&gt;&lt;span class="math"&gt;\(k_f\)&lt;/span&gt; is affinity - no need to know &lt;span class="math"&gt;\(k_b\)&lt;/span&gt; and &lt;span class="math"&gt;\(k_f\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Note that at max:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="math"&gt;
\begin{align*}
d[product]/dt &amp;amp;= k_{cat}[Enzyme\_total] \\
[Substrate]/([Substrate] + k_m) &amp;amp;= 1~as~[substrate] -&amp;gt; \infty
\end{align*}
&lt;/div&gt;
&lt;ol class="arabic simple" start="32"&gt;
&lt;li&gt;General rule:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="math"&gt;
\begin{align*}
d[product]/dt = \sum\limits{all\_rxns} (k_f \prod{[Substrate]} - k_b \prod{[product]}) \\
\end{align*}
&lt;/div&gt;
&lt;ol class="arabic simple" start="33"&gt;
&lt;li&gt;Software:&lt;ol class="arabic"&gt;
&lt;li&gt;XPPAUT - general purpose ODE solver.&lt;ol class="arabic"&gt;
&lt;li&gt;To smooth out sudden spikes, you filter it out through an RC circuit to make it smoother.&lt;/li&gt;
&lt;li&gt;Just write ODEs normally.&lt;/li&gt;
&lt;li&gt;&amp;quot;aux&amp;quot; key word if you want to see the value of variables not in differential equations.&lt;/li&gt;
&lt;li&gt;Saves data to text files.&lt;/li&gt;
&lt;li&gt;Good tool for single neuron analysis, like AdEx analysis - shows values of diff equations and so on.&lt;/li&gt;
&lt;li&gt;Can also do nullclines.&lt;/li&gt;
&lt;li&gt;Has many ODE solvers to choose from.&lt;/li&gt;
&lt;li&gt;Also does phase plane analysis.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Genesis/Chemesis/Kinetikit/Moose
#. Moose has a python interface
#. use &amp;quot;showfield&amp;quot; to check values
#. Basically, you make different molecule variables and so on and hook them up together at the end.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Smooth endoplasmic reticulum are Calcium stores&lt;/li&gt;
&lt;li&gt;Sources of Calcium:&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Calcium currents (L,N,P,Q,R,T)&lt;/li&gt;
&lt;li&gt;Internal stores&lt;/li&gt;
&lt;li&gt;Calcium sinks&lt;/li&gt;
&lt;li&gt;Source or sink:&lt;ol class="arabic"&gt;
&lt;li&gt;Buffers&lt;/li&gt;
&lt;li&gt;diffusion&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="36"&gt;
&lt;li&gt;Working with experimentalists is a must for accurate constants while modelling Calcium concentrations.&lt;/li&gt;
&lt;li&gt;Calcium current:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="math"&gt;
\begin{equation*}
I_{Ca} = g_{max}m^ph^q (V_m - E_{Ca})
\end{equation*}
&lt;/div&gt;
&lt;ol class="arabic simple" start="38"&gt;
&lt;li&gt;but Calcium currents don't reverse and it is not well understood why, so we use the Goldman-Hodgkin-Katz equation.&lt;/li&gt;
&lt;li&gt;It applies when inside and outside concentrations are asymmetrical.&lt;/li&gt;
&lt;li&gt;Influx due to Calcium:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="math"&gt;
\begin{align*}
\phi &amp;amp;= (-I_{Ca}(Vm))/(charge.F) \\
F &amp;amp;= Faraday's constant
\end{align*}
&lt;/div&gt;
&lt;ol class="arabic simple" start="41"&gt;
&lt;li&gt;Flux = moles per unit time.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(E_{Ca} &amp;gt; E_{Na}\)&lt;/span&gt;, so never have Ca flowing in. We must use indirect methods - 10% of NMDA conductance and so on.&lt;/li&gt;
&lt;li&gt;Ion channels have multiple states one of which is &amp;quot;open and conducting&amp;quot;.&lt;/li&gt;
&lt;li&gt;Hodgkin-Huxley model says the different subunits are independent:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="math"&gt;
\begin{equation*}
n^4 = n_1 \times n_2 \times n_3 \times n_4.
\end{equation*}
&lt;/div&gt;
&lt;ol class="arabic simple" start="45"&gt;
&lt;li&gt;So, it works for K: single channel data is sufficient for multi state model.&lt;/li&gt;
&lt;li&gt;But, this doesn't work for Na channels, which is when you need to include different states of channels.&lt;/li&gt;
&lt;li&gt;Pick the level of modelling that you need.&lt;/li&gt;
&lt;li&gt;CITE: Li and Rinzi - equations to model Ca channel dynamics.&lt;/li&gt;
&lt;li&gt;CITE: Scheuss et al 2002&lt;/li&gt;
&lt;li&gt;Note: Calbindin and Parvalbumin are used to classify neurons.&lt;/li&gt;
&lt;li&gt;Spines are generally modelled in a single dimension.&lt;/li&gt;
&lt;li&gt;Genesis and Moose have simplified Calcium implementations.&lt;/li&gt;
&lt;li&gt;TIP: always take a peek at the sources of implementations to make sure what units are used.&lt;/li&gt;
&lt;li&gt;Volume of ER is about 18.5% of full cell.&lt;/li&gt;
&lt;li&gt;Spatial stochastic simulators&lt;ol class="arabic"&gt;
&lt;li&gt;Smoldyn, MCell, CDS&lt;/li&gt;
&lt;li&gt;Each molecule is a point particle&lt;/li&gt;
&lt;li&gt;Computations increase with the number of molecules&lt;/li&gt;
&lt;li&gt;MCell:&lt;ol class="arabic"&gt;
&lt;li&gt;Geometry from volumetric data using Blender&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;CDS:&lt;ol class="arabic"&gt;
&lt;li&gt;Particle based simulators with event driven algorithm.&lt;/li&gt;
&lt;li&gt;Investigate crowding and so on since particles have a volume.&lt;/li&gt;
&lt;li&gt;CaMKII diffusion depends on morphology.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Smoldyn&lt;ol class="arabic"&gt;
&lt;li&gt;Relatively easy to use and learn.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Non spatial stochastic simulators&lt;ol class="arabic"&gt;
&lt;li&gt;Each simulator has different goals&lt;/li&gt;
&lt;li&gt;NeuroRD - mesoscopic.&lt;ol class="arabic"&gt;
&lt;li&gt;Different morphology file and reaction file.&lt;/li&gt;
&lt;li&gt;Only first and second order at this time.&lt;/li&gt;
&lt;li&gt;A separate initial condition file.&lt;/li&gt;
&lt;li&gt;Stimulation file.&lt;/li&gt;
&lt;li&gt;Output specification -&amp;gt; list of molecules.&lt;/li&gt;
&lt;li&gt;Top level modal file that tells what files do what.&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;VCell&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "left",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'blue ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Computational neuroscience"></category><category term="Events"></category><category term="Fedora"></category></entry><entry><title>F-I curves for the AdEx neuron model - tonic spiking without adaptation</title><link href="/2015/06/24/f-i-curves-for-the-adex-neuron-model-without-adaptation.html" rel="alternate"></link><published>2015-06-24T21:30:16+01:00</published><updated>2015-06-24T21:30:16+01:00</updated><author><name>ankur</name></author><id>tag:None,2015-06-24:/2015/06/24/f-i-curves-for-the-adex-neuron-model-without-adaptation.html</id><summary type="html">&lt;p class="first last"&gt;I'm looking into the AdEx neuron model right now and this post has some information on how the model's tonic spiking behaviour varies with different input currents and reset voltages.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I'm looking into the &lt;a class="reference external" href="http://www.scholarpedia.org/article/Adaptive_exponential_integrate-and-fire_model"&gt;Adaptive exponential integrate and fire neuron model&lt;/a&gt; (AdEx) in my research at the moment. This neuron model includes various improvements over the simple &lt;a class="reference external" href="http://icwww.epfl.ch/~gerstner/SPNM/node26.html"&gt;Leaky integrate and fire&lt;/a&gt; (LIF) neuron model. AdEx, depending on various parameters, &lt;a class="reference external" href="http://link.springer.com/article/10.1007/s00422-008-0264-7"&gt;can exhibit different spiking behaviours&lt;/a&gt;. I'm looking at the simplest one at the moment - tonic spiking in the absence of adaptation &lt;strong&gt;(a,b=0)&lt;/strong&gt;. With this parameter set, the AdEx is simplified to a simple LIF model. The figure below shows the &amp;quot;firing rate (spikes per second) vs current&amp;quot; graph for different reset voltages (-58mV, -60mV, -65mV, -70mV).&lt;/p&gt;
&lt;a class="reference external image-reference" href="/images/AdEx-ab0-FI.png"&gt;&lt;img alt="AdEx F-I curve with different reset voltages" class="align-center" src="/images/AdEx-ab0-FI.png" style="width: 800px;" /&gt;&lt;/a&gt;
&lt;p&gt;The variation here is quite expected - if the neuron is reset to a lower voltage after a spike, it'll take more time to spike again and the firing rate will be less as a result. The second figure shows the membrane potential plotted as a function of time with the reset voltage at -70mV and the external current being given to the neuron is 500pA.&lt;/p&gt;
&lt;a class="reference external image-reference" href="/images/adex-70mV-500pA.png"&gt;&lt;img alt="AdEx tonic spiking without adaptation membrane potential with 70mV reset voltage and 500pA external current." class="align-center" src="/images/adex-70mV-500pA.png" style="width: 800px;" /&gt;&lt;/a&gt;
&lt;p&gt;This graph is self-explanatory too. The upswing in membrane potential brought about by the exponential term is quite apparent. The lack of adaptation is shown by the constant inter spike interval (ISI). In the presence of adaptation, the ISI would steadily increase. I've looked in to that too, but I haven't a pretty graph to show at the moment.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/fzenke/auryn"&gt;Auryn&lt;/a&gt; code required to generate the graphs is given below. You can use a different simulator - &lt;a class="reference external" href="http://nest.github.io/nest-simulator/"&gt;Nest&lt;/a&gt; or &lt;a class="reference external" href="https://github.com/NeuralEnsemble/PyNN"&gt;PyNN&lt;/a&gt; and so on - and you should receive the same results. I've already &lt;a class="reference external" href="https://github.com/sanjayankur31/adex-pybrian-tests/tree/master/results"&gt;verified&lt;/a&gt; with &lt;a class="reference external" href="http://briansimulator.org/"&gt;Brian&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;auryn_global.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;auryn_definitions.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;System.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;SpikeMonitor.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;VoltageMonitor.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;Logger.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;AdExGroup.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ac&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;av&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;mpi&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ac&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;av&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;mpi&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;communicator&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;communicator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;output.log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="n"&gt;PROGRESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;EVERYTHING&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Setting up single neuron ...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;PROGRESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;AdExGroup&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;neurons_e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;AdExGroup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


    &lt;span class="cm"&gt;/* Parameters for the model */&lt;/span&gt;
    &lt;span class="n"&gt;neurons_e&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;set_c_mem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;200e-12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;g_leak&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;neurons_e&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;set_g_leak&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;g_leak&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;1e-9&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;neurons_e&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;set_e_rest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;70e-3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;neurons_e&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;set_e_thr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;50e-3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;neurons_e&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;set_a&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;g_leak&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;neurons_e&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;set_tau_w&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;30e-3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;neurons_e&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;set_b&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mf"&gt;0e-3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;g_leak&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;neurons_e&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;set_e_reset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;58e-3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/* External current */&lt;/span&gt;
    &lt;span class="n"&gt;neurons_e&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;set_bg_current&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;2000e-3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;g_leak&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/* Output files */&lt;/span&gt;
    &lt;span class="n"&gt;SpikeMonitor&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;smon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SpikeMonitor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;neurons_e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;spikes.ras&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;VoltageMonitor&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;vmon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;VoltageMonitor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;neurons_e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;voltages.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/* Run the simulation */&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;81&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The program outputs two files - a ras file with spike times in it that one can use to calculate the firing rate of the neuron; and a voltages file if you'd like to plot the membrane potential too. More information on these can be found in the &lt;a class="reference external" href="https://fzenke.net/auryn/doku.php?id=start"&gt;Auryn documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I maintain &lt;a class="reference external" href="https://github.com/sanjayankur31/auryn/tree/autotoolize"&gt;an autotoolised version&lt;/a&gt; of Auryn that you can use. I track the development branch there, though, so if you do find bugs, please report them upstream.&lt;/p&gt;
&lt;p&gt;I'm looking into AdEx in quite a bit of detail at the moment. I'll write more about it when I run more simulations and generate graphs and things that are worth sharing. Cheers!&lt;/p&gt;
</content><category term="Computational neuroscience"></category></entry><entry><title>Extracting small chunks of data from EXTREMELY LARGE files - say hello to memory mapped files</title><link href="/2015/02/20/extracting-small-chunks-of-data-from-extremely-large-files-say-hello-to-memory-mapped-files.html" rel="alternate"></link><published>2015-02-20T18:12:00+00:00</published><updated>2015-02-20T18:12:00+00:00</updated><author><name>ankur</name></author><id>tag:None,2015-02-20:/2015/02/20/extracting-small-chunks-of-data-from-extremely-large-files-say-hello-to-memory-mapped-files.html</id><summary type="html">&lt;p class="first last"&gt;Memory mapped files are brilliant when you need to extract tiny bits of data from files that are much much larger than the total memory your system has.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="the-story-so-far"&gt;
&lt;h2&gt;The story so far ...&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Beware - lots of PhDcomics links in the text!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The first post on my research blog, finally - wait! I mean &amp;quot;Hello
World&amp;quot;!&lt;/p&gt;
&lt;p&gt;Research is going really well - &lt;a class="reference external" href="http://phdcomics.com/comics.php"&gt;the supervisors seem happy&lt;/a&gt; and I
haven't considered &lt;a class="reference external" href="http://www.phdcomics.com/comics/archive.php?comicid=1495"&gt;killing myself out of frustration yet&lt;/a&gt; or even
worse - &lt;a class="reference external" href="http://www.phdcomics.com/comics/archive.php?comicid=1490"&gt;I haven't once wondered if a research career was a mistake to
take up&lt;/a&gt;. I've now been signed up as a visiting lecturer and after my
first stint with &lt;a class="reference external" href="http://www.phdcomics.com/comics/archive.php?comicid=974"&gt;marking undergraduate examination papers&lt;/a&gt;, I'm a lot
happier supervising BSc final year projects. (The marking didn't
actually go that bad - most of them scored more than 75%, and no, I'm
not a lenient marker!). I am looking forward to teaching, though - I
expect to thoroughly enjoy putting an entire class to sleep!&lt;/p&gt;
&lt;p&gt;Anyway, on to the sciency stuff!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="memory-mapped-files"&gt;
&lt;h2&gt;Memory mapped files?&lt;/h2&gt;
&lt;p&gt;Some background on how I came across &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Memory-mapped_file"&gt;memory mapped files&lt;/a&gt; before we
begin. On a typical day, I run multiple iterations of simulations. Each
of these simulations deals with about &lt;strong&gt;10,000 neurons and runs for a
total simulation time of about 8 hours&lt;/strong&gt;. I specify simulation time
because the library I use, &lt;a class="reference external" href="http://www.fzenke.net/auryn/doku.php"&gt;Auryn&lt;/a&gt;, is written in C++ and uses &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Message_Passing_Interface"&gt;MPI&lt;/a&gt;
to speed this up and reduces the actual running time to about an hour
and a half. Anyway, to cut the long story short, my simulation produces
a lot of data - generally in the order of 30Gbs - one simulation had
produced more than 200Gbs, even. This is only spike data, as explained
&lt;a class="reference external" href="http://www.fzenke.net/auryn/doku.php?id=manual:ras"&gt;here&lt;/a&gt;. I've only begun my PhD and I expect my simulations to get
longer and more complicated, which logically implies that the amount of
data that I'll have to post process will also increase accordingly.&lt;/p&gt;
&lt;p&gt;The information I usually need from my simulation data is the spike
information of individual neurons (number of spikes in a time period -
the firing rate) in between certain times - simulation snapshots, we
call them. &lt;strong&gt;So, from 30Gigs of data, I need to search, process and
actually only plot a couple of hundred MBs at the most, generally tens
of MBs or less&lt;/strong&gt;. The simplest way of doing this is - read all your data
in, find the required snapshots, extract them and move on with the post
processing. With 30Gigs of data, I could probably do this - my server
has more RAM than that, but, it'll still take the system time to read
all this data into memory. This is what I was doing a month back, though
- before I started looking for more efficient techniques. An &lt;strong&gt;R
script&lt;/strong&gt; (the supposed standard language for big data) was used for a
while - still read all the data into memory. &lt;strong&gt;Databases&lt;/strong&gt; were
considered and duly dismissed - I'm not going to save 30Gigs of data for
each simulation when I only need a few MBs. The database will anyway run
indexing operations on the data which will still make it take a while to
load the data and the data loading part was what I was really looking to
quicken.&lt;/p&gt;
&lt;p&gt;After looking around for quick disc access, I found &lt;strong&gt;memory mapped
files&lt;/strong&gt;. As the wikipedia article says, &amp;quot;&lt;strong&gt;A memory-mapped file is a
segment of virtual memory which has been assigned a direct byte-for-byte
correlation with some portion of a file or file-like resource.&lt;/strong&gt;&amp;quot; The
useful bit is where it says, &amp;quot;&lt;strong&gt;Once present, this correlation between
the file and the memory space permits applications to treat the mapped
portion as if it were primary memory.&lt;/strong&gt;&amp;quot;. So, basically, you have a
large file, but you don't need to read it into memory - you simply
&lt;strong&gt;map&lt;/strong&gt; it into memory. Once you've done that, you use &lt;strong&gt;pointer
arithmetic&lt;/strong&gt; to calculate and &lt;strong&gt;extract only the required chunks&lt;/strong&gt;.
Simple? Yes! Well, almost. Since you're going to be using pointer
arithmetic to calculate your data locations, data where each entry is of
a &lt;strong&gt;uniform size&lt;/strong&gt; is quite important. You can still do it without
uniform data, but that'll require you to use a sentinel like a &amp;quot;n&amp;quot; to
find each line and you'll have to go through the entire file anyway -
it'll just be more complicated. To use my memory mapped file method, I
first got the simulator to output data in binary format - where I could
ensure that the size of each record was the same. This is really simple
to do with a &lt;strong&gt;struct&lt;/strong&gt;, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;spikeEvent_type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="n"&gt;AurynTime&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="n"&gt;NeuronID&lt;/span&gt; &lt;span class="n"&gt;neuronID&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As long as you're running both the read and write operations on the same
machine, with the same compiler, you can be quite certain that the size
of the struct will not change between the time you write the data and
then read it from your post-processing script. Memory mapped files can
be used for a lot more, of course, but we only require multi-threaded
reads which means we don't need to use locks or mutexes or the sort to
prevent race conditions at all.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-code"&gt;
&lt;h2&gt;The code&lt;/h2&gt;
&lt;p&gt;If you've made it this far, here's your reward - the code (snippets)!&lt;/p&gt;
&lt;p&gt;I use &lt;a class="reference external" href="http://www.boost.org/doc/libs/1_50_0/libs/iostreams/doc/classes/mapped_file.html"&gt;boost's implementation of memory mapped files&lt;/a&gt;. I couldn't find
any tutorials, but a post or two gave me the idea on how to use the API.
So, you need this inclusion:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;boost/iostreams/device/mapped_file.hpp&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each MPI rank produces a separate file, so I have 16 files here, since
I use 16 ranks. Instead of sorting and merging them, I simply map them
all. A vector, therefore appears, and holds my memory mapped file
objects:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;boost&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;iostreams&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;mapped_file_source&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;raster_data_source_E&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ostringstream&lt;/span&gt; &lt;span class="n"&gt;converter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mpi&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;_ranks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;converter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;converter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;converter&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;_file&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\_e.ras&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;raster&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;_data&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;_source&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;_E&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emplace&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boost&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;iostreams&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;mapped&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;_file&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;_source&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="n"&gt;raster&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;_data&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;_source&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;_E&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;converter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we have the files mapped. Let's say my files have data from 0 to
3600 seconds. I need to count the firing rate of my neurons at 2000
seconds. So, I need to get chunks from my 16 files that contain data
from 1999 to 2000 seconds. If you've studied computer science at all,
you should've had a &amp;quot;&lt;strong&gt;BINARY SEARCH&lt;/strong&gt;&amp;quot; neon light light up in your
head at this point. I used something similar - &lt;strong&gt;upper and lower
bounds&lt;/strong&gt;. Luckily, their algorithms, along with pseudo code are
documented
&lt;a class="reference external" href="http://www.cplusplus.com/reference/algorithm/upper_bound/"&gt;here&lt;/a&gt; and
&lt;a class="reference external" href="http://www.cplusplus.com/reference/algorithm/lower_bound/"&gt;here&lt;/a&gt;
respectively.&lt;/p&gt;
&lt;p&gt;My implementations look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * ===  FUNCTION  ======================================================================&lt;/span&gt;
&lt;span class="cm"&gt; *         Name:  binary_upper_bound&lt;/span&gt;
&lt;span class="cm"&gt; *  Description:  Last occurence of a key using binary search&lt;/span&gt;
&lt;span class="cm"&gt; * =====================================================================================&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;binary_upper_bound&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;timeToCompare&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;boost&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;iostreams&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;mapped_file_source&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;openMapSource&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;spikesStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;numStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;numEnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;currentSpike&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;numCurrent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;numdiff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sizeofstruct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;spikeEvent_type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;spikeEvent_type&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;currentRecord&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/*  start of last record */&lt;/span&gt;
    &lt;span class="n"&gt;spikesStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;openMapSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;numStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/*  end of last record */&lt;/span&gt;
    &lt;span class="n"&gt;numEnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openMapSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sizeofstruct&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/*  Number of structs */&lt;/span&gt;

    &lt;span class="n"&gt;numdiff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numEnd&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;numStart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef DEBUG&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Finding last of &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;timeToCompare&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sizediff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;spikesEnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;spikesEnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spikesStart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;openMapSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;sizeofstruct&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;sizediff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spikesEnd&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;spikesStart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Struct size is: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;sizeofstruct&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Char size is: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;size of int is: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Number of records in this file: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openMapSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;sizeofstruct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sizeofstruct&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Number of records in this file: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spikesEnd&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;spikesStart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sizeofstruct&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;With printf subtraction %zun&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="n"&gt;spikesEnd&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;spikesStart&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Proper subtraction : &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spikesEnd&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;spikesStart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;sizediff : &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;sizediff&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;With printf sizediff %zun&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sizediff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;multiplier &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spikesEnd&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;spikesStart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sizediff&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Number of struct records in this file: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;numdiff&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;numCurrent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numStart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numdiff&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;numCurrent&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;currentSpike&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spikesStart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;numCurrent&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sizeofstruct&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;currentRecord&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;spikeEvent_type&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;currentSpike&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef DEBUG&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Current record is: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;t&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;neuronID&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; at line&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;numCurrent&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeToCompare&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;numStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;numCurrent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;numdiff&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="n"&gt;numdiff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;currentSpike&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spikesStart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numStart&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sizeofstruct&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;currentRecord&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;spikeEvent_type&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;currentSpike&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef DEBUG&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Returning: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;t&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;neuronID&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;currentSpike&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;       &lt;span class="cm"&gt;/* -----  end of function binary_upper_bound  ----- */&lt;/span&gt;

&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * ===  FUNCTION  ======================================================================&lt;/span&gt;
&lt;span class="cm"&gt; *         Name:  binary_lower_bound&lt;/span&gt;
&lt;span class="cm"&gt; *  Description:  First occurence of a key using binary search&lt;/span&gt;
&lt;span class="cm"&gt; * =====================================================================================&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;binary_lower_bound&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;timeToCompare&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;boost&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;iostreams&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;mapped_file_source&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;openMapSource&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;spikesStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;numStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;numEnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;currentSpike&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;numCurrent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;numdiff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sizeofstruct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;spikeEvent_type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;spikeEvent_type&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;currentRecord&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/*  start of last record */&lt;/span&gt;
    &lt;span class="n"&gt;spikesStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;openMapSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;numStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/*  end of last record */&lt;/span&gt;
    &lt;span class="n"&gt;numEnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openMapSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sizeofstruct&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/*  Number of structs */&lt;/span&gt;
    &lt;span class="n"&gt;numdiff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numEnd&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;numStart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cp"&gt;#ifdef DEBUG&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Finding first of &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;timeToCompare&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sizediff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;spikesEnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;spikesEnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spikesStart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;openMapSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;sizeofstruct&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;sizediff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spikesEnd&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;spikesStart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Struct size is: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;sizeofstruct&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Char size is: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;size of int is: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Number of records in this file: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openMapSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;sizeofstruct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sizeofstruct&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Number of records in this file: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spikesEnd&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;spikesStart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sizeofstruct&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;With printf subtraction %zun&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="n"&gt;spikesEnd&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;spikesStart&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Proper subtraction : &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spikesEnd&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;spikesStart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;sizediff : &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;sizediff&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;With printf sizediff %zun&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sizediff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;multiplier &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spikesEnd&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;spikesStart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sizediff&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Number of struct records in this file: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;numdiff&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;numCurrent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numStart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numdiff&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;numCurrent&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;currentSpike&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spikesStart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;numCurrent&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sizeofstruct&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;currentRecord&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;spikeEvent_type&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;currentSpike&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef DEBUG&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Current record is: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;t&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;neuronID&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; at line&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;numCurrent&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;timeToCompare&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;numStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;numCurrent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;numdiff&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="n"&gt;numdiff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;currentSpike&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spikesStart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numStart&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sizeofstruct&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;currentRecord&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;spikeEvent_type&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;currentSpike&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef DEBUG&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Returning: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;t&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;neuronID&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;currentSpike&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;       &lt;span class="cm"&gt;/* -----  end of function binary_lower_bound  ----- */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The rest is quite simple, really. I ask a thread to go over all my 16
memory mapped files, find the chunks and store it in a vector. This is
then sorted and the frequency of occurrence of each neuron counted -
which is the firing rate. It looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*  Fill up my vectors with neurons that fired in this period */&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;chunkit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chunk_start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chunkit&lt;/span&gt; &lt;span class="n"&gt;neuronID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;chunkit&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;spikeEvent_type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;timeToFly&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; not found in E file &amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;chunkit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chunk_start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chunkit&lt;/span&gt; &lt;span class="n"&gt;neuronID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;chunkit&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;spikeEvent_type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;timeToFly&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; not found in I file &amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;!n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/*  Sort - makes next operations more efficient, or I think it does */&lt;/span&gt;
&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;neuronsE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;neuronsE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;neuronsI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;neuronsI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="cm"&gt;/*  Get frequencies of inhibitory neurons */&lt;/span&gt;
&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="n"&gt;search_begin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;neuronsI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NI&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;upper_bound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_begin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;neuronsI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;neuronsI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;upper_bound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_begin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;neuronsI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;search_begin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;search_begin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;upper_bound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_begin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;neuronsI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;neuronsI_rate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emplace_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/*  We have the inhibitory firing rate! */&lt;/span&gt;

&lt;span class="cm"&gt;/* Get frequencies of excitatory neurons */&lt;/span&gt;
&lt;span class="n"&gt;search_begin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;neuronsE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;upper_bound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_begin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;neuronsE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;neuronsE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;upper_bound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_begin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;neuronsE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;search_begin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;search_begin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;upper_bound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_begin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;neuronsE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;neuronsE_rate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emplace_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The main method where I call my many threads would look something like
this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* To see how long it takes, which I forgot to save to add to the post */&lt;/span&gt;
&lt;span class="n"&gt;clock_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;task_counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cm"&gt;/* graphing_times holds the times at which I need to extract chunks */&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;const_iterator&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;graphing_times&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;graphing_times&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;extracted_data_temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/*  Only start a new thread if less than thread_max threads are running */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task_counter&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;doctors_max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/* Just a vector that keeps the currently running threads */&lt;/span&gt;
        &lt;span class="n"&gt;timeLords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emplace_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="kr"&gt;thread&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tardis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raster_data_source_E&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raster_data_source_I&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recalls&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="cm"&gt;/* I called my main worker method tardis - always good to make your code fun - there may be a dalek somewhere in my file too ;) */&lt;/span&gt;
        &lt;span class="n"&gt;task_counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="cm"&gt;/* Original comment from the source file below */&lt;/span&gt;
    &lt;span class="cm"&gt;/*  If thread_max threads are running, wait for them to finish before&lt;/span&gt;
&lt;span class="cm"&gt;     *  starting a second round.&lt;/span&gt;
&lt;span class="cm"&gt;     *&lt;/span&gt;
&lt;span class="cm"&gt;     *  Yes, this can be optimised by using a thread pool but I really&lt;/span&gt;
&lt;span class="cm"&gt;     *  don&amp;#39;t have the patience to look into ThreadPool or a&lt;/span&gt;
&lt;span class="cm"&gt;     *  boost::thread_group today!&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="kr"&gt;thread&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nl"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;timeLords&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;joinable&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;task_counter&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;timeLords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/*  Wait for remaining threads to finish */&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="kr"&gt;thread&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nl"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;timeLords&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;joinable&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;timeLords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;clock_end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I'm not using a threadpool since the C++ standard doesn't provide one,
and quite frankly, since I'm only making my threads read, I didn't need
an implementation with mutexes and locks. I just use a certain number of
threads at a time and wait for them to finish before starting the next
batch.&lt;/p&gt;
&lt;p&gt;The last time I ran my post processing script without memory mapped
files, it took my system quite a while just to load the files. Once the
files were loaded into memory, the processing bit was quite quick,
obviously. However, with memory mapped files, I recently pulled out
4000+ chunks (I had a total of 11000+ graphs generated, so yeah, 4000+
chunks) in a tiny 230seconds. I'll try and benchmark it again when I run
it next and provide &amp;quot;official&amp;quot; figures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Well, in conclusion, memory mapped files are awesome - spend some time
on them if you're processing large amounts of structured information -
you'll take some time to learn how to use them, but your code will scale
as your data gets larger and larger.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Programming"></category><category term="Computational neuroscience"></category></entry><entry><title>Released the code I wrote for my masters research</title><link href="/2014/06/25/released-the-code-i-wrote-for-my-masters-research.html" rel="alternate"></link><published>2014-06-25T08:38:00+01:00</published><updated>2014-06-25T08:38:00+01:00</updated><author><name>ankur</name></author><id>tag:None,2014-06-25:/2014/06/25/released-the-code-i-wrote-for-my-masters-research.html</id><summary type="html">&lt;p class="first last"&gt;The code I wrote for my masters research is now available on my Github account.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;In this week's research group meeting, I asked my supervisor if I could
finally release the source code that I'd written during my masters for
my thesis. Generally, research code is kept private until the papers
related to it have been published. Since both my papers have been
accepted at conferences coming up in the near future, my supervisor said
it was OK to finally turn the code public. I haven't picked a license
for it yet - all I've requested is that my papers be cited. The data
bags that I'd used to generate my results are too big to upload -
sometimes a couple of Gigs, so I haven't been able to upload them.&lt;/p&gt;
&lt;p&gt;The code can be found here: &lt;a class="reference external" href="https://github.com/sanjayankur31/bionav"&gt;https://github.com/sanjayankur31/bionav&lt;/a&gt;. I
generated doxygen documents for my code too. This can be found here:
&lt;a class="reference external" href="http://ankursinha.in/files/research/bionav-doc/index.html"&gt;http://ankursinha.in/files/research/bionav-doc/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The code is a ROS implementation of head direction and grid cells, as
the papers document. I'd begun implementing place cells, but I ran out
of time in my master's course.&lt;/p&gt;
&lt;p&gt;More on my research here: &lt;a class="reference external" href="http://ankursinha.in/wp/research/"&gt;http://ankursinha.in/wp/research/&lt;/a&gt;&lt;/p&gt;
</content><category term="Computational neuroscience"></category><category term="Robotics"></category></entry><entry><title>Hello research world!</title><link href="/2013/10/03/hello-research-world-3.html" rel="alternate"></link><published>2013-10-03T15:57:00+01:00</published><updated>2013-10-03T15:57:00+01:00</updated><author><name>ankur</name></author><id>tag:None,2013-10-03:/2013/10/03/hello-research-world-3.html</id><summary type="html">&lt;p&gt;It's been just about a year since I started my research career as a
masters student here at the University of Technology, Sydney. I'm
working on bio-mimetic navigation for this course, focussed around
computational modelling of head direction cells. This post is a
traditional &amp;quot;Hello world!&amp;quot; post and documents my …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's been just about a year since I started my research career as a
masters student here at the University of Technology, Sydney. I'm
working on bio-mimetic navigation for this course, focussed around
computational modelling of head direction cells. This post is a
traditional &amp;quot;Hello world!&amp;quot; post and documents my work in general.&lt;/p&gt;
&lt;p&gt;As expected, a research course is completely different from any other.
Firstly, I have no classes to attend, no assignments to work on, no
exams to study for.&lt;strong&gt;This doesn't imply that I haven't any work&lt;/strong&gt;. A
year into my course, I think a structured coursework degree is much
easier to negotiate than a self structured research degree. For
instance, in a coursework degree, you know exactly what to study, you
have a fixed schedule to follow, you know exactly how you'll be graded.
In a research degree, however, you need to find your own material to
study, you need to plan your own schedule, you need to have results that
you think will get you a good grade. While students run off on holiday
after their exams, I still go back to work every day! The most difficult
part, perhaps, is the amount of self discipline that you need to
possess. I regularly struggle with this: waking up early, following a
fixed schedule, sleeping on time, following my day plan; aren't really
easy to carry out when you don't have deadlines to scare/motivate you.
As a result, I spend quite a lot of time in introspection (refer to my
&lt;a class="reference external" href="http://ankursinha.in/blog/2013/06/23/fedora-and-journal-writing.html"&gt;post on journal writing&lt;/a&gt;).&lt;/p&gt;
&lt;div class="section" id="an-introduction-to-my-research"&gt;
&lt;h2&gt;An introduction to my research&lt;/h2&gt;
&lt;p&gt;I work in an area called &amp;quot;&lt;strong&gt;bio-mimetic navigation&lt;/strong&gt;&amp;quot;. As the name
suggests, it's simply about mimicking the various navigational systems
found in nature, and if possible applying them to robotics. Modelling
biological navigation can be done at different levels, though. I work on
a neuronal level with &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Head_direction_cells"&gt;**head direction cells**&lt;/a&gt;. These are specific
neurons that have been discovered in the rat hippocampus that maintain
information about the rat's heading. Of course, I can't go into the
details of the system that have been discovered over the three decades
of research here. The wikipedia page is a good place to start for any
one interested.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-bio-mimetic-navigation"&gt;
&lt;h2&gt;Why bio-mimetic navigation?&lt;/h2&gt;
&lt;p&gt;When I started off with my course, my research topic was much broader:
&amp;quot;mobile robot navigation in a dynamic environment&amp;quot;. It was designed to
be broad enough to give me the opportunity to review literature and
decide for a focus area by myself. Like everyone, I began with classical
robotics. I read on &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Simultaneous_localization_and_mapping"&gt;SLAM&lt;/a&gt;, &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Inertial_navigation_system"&gt;inertial navigation&lt;/a&gt;, sensor fusion and
learnt quite a bit about the navigation systems that robots utilize, the
concepts that make up these systems. A few weeks into my literature
review though, I tried to compare these methods to the way I navigate
personally. I found that I hardly used any of the classical robotic
techniques. &amp;quot;Why then, should robots use them?&amp;quot;, I wondered. Curious, I
began reading on animal navigation, and ran into bio-mimetic navigation.
I learnt how animal navigation is very very different from classical
robotic navigation techniques. I now belong to a school of researchers
that are interested in developing navigation techniques from nature, and
in comparing these with classical robotic techniques. I'm very new to
the field though, but after this two year masters course, and a Ph.D. to
follow, I hope to be right in the thick of things.&lt;/p&gt;
&lt;p&gt;My work with head direction cells makes my research multidisciplinary. I
need to know a little about neuroscience, along with my computer science
basics. Since I'm a computer science graduate, my knowledge of
neuroscience isn't as good as I'd like it to be, but it's getting better
every week.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="status"&gt;
&lt;h2&gt;Status&lt;/h2&gt;
&lt;p&gt;The goal attached to my masters course is to prepare me for a Ph.D.
degree. While I did know that I wanted to work with robotic navigation,
with neural networks, an undergraduate degree didn't give me enough
depth of knowledge to make an informed decision on the exact research
problem that I wanted to work on. The masters course, therefore, gives
me much needed time to read my literature, decide my stream and develop
skills for a career in research. While my masters plan is closely
aligned to my goal, I'm also going to try and make some contribution to
the field, however small. (It's always good to have a few articles
published when you're a new researcher looking for opportunities to
grab.)&lt;/p&gt;
&lt;p&gt;At present, I've read many *many* papers on head direction cells and
their modelling. I'm currently working on extending one of these models,
my contribution to the field. I was recently assessed, and my assessors
decided my work was good, and that I could carry on my course here for
the remainder of the course. If you're interested, you can read view my
assessment presentation and my report &lt;a class="reference external" href="http://ankursinha.in/files/research/"&gt;here&lt;/a&gt;. My assessment report
contains quite a comprehensive literature review. The reference list
will be quite helpful to people interested in the field. (If you do pick
any thing from my report, please do cite it).&lt;/p&gt;
&lt;p&gt;I'm now engaged in making some contribution to the field. I'll post
again when there's something worth reporting. Cheers!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Computational neuroscience"></category></entry><entry><title>Extracting raw data from ros topics</title><link href="/2013/04/07/extracting-raw-data-from-ros-topics.html" rel="alternate"></link><published>2013-04-07T15:22:00+01:00</published><updated>2013-04-07T15:22:00+01:00</updated><author><name>ankur</name></author><id>tag:None,2013-04-07:/2013/04/07/extracting-raw-data-from-ros-topics.html</id><summary type="html">&lt;p&gt;Recently, I needed to extract raw data that we had collected from the
&lt;a class="reference external" href="http://www.willowgarage.com/pages/pr2/overview"&gt;PR2&lt;/a&gt; robot. It's easy to collect data from &lt;a class="reference external" href="http://www.ros.org/wiki/Topics"&gt;topics&lt;/a&gt;, using the
&lt;a class="reference external" href="http://www.ros.org/wiki/rosbag"&gt;rosbag&lt;/a&gt; tool. You can collect data from multiple topics in one bag at
a time.&lt;/p&gt;
&lt;p&gt;Here's an example command that collects data from the robot:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
rosbag …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;Recently, I needed to extract raw data that we had collected from the
&lt;a class="reference external" href="http://www.willowgarage.com/pages/pr2/overview"&gt;PR2&lt;/a&gt; robot. It's easy to collect data from &lt;a class="reference external" href="http://www.ros.org/wiki/Topics"&gt;topics&lt;/a&gt;, using the
&lt;a class="reference external" href="http://www.ros.org/wiki/rosbag"&gt;rosbag&lt;/a&gt; tool. You can collect data from multiple topics in one bag at
a time.&lt;/p&gt;
&lt;p&gt;Here's an example command that collects data from the robot:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
rosbag record -b 1024 &amp;quot;/joint_states&amp;quot; -e &amp;quot;(/.*)_scan$&amp;quot; &amp;quot;torso_lift_imu/data&amp;quot; &amp;quot;/base_odometry/odom&amp;quot; &amp;quot;/camera/rgb/image_rect_color&amp;quot; &amp;quot;/camera/depth_registered/image_rect&amp;quot; --duration=1m --split -O /removable/recordings/20130403_1218_navtest_data.bag
&lt;/pre&gt;
&lt;p&gt;The rosbag then looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[ankur&amp;#64;localhost  bag-test]$ rosbag info 20130403_1218_navtest_data_0.bag
path:        20130403_1218_navtest_data_0.bag
version:     2.0
duration:    58.8s
start:       Apr 03 2013 15:40:18.91 (1364964018.91)
end:         Apr 03 2013 15:41:17.68 (1364964077.68)
size:        3.3 GB
messages:    17035
compression: none [3295/3295 chunks]
types:       nav_msgs/Odometry      [cd5e73d190d741a2f92e81eda573aca7]
             sensor_msgs/Image      [060021388200f6f0f447d0fcd9c64743]
             sensor_msgs/JointState [3066dcd76a6cfaef579bd0f34173e9fd]
             sensor_msgs/LaserScan  [90c7ef2dc6895d81024acba2ac42f369]
topics:      /base_odometry/odom                   5516 msgs    : nav_msgs/Odometry
             /base_scan                            1176 msgs    : sensor_msgs/LaserScan
             /camera/depth_registered/image_rect   1640 msgs    : sensor_msgs/Image
             /camera/rgb/image_rect_color          1653 msgs    : sensor_msgs/Image
             /joint_states                         5875 msgs    : sensor_msgs/JointState
             /tilt_scan                            1175 msgs    : sensor_msgs/LaserScan
[ankur&amp;#64;localhost  bag-test]$
&lt;/pre&gt;
&lt;p&gt;You can also filter out individual topics into individual bags with the
tool:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[ankur&amp;#64;localhost  bag-test]$ rosbag filter --help
Usage: rosbag filter [options] INBAG OUTBAG EXPRESSION

EXPRESSION can be any Python-legal expression.

The following variables are available:
 * topic: name of topic
 * m: message
 * t: time of message (t.secs, t.nsecs)

Filter the contents of the bag.

Options:
  -h, --help            show this help message and exit
  -p PRINT-EXPRESSION, --print=PRINT-EXPRESSION
                        Python expression to print for verbose debugging. Uses
                        same variables as filter-expression
[ankur&amp;#64;localhost  bag-test]$
&lt;/pre&gt;
&lt;p&gt;Various other tools are available to visualize the data. With &lt;a class="reference external" href="http://www.ros.org/wiki/groovy/"&gt;groovy&lt;/a&gt;,
you have &lt;a class="reference external" href="http://ros.org/wiki/rqt_bag"&gt;rqt_bag&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since I needed the raw messages, I had to hack up a python script using
the &lt;a class="reference external" href="http://www.ros.org/wiki/rosbag/Code%20API#py_api"&gt;rosbag API&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#!/usr/bin/python

# Copyright 2010 Ankur Sinha
# Author: Ankur Sinha
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.
#
# File : extractRawInfo.py
#

import rosbag
import sys
import os
import pickle

# Global variable for input file name

def run():
    &amp;quot;&amp;quot;&amp;quot;
    Main run method. Calls other helper methods to get work done
    &amp;quot;&amp;quot;&amp;quot;

    if len(sys.argv) != 2:
        sys.stderr.write('[ERROR] This script only takes input bag file as argument.n')
    else:
        inputFileName = sys.argv[1]
        print &amp;quot;[OK] Found bag: %s&amp;quot; % inputFileName

        bag = rosbag.Bag(inputFileName)
        topicList = readBagTopicList(bag)

        while True:
            if len(topicList) == 0:
                print &amp;quot;No topics in list. Exiting&amp;quot;
                break
            selection  = menu(topicList)

            if selection == -92:
                print &amp;quot;[OK] Printing them all&amp;quot;
                for topic in topicList:
                    extract_data(bag, topic, inputFileName)
                break
            elif selection == -45:
                break
            else:
                topic = topicList[selection]
                extract_data(bag, topic, inputFileName)
                topicList.remove(topicList[selection])

        bag.close()

def extract_data (bag, topic, inputFileName):
    &amp;quot;&amp;quot;&amp;quot;
    Spew messages to a file

    args:
        topic -&amp;gt; topic to extract and print to txt file
    &amp;quot;&amp;quot;&amp;quot;

    outputFileName = os.path.splitext(os.path.split(inputFileName)[1])[0] + topic.replace(&amp;quot;/&amp;quot;,&amp;quot;-&amp;quot;) + &amp;quot;.txt&amp;quot;
    print &amp;quot;[OK] Printing %s&amp;quot; % topic
    print &amp;quot;[OK] Output file will be called %s.&amp;quot; % outputFileName

    outputFh = open(outputFileName, &amp;quot;w&amp;quot;)

    for topic, msg, t in bag.read_messages(topics=topic):
        pickle.dump(msg,outputFh)

    outputFh.close()
    print &amp;quot;[OK] DONE&amp;quot;

def menu (topicList):
    &amp;quot;&amp;quot;&amp;quot;
    Print the user menu and take input

    args:
        topicList: tuple containing list of topics

    returns:
        selection: user selection as integer
    &amp;quot;&amp;quot;&amp;quot;

    i = 0
    for topic in topicList:
        print '[{0}] {1}'.format(i, topic)
        i = i+1
    if len(topicList) &amp;gt; 1:
        print '[{0}] Extract all'.format(len(topicList))
        print '[{0}] Exit'.format(len(topicList) + 1)
    else:
        print '[{0}] Exit'.format(len(topicList))

    while True:
        print 'Enter a topic number to extract raw data from:'
        selection = raw_input('&amp;gt;&amp;gt;&amp;gt;')
        if int(selection) == len(topicList):
            return -92 # print all
        elif int(selection) == (len(topicList) +1):
            return -45 # exit
        elif (int(selection) &amp;lt; len(topicList)) and (int(selection) &amp;gt;= 0):
            return int(selection)
        else:
            print &amp;quot;[ERROR] Invalid input&amp;quot;

def readBagTopicList(bag):
    &amp;quot;&amp;quot;&amp;quot;
    Read and save the initial topic list from bag
    &amp;quot;&amp;quot;&amp;quot;
    print &amp;quot;[OK] Reading topics in this bag. Can take a while..&amp;quot;
    topicList = []
    for topic, msg, t in bag.read_messages():
        if topicList.count(topic) == 0:
            topicList.append (topic)

    print '{0} topics found:'.format(len(topicList))
    return topicList

if __name__ == &amp;quot;__main__&amp;quot;:
    run()
&lt;/pre&gt;
&lt;p&gt;I've &lt;a class="reference external" href="https://github.com/sanjayankur31/ros-work/blob/master/helper-scripts/extractRawInfo.py"&gt;hosted it on my github repository&lt;/a&gt;. It'll be easier to
read/download it from there if you need to.&lt;/p&gt;
</content><category term="Robotics"></category></entry></feed>