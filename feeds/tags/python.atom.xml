<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>ankursinha.in/blog - Python</title><link href="http://ankursinha.in/" rel="alternate"></link><link href="http://ankursinha.in/feeds/tags/python.atom.xml" rel="self"></link><id>http://ankursinha.in/</id><updated>2018-10-06T00:19:32+01:00</updated><entry><title>NeuroFedora: towards a ready to use Free/Open source environment for neuroscientists</title><link href="http://ankursinha.in/2018/10/06/neurofedora-towards-a-read-to-use-free-open-source-environment-for-neuroscientists.html" rel="alternate"></link><published>2018-10-06T00:19:32+01:00</published><updated>2018-10-06T00:19:32+01:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2018-10-06:/2018/10/06/neurofedora-towards-a-read-to-use-free-open-source-environment-for-neuroscientists.html</id><summary type="html">&lt;p class="first last"&gt;I have recently resurrected the &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora SIG&lt;/a&gt;. We aim to make
&lt;a class="reference external" href="https://getfedora.org"&gt;Fedora&lt;/a&gt; a ready to use platform for neuroscientists, so that they can
focus on the science. Read on to learn more!&lt;/p&gt;
</summary><content type="html">&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="http://ankursinha.in/images/20181005-NeuroFedoraLogo01.png"&gt;&lt;img alt="NeuroFedora logo!" class="text-center img-responsive pagination-centered" src="http://ankursinha.in/images/20181005-NeuroFedoraLogo01.png" style="width: 30%;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;a class="reference external" href="https://pagure.io/design/issue/602"&gt;NeuroFedora logo by Terezahl from the Fedora Design Team&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I've recently resurrected the &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora SIG&lt;/a&gt;. Many thanks to &lt;a class="reference external" href="https://fedoraproject.org/wiki/User:Ignatenkobrain"&gt;Igor&lt;/a&gt; and the others who had
worked on it in the past and have given us a firm base to build on.&lt;/p&gt;
&lt;div class="section" id="the-goal"&gt;
&lt;h2&gt;The goal&lt;/h2&gt;
&lt;p&gt;The (current) goal of the &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora SIG&lt;/a&gt; is to make Fedora an easy to use
platform for neuroscientists. We aim to do this by making commonly used
Neuroscience software easily installable on a &lt;a class="reference external" href="https://getfedora.org"&gt;Fedora&lt;/a&gt; system.&lt;/p&gt;
&lt;p&gt;Neuroscience is an extremely multidisciplinary field. It brings together
mathematicians, chemists, biologists, physicists, psychologists, engineers
(electrical and others), computer scientists and more. A lot of software is used
nowadays in Neuroscience for:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;data collection, analysis, and sharing&lt;/li&gt;
&lt;li&gt;lots of image processing (a lot of ML is used here, think Data Science)&lt;/li&gt;
&lt;li&gt;simulation of brain networks (&lt;a class="reference external" href="https://neuron.yale.edu/neuron/"&gt;NEURON&lt;/a&gt;, &lt;a class="reference external" href="https://nest-simulator.org"&gt;Nest&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/BhallaLab/moose"&gt;Moose&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/NeuralEnsemble/PyNN"&gt;PyNN&lt;/a&gt;, &lt;a class="reference external" href="http://briansimulator.org/"&gt;Brian&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;dissemination of scientific results (peer reviewed and otherwise, think
&lt;a class="reference external" href="http://tug.org/"&gt;LaTeX&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given that a large proportion of neuroscientists are not trained in
computer science, a lot of time and effort is spent setting up systems,
installing software (often building whole &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Dependency_hell"&gt;dependency chains&lt;/a&gt; from source). This can be
hard for people not well-versed in build systems and so on.&lt;/p&gt;
&lt;p&gt;So, at &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora&lt;/a&gt;, we will provide a ready to use &lt;a class="reference external" href="https://getfedora.org"&gt;Fedora&lt;/a&gt; based system for
neuroscientists to work with, so they can quickly get their environment set up
and work on the science.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-fedora"&gt;
&lt;h2&gt;Why Fedora?&lt;/h2&gt;
&lt;p&gt;For one, I have been a &lt;a class="reference external" href="https://fedoraproject.org/wiki/User:Ankursinha"&gt;contributor&lt;/a&gt; for a while and know the
&lt;a class="reference external" href="https://apps.fedoraproject.org/"&gt;community and the infrastructure&lt;/a&gt; quite
well. That applies to me and others from the &lt;a class="reference external" href="https://getfedora.org"&gt;Fedora&lt;/a&gt; community that may work on
this and not the research community in general.&lt;/p&gt;
&lt;p&gt;Technically, there are many advantages of using &lt;a class="reference external" href="https://getfedora.org"&gt;Fedora&lt;/a&gt; as a base.
Fedora is closely linked to the &lt;a class="reference external" href="https://www.redhat.com/en/technologies/linux-platforms/enterprise-linux"&gt;Red Hat Enterprise Linux&lt;/a&gt;
eco system---which &lt;a class="reference external" href="https://www.centos.org/"&gt;Cent OS&lt;/a&gt; is a part of and
&lt;a class="reference external" href="https://www.scientificlinux.org/about/"&gt;Scientific Linux is&lt;/a&gt; is based on
too (Recently, &lt;a class="reference external" href="https://coreos.com/"&gt;CoreOS also joined the Red Hat family&lt;/a&gt;). RPM based systems are commonly deployed in
supercomputers and clusters. So, making this software available on &lt;a class="reference external" href="https://getfedora.org"&gt;Fedora&lt;/a&gt; also
makes it simpler to make it available on these systems.  Additionally, the
&lt;a class="reference external" href="https://getfedora.org"&gt;Fedora&lt;/a&gt; community is promoting &lt;a class="reference external" href="https://flatpak.org/"&gt;Flatpaks&lt;/a&gt;, and working to permit multiple
versions of software via the &lt;a class="reference external" href="https://docs.fedoraproject.org/en-US/modularity/"&gt;modularity&lt;/a&gt; system. &lt;a class="reference external" href="https://getfedora.org"&gt;Fedora&lt;/a&gt; also supports &lt;a class="reference external" href="https://www.docker.com/"&gt;Docker&lt;/a&gt;
very &lt;a class="reference external" href="https://fedoraproject.org/wiki/Docker"&gt;well&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="join-us"&gt;
&lt;h2&gt;Join us!&lt;/h2&gt;
&lt;p&gt;Packaging software is only &lt;em&gt;one&lt;/em&gt; way in which one can contribute.  Writing docs
and answering questions about the software in &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora&lt;/a&gt; are other ways too,
for example.  If you are interested in neuroscience and in promoting &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Open_science"&gt;Open
Science&lt;/a&gt;, please consider
joining the SIG. You can get in touch with us via one of our many
&lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora#Communication_and_getting_help"&gt;communication channels&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This invitation extends to all--undergraduates, post-graduates, trainee
researchers (PhD candidates like me), professional researchers, hobbyists, and
everyone else.  If you work in the field already, it is a great way of
supporting the research community. For others, it is a great place to
learn about neuroscience, and  &lt;a class="reference external" href="https://www.fsf.org/blogs/community/user-liberation-watch-and-share-our-new-video"&gt;Free Software&lt;/a&gt;
and the various technical skills that go into developing software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="current-status"&gt;
&lt;h2&gt;Current status&lt;/h2&gt;
&lt;p&gt;We track the software we are working on &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora/PackageSet"&gt;here&lt;/a&gt;. A lot of
software is now ready to use in Fedora. This includes various Python libraries
and simulators such as &lt;a class="reference external" href="https://nest-simulator.org"&gt;Nest&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/BhallaLab/moose"&gt;Moose&lt;/a&gt;. &lt;a class="reference external" href="https://neuron.yale.edu/neuron/"&gt;Neuron&lt;/a&gt;, &lt;a class="reference external" href="http://briansimulator.org/"&gt;Brian&lt;/a&gt;, and &lt;a class="reference external" href="https://github.com/NeuralEnsemble/PyNN"&gt;PyNN&lt;/a&gt; are all in
the pipeline. All of &lt;a class="reference external" href="http://tug.org/texlive/"&gt;TeX Live&lt;/a&gt; is also available in
&lt;a class="reference external" href="https://getfedora.org"&gt;Fedora&lt;/a&gt;. If there is other Free/Open source software that you use which isn't
on our list, please let us know.  If you can help maintain it with us, that'll
be even better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fedora-free-software-and-science"&gt;
&lt;h2&gt;Fedora/Free software and Science&lt;/h2&gt;
&lt;p&gt;Open science shares the &lt;a class="reference external" href="https://www.gnu.org/philosophy/"&gt;philosophy of FOSS&lt;/a&gt;. The data, the tools, the results, should
be accessible to all to understand, use, learn from, and develop. More and more
researchers are making it a point to keep Science as open as possible whether
it is to do with the &lt;a class="reference external" href="http://opensourceforneuroscience.org/"&gt;tools&lt;/a&gt; or
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Open_access"&gt;dissemination&lt;/a&gt; of their
findings. &lt;a class="reference external" href="https://fedoraproject.org/wiki/SIGs/NeuroFedora"&gt;NeuroFedora&lt;/a&gt; hopes to aid this movement. Come, join us!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Community"></category><category term="Computational neuroscience"></category><category term="Fedora"></category><category term="Free software"></category><category term="Linux"></category><category term="NEST"></category><category term="Neuron"></category><category term="Numpy"></category><category term="Pandas"></category><category term="Planet"></category><category term="Python"></category><category term="Reproducible research"></category><category term="Sumatra"></category><category term="TeX"></category></entry><entry><title>Testing out Sumatra: a tool for managing iterations of simulations/analyses</title><link href="http://ankursinha.in/2018/05/12/testing-out-sumatra-a-tool-for-managing-iterations-of-simulations-analyses.html" rel="alternate"></link><published>2018-05-12T20:53:25+01:00</published><updated>2018-05-12T20:53:25+01:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2018-05-12:/2018/05/12/testing-out-sumatra-a-tool-for-managing-iterations-of-simulations-analyses.html</id><summary type="html">&lt;p class="first last"&gt;When working on projects that require multiple iterations of
simulations and/or analyses, it's really quite hard to keep track of
the changes one makes and how the results vary. &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt; is a tool
that is developed to help researchers manage such projects.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;In the ~4 years that I've spent on my PhD now, I've run hundreds, nay,
thousands of simulations. Research work is incredibly iterative. I (and I
assume others too) make small changes to their methods and then study how these
changes produce different results, and this cycle continues until a
proposed hypothesis has either been accepted or refuted (or a completely new
insight gained, which happens quite often too!).&lt;/p&gt;
&lt;div class="section" id="folders-and-dropbox-please-no"&gt;
&lt;h2&gt;Folders, and Dropbox? Please, no.&lt;/h2&gt;
&lt;p&gt;Keeping track of all these iterations is quite a task. I've seen multiple
methods that people use to do this. A popular method is to make a different
folder for each different version of code, and then use something like Dropbox
to store them all.&lt;/p&gt;
&lt;p&gt;Since I come from a computing background, I firmly believe that this is not a
good way of going about it. It may work for folks---people I know and work with
use this method---but it is simply a bad way of going about it. This &lt;a class="reference external" href="http://phdcomics.com/"&gt;PhDComic&lt;/a&gt;
does a rather good job of showing an example situation. Sure, this is about a
document, but when source code is kept in different folders, a similar
situation arises. You get the idea.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://phdcomics.com/comics/archive.php?comicid=1531"&gt;&lt;img alt="PhDComic!" class="text-center img-responsive pagination-centered" src="http://www.phdcomics.com/comics/archive/phd101212s.gif" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="section" id="version-control-yes"&gt;
&lt;h2&gt;Version control, YES!&lt;/h2&gt;
&lt;p&gt;If there weren't tools designed to track and manage such projects, one could
still argue for using such methods, but the truth is that there is a plethora
of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/List_of_version_control_software"&gt;version control tools&lt;/a&gt; available
under &lt;a class="reference external" href="https://www.gnu.org/philosophy/free-sw.en.html"&gt;Free/Open Source&lt;/a&gt; licenses. Not only do these tools manage projects,
they also make collaborating over source code simple.&lt;/p&gt;
&lt;p&gt;All my simulation code, for example, lives in a &lt;a class="reference external" href="https://git-scm.com/"&gt;Git&lt;/a&gt; repository (which will be
made available under a &lt;a class="reference external" href="https://www.gnu.org/philosophy/free-sw.en.html"&gt;Free/Open source&lt;/a&gt; license as soon as my paper goes out
to ensure that others can read, verify, and build on it). The support scripts
that I use to set up simulations and then analyse the data they produce already
live &lt;a class="reference external" href="https://github.com/sanjayankur31/Sinha2016-scripts"&gt;here on GitHub&lt;/a&gt;,
for example. Please go ahead and use them if they fit your purpose.&lt;/p&gt;
&lt;p&gt;I have different &lt;a class="reference external" href="https://git-scm.com/"&gt;Git&lt;/a&gt; branches for different features that I add to the
simulations---the different hypothesis that I'm testing out. I also keep a
rather meticulous record of everything I do in a research journal in &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; that
also lives in a &lt;a class="reference external" href="https://git-scm.com/"&gt;Git&lt;/a&gt; repository, and uses &lt;a class="reference external" href="https://github.com/sanjayankur31/calliope"&gt;Calliope&lt;/a&gt; (a simple helper script to
manage various journaling tasks). Everything goes in here---graphs, images,
sometimes patches and source code even, and the deductions and other
comments/thoughts too.&lt;/p&gt;
&lt;p&gt;My rather simple system is as follows:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Each new feature/hypothesis gets its own &lt;a class="reference external" href="https://git-scm.com/"&gt;Git&lt;/a&gt; branch.&lt;/li&gt;
&lt;li&gt;Each version of its implementation, therefore, gets its own unique &lt;a class="reference external" href="https://github.com/sanjayankur31/Sinha2016-scripts/blob/master/runners/stri-cluster/start-nest-job.sh#L93"&gt;commit&lt;/a&gt;
(a snapshot of code that &lt;a class="reference external" href="https://git-scm.com/"&gt;Git&lt;/a&gt; saves for the user with a unique identifier and
a complete record of the changes that were made to the project, when they
were made and so on.)&lt;/li&gt;
&lt;li&gt;For each run of a snapshot, the generated data is stored in a folder that is
named &lt;a class="reference external" href="https://github.com/sanjayankur31/Sinha2016-scripts/blob/master/runners/stri-cluster/start-nest-job.sh#L27"&gt;YYYYMMDDHHMM (Year, month, day, time)&lt;/a&gt;,
which, unless you figure out how to go back in time, is also unique.&lt;/li&gt;
&lt;li&gt;The commit hash + YYYYMMDD become a unique identifier for each code snapshot
and the results that it generated.&lt;/li&gt;
&lt;li&gt;A new chapter in my research journal holds a summary of the simulation, and
all the analysis that I do. I even name the chapter &amp;quot;git-hash/YYYYMMDDHHMM&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;a class="reference external image-reference" href="https://xkcd.com/1597/"&gt;&lt;img alt="XKCD on Git." class="text-center img-responsive pagination-centered" src="https://imgs.xkcd.com/comics/git.png" style="width: 50%;" /&gt;&lt;/a&gt;
&lt;p&gt;I know that learning a version control system has a steep initial curve, but I
really do think that this is one tool that is well worth the time.&lt;/p&gt;
&lt;p&gt;Using a version control system has many advantages, some of which are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It lets you keep the full history of your source code, and go back to any
previous version.&lt;/li&gt;
&lt;li&gt;You know exactly what you changed between two snapshots.&lt;/li&gt;
&lt;li&gt;If multiple people work on the code, everyone knows exactly who authored
what.&lt;/li&gt;
&lt;li&gt;These tools make changing code, trying out things, and so on, very very easy.
Try something out in a different branch, if it worked, yay, keep the branch
running; maybe even merge it to the main branch? If it didn't make a note,
delete the branch, and move on!&lt;/li&gt;
&lt;li&gt;With services like &lt;a class="reference external" href="https://github.com"&gt;GitHub&lt;/a&gt;, &lt;a class="reference external" href="https://bitbucket.org"&gt;BitBucket&lt;/a&gt;, and &lt;a class="reference external" href="https://gitlab.com"&gt;GitLab&lt;/a&gt;, collaboration becomes
really easy.&lt;/li&gt;
&lt;li&gt;Ah, and note, that every collaborator has a copy of the source code, so it
has been backed up too! Even if you work alone, there's always another copy
on &lt;a class="reference external" href="https://github.com"&gt;GitHub&lt;/a&gt; (or whatever service you use).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's a quick beginners guide to using &lt;a class="reference external" href="https://git-scm.com/"&gt;Git&lt;/a&gt; and &lt;a class="reference external" href="https://github.com"&gt;GitHub&lt;/a&gt;:
&lt;a class="reference external" href="http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1004668"&gt;http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1004668&lt;/a&gt;
There are many more all over the WWW, of course. &lt;a class="reference external" href="https://duckduckgo.com"&gt;Duckduckgo&lt;/a&gt; is your friend.
(&lt;a class="reference external" href="http://qr.ae/TU1wA9"&gt;Why Duckduckgo and not Google?&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-sumatra-about-then"&gt;
&lt;h2&gt;What's Sumatra about, then?&lt;/h2&gt;
&lt;a class="reference external image-reference" href="http://neuralensemble.org/static/photos/sumatra_logo.png"&gt;&lt;img alt="Sumatra: a tool to manage and track simulation runs." class="text-center img-responsive pagination-centered" src="http://neuralensemble.org/static/photos/sumatra_logo.png" style="width: 30%;" /&gt;&lt;/a&gt;
&lt;p&gt;I've been meaning to try &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt; out for a while now. What &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt; does is
sort of bring the functions of all my scripts together into one well-designed
tool.  &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt; can do the running bit, then save the generated data in a
unique location, and it even lets users add comments about the simulation.
&lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt; even has a web based front end for those that would prefer a graphical
interface instead of the command line.  Lastly, &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt; is written in &lt;a class="reference external" href="https://python.org"&gt;Python&lt;/a&gt;,
so it works on pretty much all systems. Note that &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt; forces the use of a
version control system (from what I've seen yet).&lt;/p&gt;
&lt;div class="section" id="a-quick-walk-through"&gt;
&lt;h3&gt;A quick walk-through&lt;/h3&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://sumatra.readthedocs.io/en/0.7.4/index.html"&gt;documentation&lt;/a&gt;
contains all of this already, but I'll show the steps here too. I used a &lt;a class="reference external" href="https://github.com/sanjayankur31/sumatra-nest-cluster-test"&gt;dummy
repository&lt;/a&gt; to
test it out.&lt;/p&gt;
&lt;p&gt;Installing &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt; is as easy as a &lt;a class="reference external" href="https://docs.python.org/3/installing/index.html"&gt;pip&lt;/a&gt; command. I would suggest setting up a
&lt;a class="reference external" href="https://docs.python.org/3/library/venv.html"&gt;virtual-environment&lt;/a&gt;, though:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
python3 -m venv --system-site-packages sumatra-virtual
&lt;/pre&gt;
&lt;p&gt;We then activate the virtual-environment, and install &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
source sumatra-virtual/bin/activate
pip install sumatra
&lt;/pre&gt;
&lt;p&gt;Once it finishes installing, simply mark a version controlled source
repository as managed by &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
cd my-awesome-project
smt init my-awesome-project
&lt;/pre&gt;
&lt;p&gt;Then, one can see the information that &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt; has on the project, for
example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
smt info
Project name        : test-repo
Default executable  : Python (version: 3.6.5) at /home/asinha/dump/sumatra-virt/bin/python3
Default repository  : GitRepository at /home/asinha/Documents/02_Code/00_repos/00_mine/sumatra-nest-cluster-test (upstream: git&amp;#64;github.com:sanjayankur31/sumatra-nest-cluster-test.git)
Default main file   : test.py
Default launch mode : serial
Data store (output) : /home/asinha/Documents/02_Code/00_repos/00_mine/sumatra-nest-cluster-test/Data
.          (input)  : /
Record store        : Django (/home/asinha/Documents/02_Code/00_repos/00_mine/sumatra-nest-cluster-test/.smt/records)
Code change policy  : error
Append label to     : None
Label generator     : timestamp
Timestamp format    : %Y%m%d-%H%M%S
Plug-ins            : []
Sumatra version     : 0.7.4
&lt;/pre&gt;
&lt;p&gt;My test script only prints a short message. Here's how one would run it using
&lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# so that we don't have to specify this for each run
smt configure --executable=python3 --main=test.py

smt run
Hello Sumatra World!
Record label for this run: '20180512-200859'
No data produced.
&lt;/pre&gt;
&lt;p&gt;One can now see all the runs of this simulation that have been made!&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
smt list --long
--------------------------------------------------------------------------------
Label            : 20180512-200859
Timestamp        : 2018-05-12 20:08:59.761849
Reason           :
Outcome          :
Duration         : 0.050611019134521484
Repository       : GitRepository at /home/asinha/Documents/02_Code/00_repos/00_mine/sumatra-nest-
                 : cluster-test (upstream: git&amp;#64;github.com:sanjayankur31/sumatra-nest-cluster-
                 : test.git)
Main_File        : test.py
Version          : 6f4e1bf05f223a0100ca6f843c11ef4fd70490f3
Script_Arguments :
Executable       : Python (version: 3.6.5) at /home/asinha/dump/sumatra-virt/bin/python3
Parameters       :
Input_Data       : []
Launch_Mode      : serial
Output_Data      : []
User             : Ankur Sinha (Ankur Sinha Gmail) &amp;lt;sanjay.ankur&amp;#64;gmail.com&amp;gt;
Tags             :
Repeats          : None
--------------------------------------------------------------------------------
Label            : 20180512-181422
Timestamp        : 2018-05-12 18:14:22.668655
Reason           :
Outcome          : Well that worked
Duration         : 0.05211901664733887
Repository       : GitRepository at /home/asinha/Documents/02_Code/00_repos/00_mine/sumatra-nest-
                 : cluster-test (upstream: git&amp;#64;github.com:sanjayankur31/sumatra-nest-cluster-
                 : test.git)
Main_File        : test.py
Version          : 4f151a368b1fee1fa8f21026c3b6d2c6b2531da8
Script_Arguments :
Executable       : Python (version: 3.6.5) at /home/asinha/dump/sumatra-virt/bin/python3
Parameters       :
Input_Data       : []
Launch_Mode      : serial
Output_Data      : []
User             : Ankur Sinha (Ankur Sinha Gmail) &amp;lt;sanjay.ankur&amp;#64;gmail.com&amp;gt;
Tags             :
Repeats          : None
&lt;/pre&gt;
&lt;p&gt;There's a lot more that can be done, of course. I'll quickly show the GUI
version here.&lt;/p&gt;
&lt;p&gt;One can run the webversion using:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
smtweb -p 8001 #whatever port number one wants to use
&lt;/pre&gt;
&lt;p&gt;Then, it'll open up in your default web-browser at &lt;a class="reference external" href="http://127.0.0.1:8001/"&gt;http://127.0.0.1:8001/&lt;/a&gt;.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://ankursinha.in/images/20180512-sumatra1.png"&gt;&lt;img alt="Sumatra initial interface." class="text-center img-responsive pagination-centered" src="http://ankursinha.in/images/20180512-sumatra1.png" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;p&gt;For each project, one can see the various runs, with all the associated
information too.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://ankursinha.in/images/20180512-sumatra2.png"&gt;&lt;img alt="Records for a project in Sumatra" class="text-center img-responsive pagination-centered" src="http://ankursinha.in/images/20180512-sumatra2.png" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;p&gt;One can then add more information about a run. &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt; already stores lots of
important information as the image shows:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://ankursinha.in/images/20180512-sumatra3.png"&gt;&lt;img alt="More information on each record in Sumatra" class="text-center img-responsive pagination-centered" src="http://ankursinha.in/images/20180512-sumatra3.png" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;p&gt;Pretty neat, huh?&lt;/p&gt;
&lt;p&gt;I run my simulations on a cluster, and so have my own system to submit jobs to
the queue system. &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt; can run jobs in parallel on a cluster, but I've
still got to check if it also integrates with the queue system that our cluster
runs. Luckily, &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt; also provides an API, so I should be able to write a
few &lt;a class="reference external" href="https://python.org"&gt;Python&lt;/a&gt; scripts to handle that bit too. It's on my TODO list now.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="please-use-version-control-and-a-sumatra-style-record-keeper"&gt;
&lt;h2&gt;Please use version control and a Sumatra style record keeper&lt;/h2&gt;
&lt;p&gt;I haven't found another tool that does what &lt;a class="reference external" href="http://neuralensemble.org/sumatra/"&gt;Sumatra&lt;/a&gt; does yet. Maybe Jupyter
notebooks would come close, but one would have to add some sort of wrapper
around them to keep proper records. It'll probably be similar to my current
system.&lt;/p&gt;
&lt;p&gt;In summary, please use version control, and use a record keeper to manage and
track simulations. Not only does it make it easier for you, the researcher, it
also makes it easier for others to replicate the simulation since the record
keeper provides all the information required to re-run the simulation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="free-open-source-software-promotes-open-science"&gt;
&lt;h2&gt;Free/Open source software promotes Open Science&lt;/h2&gt;
&lt;video controls width="640" height="390" poster="//static.fsf.org/nosvn/FSF30-video/fsf30-poster.png"&gt;
&lt;source src="//static.fsf.org/nosvn/FSF30-video/FSF_30_720p.webm" type="video/webm"&gt;
&lt;track kind="subtitles" label="English" srclang="en" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.en.vtt" default="default" /&gt;
&lt;track kind="subtitles" label="Spanish" srclang="es" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_es.vtt" /&gt;
&lt;track kind="subtitles" label="French" srclang="fr" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.fr.vtt" /&gt;
&lt;track kind="subtitles" label="German" srclang="en" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.de.vtt" /&gt;
&lt;track kind="subtitles" label="русский" srclang="ru" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.ru.vtt" /&gt;
&lt;track kind="subtitles" label="italiano" srclang="it" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.it.vtt" /&gt;
&lt;track kind="subtitles" label="português" srclang="pt" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.pt.vtt" /&gt;
&lt;track kind="subtitles" label="српски" srclang="sr" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.sr.vtt" /&gt;
&lt;track kind="subtitles" label="fārsi" srclang="fa" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.fa.vtt" /&gt;
&lt;track kind="subtitles" label="nederlands" srclang="nl" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.nl.vtt" /&gt;
&lt;track kind="subtitles" label="magyar" srclang="hu" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.hu.vtt" /&gt;
&lt;track kind="subtitles" label="svenska" srclang="se" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.se.vtt" /&gt;
&lt;track kind="subtitles" label="română" srclang="ro" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.ro.vtt" /&gt;
&lt;track kind="subtitles" label="lietuvių" srclang="lt" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.lt.vtt" /&gt;
&lt;track kind="subtitles" label="hebrew" srclang="lt" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.he.vtt" /&gt;
&lt;track kind="subtitles" label="português do Brasil" srclang="pt-br" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.pt-br.vtt" /&gt;
&lt;track kind="subtitles" label="chinese" srclang="lt" src="//static.fsf.org/nosvn/FSF30-video/captions/FSF_30_720p.zh-cn.vtt" /&gt;
&lt;p&gt;&lt;a href="https://www.fsf.org/blogs/community/user-liberation-watch-and-share-our-new-video"&gt;
User liberation video at the Free Software Foundation.
&lt;/a&gt;&lt;/p&gt;
&lt;/video&gt;&lt;p&gt;(The original video is at the &lt;a class="reference external" href="https://www.fsf.org/blogs/community/user-liberation-watch-and-share-our-new-video"&gt;Free Software Foundation's website&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;As a concluding plea, I request everyone to please use &lt;a class="reference external" href="https://www.gnu.org/philosophy/free-sw.en.html"&gt;Free/Open source&lt;/a&gt;
software for all research. Not only are these available free of cost, they
provide everyone with the right to read, validate, study, copy, share, and
modify the software. One can learn so much from reading how research tools are
built. One can be absolutely sure of their results if they can see the code
that carries out the analysis. One can build on others' work if the source is
available for all to use and change. How easy does replication become when the
source and all related resources are given out for all to use?&lt;/p&gt;
&lt;p&gt;Do not use Microsoft Word, for example. Not everyone, even today, has access
to Microsoft software. Should researchers be required to buy a Microsoft
license to be able to collaborate with us? The tools are here to enable
science, not hamper it.  Proprietary software and formats do not enable
science, they restrict it to those that can pay for such software. This is not
a restriction we should endorse in any way.&lt;/p&gt;
&lt;p&gt;Yes, I know that sometimes there aren't &lt;a class="reference external" href="https://www.gnu.org/philosophy/free-sw.en.html"&gt;Free/Open source&lt;/a&gt; software
alternatives that carry the same set of features, but a little bit of extra
work, for me, is an investment towards Open Science. Instead of Word, as an
example, use &lt;a class="reference external" href="https://www.libreoffice.org/"&gt;Libreoffice&lt;/a&gt;, or &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt;. Use &lt;a class="reference external" href="http://opendocumentformat.org/"&gt;Open formats&lt;/a&gt;. There will be bugs, but until we report
them, they will not be fixed. Until these &lt;a class="reference external" href="https://www.gnu.org/philosophy/free-sw.en.html"&gt;Free/Open source&lt;/a&gt; tools replace
restricted software as the standard for science, they will only have small
communities around them that build and maintain them.&lt;/p&gt;
&lt;p&gt;Open Science is a necessity.  Researchers from the neuroscience community
recently signed &lt;a class="reference external" href="http://opensourceforneuroscience.org/"&gt;this letter&lt;/a&gt;
committing to the use of &lt;a class="reference external" href="https://www.gnu.org/philosophy/free-sw.en.html"&gt;Free/Open source&lt;/a&gt; software for their research. There
are similar initiatives in other fields too, and of course, one must be aware
of the Open Access movement etc.&lt;/p&gt;
&lt;p&gt;I've made this plea in the context of science, but the video should also show
you how in everyday life, it is important to use &lt;a class="reference external" href="https://www.gnu.org/philosophy/free-sw.en.html"&gt;Free/Open source&lt;/a&gt; resources.
Please use &lt;a class="reference external" href="https://www.gnu.org/philosophy/free-sw.en.html"&gt;Free/Open source&lt;/a&gt; resources, as much as possible.&lt;/p&gt;
&lt;!-- _ --&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="Reproducible research"></category><category term="Computational neuroscience"></category><category term="Sumatra"></category><category term="Fedora"></category><category term="Planet"></category></entry><entry><title>Giving Qutebrowser a go - a fantastic keyboard-focused browser</title><link href="http://ankursinha.in/2017/06/21/giving-qutebrowser-a-go-a-fantastic-keyboard-focused-browser.html" rel="alternate"></link><published>2017-06-21T00:09:30+01:00</published><updated>2017-06-21T00:09:30+01:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2017-06-21:/2017/06/21/giving-qutebrowser-a-go-a-fantastic-keyboard-focused-browser.html</id><summary type="html">&lt;p class="first last"&gt;After years of using the excellent Firefox, I've decided to tweak my workflow a little more by giving &lt;a class="reference external" href="https://www.qutebrowser.org/"&gt;Qutebrowser&lt;/a&gt; a go. &lt;a class="reference external" href="https://www.qutebrowser.org/"&gt;Qutebrowser&lt;/a&gt; is a brilliant keyboard-focused browser. In this post, I document my first day with &lt;a class="reference external" href="https://www.qutebrowser.org/"&gt;Qutebrowser&lt;/a&gt;, and I also include some tips and tricks that others may find helpful.&lt;/p&gt;
</summary><content type="html">&lt;center&gt;&lt;a class="reference external image-reference" href="http://ankursinha.in/images/20170621-qutebrowser3.png"&gt;&lt;img alt="A screenshot showing hints in Qutebrowser on the Qutebrowser website" class="text-center img-responsive pagination-centered" src="http://ankursinha.in/images/20170621-qutebrowser3.png" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;/center&gt;&lt;p&gt;Years ago, I was introduce to &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Touch_typing"&gt;touch typing&lt;/a&gt;. I knew immediately that it was a skill I must learn. I remember spending hours playing with &lt;a class="reference external" href="https://apps.fedoraproject.org/packages/gtypist"&gt;gtypist&lt;/a&gt; trying to improve my typing efficiency. I'm not too bad nowadays. I can mostly type without looking at the keyboard at all, and with few errors.&lt;/p&gt;
&lt;p&gt;I've always loved using the command line. In fact, I maintain that new programmers should start at the command line and only move to IDEs once they've learned exactly what's being done under the hood. I use the terminal as much as conveniently possible - music via &lt;a class="reference external" href="https://apps.fedoraproject.org/packages/ncmpcpp"&gt;ncmpcpp&lt;/a&gt;, IRC on &lt;a class="reference external" href="https://apps.fedoraproject.org/packages/irssi"&gt;irssi&lt;/a&gt; (there are Gitter and Slack gateways to IRC too), &lt;a class="reference external" href="https://apps.fedoraproject.org/packages/task"&gt;taskwarrior&lt;/a&gt; to organise my TODOs, all my writing in &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;VIM&lt;/a&gt; (programming and otherwise), for example. &lt;a class="reference external" href="https://apps.fedoraproject.org/packages/byobu"&gt;Byobu&lt;/a&gt; makes it really easy.&lt;/p&gt;
&lt;p&gt;The one effect sticking to the command line so much has had on me is that I've developed a slight aversion to the mouse/touchpad. I now feel mildly annoyed if I must move my fingers off the home-row to do something. I must use the touchpad to check my mail/calendar on Evolution, for example, but this doesn't annoy me too much because I usually check these when I've taken a break from programming (or my &lt;a class="reference external" href="https://xkcd.com/303/"&gt;code is compiling&lt;/a&gt;). It's really on Firefox that the constant switching between keyboard and mouse used to be a real downer.&lt;/p&gt;
&lt;p&gt;Being a &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;VIM&lt;/a&gt; user, I did the expected - went looking to see if there was a way to use &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;VIM&lt;/a&gt; style key-mappings on Firefox. There are multiple add-ons that permit this with different feature sets - &lt;a class="reference external" href="http://vimperator.org/"&gt;vimperator&lt;/a&gt;, &lt;a class="reference external" href="http://5digits.org/pentadactyl/"&gt;pentadactyl&lt;/a&gt;, &lt;a class="reference external" href="https://vimium.github.io/"&gt;vimium&lt;/a&gt;, &lt;a class="reference external" href="https://addons.mozilla.org/en-GB/firefox/addon/vimfx/"&gt;vimFX&lt;/a&gt; are a few examples. Now, the different features these provide cater to different people's requirements. I went for pentadactly. Not only does it permit &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;VIM&lt;/a&gt; style key mappings and navigation, it also provides a vim style command line that is incredibly handy. I've used it for years now. The issue that has troubled pentadactyl for some time now is constant breakage - it tends to break each time the Firefox addon API is updated. Recently, I &lt;a class="reference external" href="https://github.com/5digits/dactyl/issues/99"&gt;read that some major changes in the API will make pentadactly pretty much unusable in the near future&lt;/a&gt;. This made me go looking for a more stable alternative. I tried one or two others - vimium for example, but somehow, I find vimium too simple.&lt;/p&gt;
&lt;p&gt;So, I &lt;a class="reference external" href="https://www.reddit.com/r/linux/comments/3aqmhd/why_cant_we_have_a_nice_vimlike_webkit_browser/"&gt;dug further&lt;/a&gt; and ran into &lt;a class="reference external" href="https://fanglingsu.github.io/vimb/"&gt;Vimb&lt;/a&gt; and &lt;a class="reference external" href="https://www.qutebrowser.org/"&gt;Qutebrowser&lt;/a&gt;. They're both &amp;quot;vim like browsers&amp;quot; i.e., they're designed for more advanced users and they provide &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;VIM&lt;/a&gt; like key-mappings and modes. I gave vimb a short try, but &lt;a class="reference external" href="https://www.qutebrowser.org/"&gt;Qutebrowser&lt;/a&gt; really impressed me a lot more.&lt;/p&gt;
&lt;div class="section" id="qutebrowser"&gt;
&lt;h2&gt;Qutebrowser&lt;/h2&gt;
&lt;p&gt;The best thing about &lt;a class="reference external" href="https://www.qutebrowser.org/"&gt;Qutebrowser&lt;/a&gt; is that it's &lt;a class="reference external" href="https://github.com/qutebrowser/qutebrowser/pulse/monthly"&gt;actively maintained&lt;/a&gt;. I even hopped on to the &lt;a class="reference external" href="https://webchat.freenode.net/?channels=#qutebrowser"&gt;IRC channel&lt;/a&gt; earlier today to get some help. The latest version is in Fedora already, so you can simply go &lt;code&gt;sudo dnf install qutebrowser&lt;/code&gt; to give it a whirl. I wanted to test out the latest codebase, so I quickly set up a &lt;a class="reference external" href="https://copr.fedorainfracloud.org/coprs/ankursinha/qutebrowser/"&gt;copr repository&lt;/a&gt; that you can use too. I'm tinkering with &lt;a class="reference external" href="http://flatpak.org/"&gt;FlatPak&lt;/a&gt; to try and build one too, so that it becomes even easier to install, but I'm still figuring out how FlatPaks are built.&lt;/p&gt;
&lt;center&gt;&lt;a class="reference external image-reference" href="http://ankursinha.in/images/20170621-qutebrowser1.png"&gt;&lt;img alt="A screenshot showing hints in Qutebrowser" class="text-center img-responsive pagination-centered" src="http://ankursinha.in/images/20170621-qutebrowser1.png" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;/center&gt;&lt;p&gt;The screenshot shows &amp;quot;hinting&amp;quot; which is how one opens links. You press &amp;quot;f&amp;quot; and the various links in the page get labelled. Simply type the label of the link you want to visit. There's also &amp;quot;advanced hinting&amp;quot; which lets you do things like open links in a background tab, or in a new tab, or save (&lt;a class="reference external" href="https://unix.stackexchange.com/questions/209660/why-is-the-vi-editors-copy-command-called-yank"&gt;yank&lt;/a&gt;) a link URL.&lt;/p&gt;
&lt;center&gt;&lt;a class="reference external image-reference" href="http://ankursinha.in/images/20170621-qutebrowser2.png"&gt;&lt;img alt="A screenshot showing the command mode in Qutebrowser" class="text-center img-responsive pagination-centered" src="http://ankursinha.in/images/20170621-qutebrowser2.png" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;/center&gt;&lt;p&gt;This one shows the command mode - everything can be done here, including configuration of the browser or browsing related tasks.&lt;/p&gt;
&lt;div class="section" id="a-few-tips"&gt;
&lt;h3&gt;A few tips&lt;/h3&gt;
&lt;p&gt;I did a few things to get started. First, I wanted to use the new &amp;quot;webengine&amp;quot; backend. This requires the installation of two packages: &lt;code&gt;sudo dnf install python3-pyopengl python3-qt5-webengine&lt;/code&gt;, and then creating a new file in &lt;code&gt;~/.local/share/applications/qutebrowser.desktop&lt;/code&gt; with the following contents:&lt;/p&gt;
&lt;pre class="code ini literal-block"&gt;
&lt;span class="k"&gt;[Desktop Entry]&lt;/span&gt;
&lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;qutebrowser&lt;/span&gt;
&lt;span class="na"&gt;GenericName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Web Browser&lt;/span&gt;
&lt;span class="na"&gt;Icon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;qutebrowser&lt;/span&gt;
&lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Application&lt;/span&gt;
&lt;span class="na"&gt;Categories&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Network;WebBrowser;&lt;/span&gt;
&lt;span class="na"&gt;Exec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;qutebrowser --backend webengine %u&lt;/span&gt;
&lt;span class="na"&gt;Terminal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;false&lt;/span&gt;
&lt;span class="na"&gt;StartupNotify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;false&lt;/span&gt;
&lt;span class="na"&gt;MimeType&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;text/html;text/xml;application/xhtml+xml;application/xml;application/rdf+xml;image/gif;image/jpeg;image/png;x-scheme-handler/http;x-scheme-handler/https;&lt;/span&gt;
&lt;span class="na"&gt;Keywords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Browser&lt;/span&gt;
&lt;span class="na"&gt;X-Desktop-File-Install-Version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;0.23&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This new file simply ensures that picking &lt;a class="reference external" href="https://www.qutebrowser.org/"&gt;Qutebrowser&lt;/a&gt; from the activities menu will run the new backend. Without this, one would have to launch it from the terminal each time.&lt;/p&gt;
&lt;p&gt;Next, I configured it a bit to my liking - still very limited, but it's a start. The configuration file for &lt;a class="reference external" href="https://www.qutebrowser.org/"&gt;Qutebrowser&lt;/a&gt; is at &lt;code&gt;~/.config/qutebrowser/qutebrowser.conf&lt;/code&gt;.  There's so much one can modify here. I've only set up a few search engines and updated the default to Google. To do this, one needs to modify the &lt;code&gt;[searchengines]&lt;/code&gt; section in the file:&lt;/p&gt;
&lt;pre class="code ini literal-block"&gt;
&lt;span class="na"&gt;DEFAULT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://google.com/search?hl=en-GB&amp;amp;q={}&lt;/span&gt;
&lt;span class="na"&gt;duckduckgo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://duckduckgo.com/?q={}&lt;/span&gt;
&lt;span class="na"&gt;github&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://github.com/search?q={}&lt;/span&gt;
&lt;span class="na"&gt;google-scholar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://scholar.google.co.uk/scholar?hl=en&amp;amp;q={}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I also enable &lt;code&gt;save-session&lt;/code&gt; - just set it to &lt;code&gt;true&lt;/code&gt;. There are a few other tweaks, such as updating the &lt;code&gt;startpage&lt;/code&gt; to &lt;a class="reference external" href="http://start.fedoraproject.org"&gt;http://start.fedoraproject.org&lt;/a&gt;. There's even a built in ad-blocker that one can configure.&lt;/p&gt;
&lt;p&gt;To get flash working, one needs to also install the ppapi bits. Assuming one already has the flash plugin repository installed, &lt;code&gt;sudo dnf install flash-player-ppapi&lt;/code&gt; does this. I haven't gotten Netflix to work yet - it requries some Silverlight thingy. I can always run Chrome or FF for that one rare purpose anyway.&lt;/p&gt;
&lt;p&gt;There are, obviously a few limitations in the current &lt;a class="reference external" href="https://www.qutebrowser.org/"&gt;Qutebrowser&lt;/a&gt; version. The most noticeable one is probably the lack of a sync service similar to ones Firefox and Chrome provide. Google does tell me something about using &lt;a class="reference external" href="https://syncthing.net/"&gt;syncthing&lt;/a&gt; but I haven't gotten down to this yet. While it would be nice to have, it isn't quite that necessary. There isn't a password manager either. There are &lt;a class="reference external" href="https://github.com/qutebrowser/qutebrowser/issues/30"&gt;plans to develop a plug-in system&lt;/a&gt; in the pipeline to implement such features already, though. (&lt;a class="reference external" href="https://github.com/qutebrowser/qutebrowser/blob/master/doc/userscripts.asciidoc"&gt;userscripts&lt;/a&gt; seem to provide some additional functionality too.)&lt;/p&gt;
&lt;p&gt;Anyway, it's a great, quick, and lean browser if you're a &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;VIM&lt;/a&gt; addict like me, so give it a go? If you have some cycles and are intersted in some hacking, get in touch with the devs over Github too. If not, please do at least &lt;a class="reference external" href="http://ankursinha.in/2017/05/17/a-well-filed-software-issue-considerably-improves-the-chances-of-the-issue-being-fixed-quicker.html"&gt;file bugs&lt;/a&gt; if you see them.&lt;/p&gt;
&lt;p&gt;Here's a &lt;a class="reference external" href="https://www.qutebrowser.org/doc/quickstart.html"&gt;quickstart&lt;/a&gt; to quickly get up and running with. Oh, and yeah, &lt;em&gt;the mouse/touchpad works in the browser too&lt;/em&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Fedora"></category><category term="FlatPak"></category><category term="Free software"></category><category term="Linux"></category><category term="Python"></category><category term="Vim"></category><category term="Qutebrowser"></category></entry><entry><title>Python - analysing large files - some notes to self</title><link href="http://ankursinha.in/2017/01/10/python-analysing-large-files-some-notes-to-self.html" rel="alternate"></link><published>2017-01-10T15:38:26+00:00</published><updated>2017-01-10T15:38:26+00:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2017-01-10:/2017/01/10/python-analysing-large-files-some-notes-to-self.html</id><summary type="html">&lt;p class="first last"&gt;I use Python to post process large amounts of spike data from my simulations. This post documents some observations I've made while writing my scripts.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="use-pandas-instead-of-numpy-to-load-your-data"&gt;
&lt;h2&gt;Use Pandas instead of Numpy to load your data&lt;/h2&gt;
&lt;p&gt;When most of us think of using Python for scientific computing, &lt;a class="reference external" href="http://www.numpy.org/"&gt;Numpy&lt;/a&gt; comes to mind. I've used it before. Recently, I ran into &lt;a class="reference external" href="http://pandas.pydata.org/"&gt;Pandas&lt;/a&gt; which is a library that's tailored for data analysis. Usually, you'd use Numpy to load data, but it was extremely slow with my large data (30 Gb) files. When I looked around a bit, I found &lt;a class="reference external" href="http://akuederle.com/stop-using-numpy-loadtxt"&gt;this post&lt;/a&gt; which explained it - so, do not use &lt;code&gt;numpy.loadtxt()&lt;/code&gt;, instead use &lt;code&gt;pandas.load_csv()&lt;/code&gt;. An alternative would be to to use &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Memory-mapped_file"&gt;memory mapped files&lt;/a&gt; as &lt;a class="reference external" href="http://ankursinha.in/2015/02/20/extracting-small-chunks-of-data-from-extremely-large-files-say-hello-to-memory-mapped-files.html"&gt;I'd done before with C++&lt;/a&gt; - Numpy &lt;a class="reference external" href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.memmap.html"&gt;does support them&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-matplotlib-for-easy-stuff-but-gnuplot-when-you-need-performance"&gt;
&lt;h2&gt;Use Matplotlib for easy stuff but Gnuplot when you need performance&lt;/h2&gt;
&lt;p&gt;I usually use &lt;a class="reference external" href="http://www.gnuplot.info/"&gt;Gnuplot&lt;/a&gt; to plot my graphs. As &lt;a class="reference external" href="http://stackoverflow.com/a/23883352/375067"&gt;this answer on stackoverflow shows&lt;/a&gt;, Gnuplot performs much better than &lt;a class="reference external" href="http://matplotlib.org/"&gt;Matplotlib&lt;/a&gt;. The common complain seems to be that the figures from Gnuplot don't look modern enough. This, however, is only so if you use the default Gnuplot settings. There are &lt;a class="reference external" href="http://labs.guidolin.net/2010/03/how-to-create-beautiful-gnuplot-graphs.html"&gt;multiple posts on the internet&lt;/a&gt; that explain how to improve Gnuplot figures by changing the default settings. Both Gnuplot and Matplotlib are tools and they fit specific purposes. I'm now using Gnuplot for large data sets (multiple Gbs) and Matplotlib for smaller ones (a few Mbs).&lt;/p&gt;
&lt;p&gt;An example graph generated using Gnuplot is shown below. This is with modified settings, of course. Doesn't look too bad, does it?&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://ankursinha.in/images/20160711-gnuplot-graph.png"&gt;&lt;img alt="Graph generated using Gnuplot" class="align-center" src="http://ankursinha.in/images/20160711-gnuplot-graph.png" style="width: 800px;" /&gt;&lt;/a&gt;
&lt;p&gt;If you're looking to use Gnuplot with Python, there's a &lt;a class="reference external" href="http://gnuplot-py.sourceforge.net/"&gt;Gnuplot.py&lt;/a&gt; package that makes it much easier. Unfortunately, though, the package does not work with Python3. Upstream seems to be inactive - my e-mail to the mailing list hasn't received any replies. &lt;a class="reference external" href="https://github.com/sanjayankur31/gnuplot-py"&gt;I've put the code here on Github at the moment&lt;/a&gt;. When I do have free cycles, I'll look at &lt;a class="reference external" href="https://github.com/sanjayankur31/gnuplot-py/issues/1"&gt;porting it over to Python3&lt;/a&gt;. Pull requests are welcome, of course.&lt;/p&gt;
&lt;p&gt;There's even a library that lets you use Gnuplot with C++ &lt;a class="reference external" href="https://github.com/dstahlke/gnuplot-iostream"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-chunks-when-loading-data-in-pandas"&gt;
&lt;h2&gt;Use chunks when loading data in Pandas&lt;/h2&gt;
&lt;p&gt;Pandas lets you load files in chunks and process these chunks individually. This way, even if you have extremely large files, you won't run end up using all your RAM.&lt;/p&gt;
&lt;p&gt;Here's an example below. This takes a spike file which is a file with two columns: &lt;code&gt;(neuron_IDs TAB spike_times)&lt;/code&gt; and counts the spikes in each second to print them to a new file that I pass to Gnuplot.
Note that since I need a sliding window to count my spikes, I keep the required bits of the previous chunk around.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;
Take a nest gdf file with spike times and calculate mean population firing rates.

File: spike2hz.py

Copyright 2016 Ankur Sinha
Author: Ankur Sinha &amp;lt;sanjay DOT ankur AT gmail DOT com&amp;gt;

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.
&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gc&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;spike2hz&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Main class for utlity.

    Nest gdf file format:

        &amp;lt;neuron gid&amp;gt;    &amp;lt;spike_time&amp;gt;

    Takes an entire spike file and generates the mean population firing
    rate file to be used for time graphs.
    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Main init method.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="c1"&gt;# Initial indices&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt;  &lt;span class="c1"&gt;# ms&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_neurons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;8000.&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;100000000.&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_neurons&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;8000.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;100000000.&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Setup various things.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input_filename&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;output_filename&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_neurons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_neurons&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input_filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input_filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;st_size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;File not found. Skipping.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__validate_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dataframe&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Check to see the input file is a two column file.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dataframe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Data seems incorrect - should have 2 columns. &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                  &lt;span class="s2"&gt;&amp;quot;Please check and re-run&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Read &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataframe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                  &lt;span class="s2"&gt;&amp;quot; rows.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Do the work.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;start_row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1000.&lt;/span&gt;
        &lt;span class="n"&gt;old_spikes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
        &lt;span class="n"&gt;old_times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pandas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'\s+'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;neuronID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;spike_time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                     &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'neuronID'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uint16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                            &lt;span class="s1"&gt;'spike_time'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                                     &lt;span class="n"&gt;lineterminator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="n"&gt;skipinitialspace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index_col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="n"&gt;chunksize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__validate_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Error in file. Skipping.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

            &lt;span class="n"&gt;spikes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

            &lt;span class="c1"&gt;# Keep some part of the previous chunk - because I subtract&lt;/span&gt;
            &lt;span class="c1"&gt;# 1000ms from the current time to count the number of spikes.&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_spikes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;spikes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_spikes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spikes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_times&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;Times from {} to {} being analysed containing {} rows&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Current time is {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

            &lt;span class="c1"&gt;# Reset chunks&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;searchsorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt;
                                                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;1000.&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                                &lt;span class="n"&gt;side&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'left'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;searchsorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;side&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'right'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="n"&gt;statement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{}&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;{}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;1000.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                            &lt;span class="n"&gt;spikes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_neurons&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

                &lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;

            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Printed till {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;old_times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;)):])&lt;/span&gt;
            &lt;span class="n"&gt;old_spikes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spikes&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spikes&lt;/span&gt;&lt;span class="p"&gt;)):])&lt;/span&gt;

            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;spikes&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;
            &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="miscellaneous-tips"&gt;
&lt;h2&gt;Miscellaneous tips&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/3899980/how-to-change-the-font-size-on-a-matplotlib-plot"&gt;Changing font size in Matplotlib&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Do not use numpy datatypes for arithmetic operations - &lt;a class="reference external" href="http://stackoverflow.com/questions/5956783/numpy-float-10x-slower-than-builtin-in-arithmetic-operations"&gt;it is 10x slower than Python built-ins&lt;/a&gt;. I learned of this the hard way - my processing times went up from a few hours to more than a day and I kept wondering why!&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://matplotlib.org/faq/howto_faq.html#generate-images-without-having-a-window-appear"&gt;Generating images without a window in Matplotlib&lt;/a&gt; - useful when you're using a headless system for your analysis.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Computational neuroscience"></category><category term="Fedora"></category><category term="Programming"></category><category term="Gnuplot"></category><category term="Matplotlib"></category><category term="Python"></category><category term="Pandas"></category><category term="Numpy"></category></entry><entry><title>Some notes on programming languages and web development</title><link href="http://ankursinha.in/2016/09/11/some-notes-on-programming-languages-and-web-development.html" rel="alternate"></link><published>2016-09-11T20:58:54+01:00</published><updated>2016-09-11T20:58:54+01:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2016-09-11:/2016/09/11/some-notes-on-programming-languages-and-web-development.html</id><summary type="html">&lt;p class="first last"&gt;Just some notes on different programming languages that one can use for web development. Includes Python, RoR, Rust, Erlang?&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Even before I begin, I must state that I'm not a web developer. I've never been one, and I have no intention to turn into one either. It isn't that I don't like developing web applications. On the contrary, I find the topic incredibly interesting. It's just that everything I need has pretty much already been developed by web developers, so I've never had to write an app myself. Add to that my lack of interest in pursuing a career the software development industry - I prefer my research - the implications are that I will always prioritise research related development.&lt;/p&gt;
&lt;p&gt;Take this blog, for example. It once used to be a &lt;a class="reference external" href="https://wordpress.org/"&gt;Wordpress&lt;/a&gt; deployment, but I eventually got fed up with it bleeding the resources of my shared hosting space and moved to a static site. I didn't even bother learning a new language like &lt;a class="reference external" href="https://www.ruby-lang.org/en/"&gt;Ruby&lt;/a&gt; to use &lt;a class="reference external" href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;. I found something that was written in &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt;, a language that I know pretty well - &lt;a class="reference external" href="http://docs.getpelican.com/en/3.6.3/"&gt;Pelican&lt;/a&gt; - which works really well. So, really, for my web requirements, I tend to pick the path of least effort.&lt;/p&gt;
&lt;p&gt;Recently though, a requirement has arisen. I use &lt;a class="reference external" href="http://wikindx.sourceforge.net/features.html"&gt;Wikindx&lt;/a&gt; as my bibliography manager. There are various desktop applications available, of course, but the advantage of a web application is that it's accessible from everywhere. &lt;a class="reference external" href="https://www.mendeley.com/features/"&gt;Mendeley&lt;/a&gt; is quite nice and so is &lt;a class="reference external" href="https://en.wikipedia.org/wiki/EndNote"&gt;EndNote&lt;/a&gt;, but they aren't free software, so I shan't use them. Now, even though &lt;a class="reference external" href="http://wikindx.sourceforge.net/features.html"&gt;Wikindx&lt;/a&gt; is a good bibliography manager with lots of additional helpful features, I want something that can also keep up with new journals, and help me cut through the plethora of articles to find ones that are relevant to my work. I follow about 40 journals using &lt;a class="reference external" href="https://lzone.de/liferea/"&gt;Liferea&lt;/a&gt;, but honestly, going through all of them, even with search folders, is a mammoth task. One option is to extend &lt;a class="reference external" href="http://wikindx.sourceforge.net/features.html"&gt;Wikindx&lt;/a&gt;. Hrm, it's written in PHP - do I want to learn PHP? Not really - so that isn't really a solution. It'd be nice if I could use this as a constructive exercise, to learn something new, wouldn't it?&lt;/p&gt;
&lt;p&gt;The obvious solution is to hack something up! I could write a bunch of scripts in some language quickly, but I'd prefer not to lose the functionality that I've gotten used to in &lt;a class="reference external" href="http://wikindx.sourceforge.net/features.html"&gt;Wikindx&lt;/a&gt;. So, let's write a web application then! Yay!&lt;/p&gt;
&lt;p&gt;Before I begin hacking left, right, and center, I wanted to decide what I want to learn. So I did a little research on the different languages that can be used for web development and their features and drawbacks. I'm not going to come up with a conclusion here. In fact, I'm not even going to discuss the strengths and weaknesses of the languages here. They have different designs, and work for different purposes. As long as I can build a web application with reasonable time and effort, I don't really care too much about the nitty-gritty details. I'm not going to waste time on another &amp;quot;this language is better than that one!&amp;quot; argument. All I'm going to do below is list the options I have.&lt;/p&gt;
&lt;p&gt;To begin with, this is meant to be a fun exercise. So, I'm going to write it as a single user app - to reduce the amount I need to learn. When it's done and if my colleagues think it's worth developing into a complete multi user website with collaborative features, it can be extended. So, yea, a prototype to begin with.&lt;/p&gt;
&lt;p&gt;My requirements:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the learning curve must not be tedious nor boring - rather, it should be something fresh&lt;/li&gt;
&lt;li&gt;a framework would be nice - so that the task isn't too taxing&lt;/li&gt;
&lt;li&gt;good documentation is always welcome&lt;/li&gt;
&lt;li&gt;good community support is also welcome - sometimes you need someone to throw you an RTFM or LMGTFY link&lt;/li&gt;
&lt;li&gt;I don't reckon scalability is an issue at the moment?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="python"&gt;
&lt;h2&gt;Python&lt;/h2&gt;
&lt;p&gt;The first on my list was obviously Python. I know the language well. I know the ninjas over at Fedora Infrastructure love Python - &lt;a class="reference external" href="https://bodhi.fedoraproject.org"&gt;Bodhi&lt;/a&gt; seems to use &lt;a class="reference external" href="http://www.pylonsproject.org/"&gt;Pyramid&lt;/a&gt;, and &lt;a class="reference external" href="https://pagure.io"&gt;Pagure&lt;/a&gt; uses &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;. Python is easy to use, and it's really quick to come up with a working prototype. These frameworks are also widely used, so there are enough resources for beginners to learn off - tutorials, cook books, and the sort.&lt;/p&gt;
&lt;p&gt;However, I already know Python and while learning how to use a framework is interesting, learning a new language is probably more interesting?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ruby"&gt;
&lt;h2&gt;Ruby&lt;/h2&gt;
&lt;p&gt;Ruby on Rails seems to be quite popular. Github and Twitter use it - as front ends, I seem to find. The framework is also quite widely used - people say lots of good stuff about it. Ruby seems like a good language to learn too. This looks promising.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nodejs"&gt;
&lt;h2&gt;NodeJS&lt;/h2&gt;
&lt;p&gt;Of course, this must be considered. It seems to be everywhere now. Javascript is quite simple, I've used it a bit. Maybe?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="go"&gt;
&lt;h2&gt;Go&lt;/h2&gt;
&lt;p&gt;Ah, a Google language. I see quite a few frameworks also available. The documentation seems to be decent too - maybe?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rust"&gt;
&lt;h2&gt;Rust&lt;/h2&gt;
&lt;p&gt;This one looks kind of exciting. It's quite new, and isn't as widely used. The documentation may be an issue? I see a framework already - &lt;a class="reference external" href="https://github.com/iron/iron"&gt;Iron&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="scala"&gt;
&lt;h2&gt;Scala&lt;/h2&gt;
&lt;p&gt;Yes, it isn't Java, and it doesn't force you to use OOP, but it really doesn't look too interesting to me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="erlang"&gt;
&lt;h2&gt;Erlang&lt;/h2&gt;
&lt;p&gt;Ah, now here's something new - a functional programming language! That's something I haven't used in a while. A nice framework with good documentation is here too - &lt;a class="reference external" href="https://github.com/ChicagoBoss/ChicagoBoss"&gt;ChicagoBoss&lt;/a&gt;. &lt;a class="reference external" href="https://www.quora.com/Why-choose-Erlang-for-web-development"&gt;Some posts I've read&lt;/a&gt; also say that it's really quick compared to Go/Node.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="so-what-do-i-do"&gt;
&lt;h2&gt;So, what do I do?&lt;/h2&gt;
&lt;p&gt;It's always quite hard to pick a new language for a general purpose that so many languages can fulfil. Usually, I'd pick a language that had a library that fit my requirements exactly. In the case of the above mentioned languages, I know very little about web development. So, I'm going to do what people that don't know much do - pick two arbitrarily! I think I'll start with Python/Flask to quickly get something working - it shouldn't take me more than a weekend. Then, once I have a working demo, I can look at replicating it in Erlang - learn a language quite different from the usual ones that I usually do?&lt;/p&gt;
&lt;p&gt;Sounds like a plan ;)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Fedora"></category><category term="Programming"></category><category term="Python"></category><category term="Erlang"></category><category term="Rust"></category><category term="Flask"></category><category term="RoR"></category><category term="Scala"></category></entry><entry><title>Quickly scripting a grid-search for parameter tuning</title><link href="http://ankursinha.in/2016/08/27/quickly-scripting-a-grid-search-for-parameter-tuning.html" rel="alternate"></link><published>2016-08-27T10:10:04+01:00</published><updated>2016-08-27T10:10:04+01:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2016-08-27:/2016/08/27/quickly-scripting-a-grid-search-for-parameter-tuning.html</id><summary type="html">&lt;p class="first last"&gt;Finding the right set of parameters is quite important in a lot of research - machine learning and computational neuroscience are two fields that I know of. I recently had to ascertain the optimal parameter set for my simulations too. I came up with a quick script to do it for me.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;A lot of models rely on different parameters. In my cortical models, these are usually variables like conductances of different sets of synapses, the sparsity of different synapse sets, learning rates of spike time dependent plasticity learning rules and so on. Given how finely tuned neuronal networks sometimes are, models don't depict the expected behaviours for the entire domain of parameter values. Instead, we often must find the right ranges of these parameters.&lt;/p&gt;
&lt;p&gt;In my simulations, I have some sets of synapses, and in my recent investigations, I needed to find the right &amp;quot;balance&amp;quot; between them. The standard way of going about this is to carry out an organised parameter search, what I think is referred to as a &amp;quot;grid search&amp;quot;. In a grid search, each point in the parameter space is tested to find the ranges where the required behaviour is simulated - really just simple brute force at play here. Now, since I have three parameters to test, my parameter space would be a three dimensional grid - the Cartesian product of the domains of the three parameters - &lt;code&gt;p1 x p2 x p3&lt;/code&gt;. For all possible ordered sets of p1, p2, and p3, I need to run my simulation - the number of possible combinations being &lt;code&gt;n(p1) x n(p2) x n(p3)&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is the cardinality of each set.&lt;/p&gt;
&lt;p&gt;Of course, I wrote myself a script. Modifying the parameters by hand and then queuing up all these simulations manually on the cluster would just take too much time.&lt;/p&gt;
&lt;div class="section" id="the-idea"&gt;
&lt;h2&gt;The idea&lt;/h2&gt;
&lt;p&gt;It's a simple Python script, and this fits well with my &lt;a class="reference external" href="20160531-some-tips-and-tricks-for-running-simulations-on-a-cluster.rst"&gt;workflow&lt;/a&gt; (which intensively uses Git and scripts to queue jobs on the cluster). The idea is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;create a new Git branch for the grid search (so we keep things organised!)&lt;/li&gt;
&lt;li&gt;use a simple scripting language to iterate over the parameter space&lt;/li&gt;
&lt;li&gt;modify the parameters in the simulation source code&lt;/li&gt;
&lt;li&gt;create a new commit for each point in the parameter space&lt;/li&gt;
&lt;li&gt;queue up all these commits on the cluster&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="the-script"&gt;
&lt;h2&gt;The script&lt;/h2&gt;
&lt;p&gt;I've used Python - you can use another scripting language that you prefer. I wouldn't recommend a shell script - even though it's powerful, handling arrays and floats and the sort is quite tedious in bash.&lt;/p&gt;
&lt;pre class="code Python literal-block"&gt;
&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;
Copyright 2016 Ankur Sinha
Author: Ankur Sinha &amp;lt;sanjay DOT ankur AT gmail DOT com&amp;gt;

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.
&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GridSearch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Set up your simulations for a grid search.


    This will modify the source in a branch, make changes, commit
    and then you can set these commits up on the cluster.
    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Initialise.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/path/to/source/file/&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;master&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Print usage.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Usage:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python3 grid_search.py &amp;lt;branch&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Branch MUST be specified.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Set it up.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param1'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param1_increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param1_min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param1'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param1_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param1'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param1_increment&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param1'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param1_increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param1'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param1_min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param1'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param1_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param1'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param1_increment&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;param1 not found in dict. Exiting.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param2'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param2_increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param2_min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param2'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param2_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param2'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param2_increment&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param2'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param2_increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param2'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param2_min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param2'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param2_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param2'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param2_increment&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;param2 not found in dict. Exiting.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param3'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param3_increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param3_min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param3'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param3_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param3'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param3_increment&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param3'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param3_increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param3'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param3_min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param3'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param3_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'param3'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param3_increment&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;param3 not found in dict. Exiting.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Run.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;# checkout the branch&lt;/span&gt;
        &lt;span class="n"&gt;git_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;checkout&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;grid_search-{}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;())),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'git'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;git_args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;param1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param1_min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param1_max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param1_increment&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param2_min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param2_max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param2_increment&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;param3&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param3_min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param3_max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param3_increment&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

                    &lt;span class="n"&gt;sed_args_param1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'sed'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'-i'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="s2"&gt;&amp;quot;s/param1 = .*$/param1 = {}/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sed_args_param1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                    &lt;span class="n"&gt;sed_args_param2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'sed'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'-i'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="s2"&gt;&amp;quot;s/param2 = .*$/param2 = {}/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sed_args_param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                    &lt;span class="n"&gt;sed_args_param3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'sed'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'-i'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="s2"&gt;&amp;quot;s/param3 = .*$/param3 = {}/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sed_args_param3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                    &lt;span class="n"&gt;git_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;add&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'git'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;git_args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                    &lt;span class="n"&gt;commit_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;{} {} {} {}&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt; &lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                    &lt;span class="n"&gt;git_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;commit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-m&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;commit_msg&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'git'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;git_args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;git_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;checkout&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'git'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;git_args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GridSearch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="c1"&gt;# dictionary that holds the required grid ranges&lt;/span&gt;
        &lt;span class="c1"&gt;# specify min, max if want a grid search, else specify only one value&lt;/span&gt;
        &lt;span class="c1"&gt;# if you specify max, min, you must specify increment&lt;/span&gt;
        &lt;span class="n"&gt;setup_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;'param1'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'param2'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'param3'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;30.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setup_dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Since I'm calling &lt;code&gt;sed&lt;/code&gt; to modify my source and replace the parameter values, the only requirement here is that my source code needs to have the three lines (look at the regular expressions):&lt;/p&gt;
&lt;pre class="code Python literal-block"&gt;
&lt;span class="n"&gt;param1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;
&lt;span class="n"&gt;param2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;
&lt;span class="n"&gt;param3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;If all goes well, you should have a new branch:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;* 74866b6 - (3 months ago) Bugfix - neurons first, synapses later — Ankur Sinha (Ankur Sinha Gmail)
| * fd6a7fa - (5 days ago) 2016-08-22 3.0 3.0 -30.0 — Ankur Sinha (Ankur Sinha Gmail) (origin/grid_search-2016-08-22, grid_search-2016-08-22)
| * 33c95be - (5 days ago) 2016-08-22 3.0 3.0 -25.0 — Ankur Sinha (Ankur Sinha Gmail)
| * 51f96c1 - (5 days ago) 2016-08-22 3.0 3.0 -20.0 — Ankur Sinha (Ankur Sinha Gmail)
| * e8c106e - (5 days ago) 2016-08-22 3.0 3.0 -15.0 — Ankur Sinha (Ankur Sinha Gmail)
| * eaa7341 - (5 days ago) 2016-08-22 3.0 3.0 -10.0 — Ankur Sinha (Ankur Sinha Gmail)
| * 4597114 - (5 days ago) 2016-08-22 3.0 3.0 -5.0 — Ankur Sinha (Ankur Sinha Gmail)
| * a111e00 - (5 days ago) 2016-08-22 3.0 2.5 -30.0 — Ankur Sinha (Ankur Sinha Gmail)
| * 5261f4b - (5 days ago) 2016-08-22 3.0 2.5 -25.0 — Ankur Sinha (Ankur Sinha Gmail)
| * d10a686 - (5 days ago) 2016-08-22 3.0 2.5 -20.0 — Ankur Sinha (Ankur Sinha Gmail)
| * 91bc10e - (5 days ago) 2016-08-22 3.0 2.5 -15.0 — Ankur Sinha (Ankur Sinha Gmail)
| * add5188 - (5 days ago) 2016-08-22 3.0 2.5 -10.0 — Ankur Sinha (Ankur Sinha Gmail)
| * c93c817 - (5 days ago) 2016-08-22 3.0 2.5 -5.0 — Ankur Sinha (Ankur Sinha Gmail)
| * 8e779b9 - (5 days ago) 2016-08-22 3.0 2.0 -30.0 — Ankur Sinha (Ankur Sinha Gmail)
| * 9f67e1c - (5 days ago) 2016-08-22 3.0 2.0 -25.0 — Ankur Sinha (Ankur Sinha Gmail)
.....&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Now, with the help of some bash hacking I get a list of all the commits I need to queue up in a single line:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# list all commits reachable from grid_search.. branch but not from the base_branch
&lt;/span&gt;$ git log base_branch..grid_search-2016-08-22  --oneline &lt;span class="p"&gt;|&lt;/span&gt; cut -f1 -d&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tr &lt;span class="s2"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;
fd6a7fa 33c95be 51f96c1 .. e8c106e eaa7341
&lt;/pre&gt;
&lt;p&gt;Then, I use the bash &lt;code&gt;for&lt;/code&gt; construct to queue them all up as before:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
$ &lt;span class="k"&gt;for&lt;/span&gt; commit in fd6a7fa 33c95be 51f96c1 .. e8c106e eaa7341&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; ./start-job.sh &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$commit&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; sleep 1m&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Note - I used the &lt;code&gt;sleep&lt;/code&gt; command to space out each job by a minute. This is because my workflow uses folder names which are timestamps of when the job was queued up, like this: &lt;code&gt;201608121234&lt;/code&gt; (YYYYMMDDHHMM). So, I can't have two commits starting at the same minute.&lt;/p&gt;
&lt;p&gt;There are many ways of carrying out the same method. This is what I quickly came up with. &lt;a class="reference external" href="http://scikit-learn.org"&gt;Scikit&lt;/a&gt;, for example has &lt;a class="reference external" href="http://scikit-learn.org/stable/modules/grid_search.html"&gt;methods for grid search&lt;/a&gt;, but they don't gel well with my simulations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="postprocessing-all-this-data"&gt;
&lt;h2&gt;Postprocessing all this data&lt;/h2&gt;
&lt;p&gt;I have a bunch of scripts for post processing too - this grid search had 36 simulations, the postprocessing is still trudging along. The bigger question is: is there a good way of visualising all these results? I've had to resort to a spreadsheet - but if you have any suggestions, please do let me know. I really haven't found a nice front-end that would let me log results to a database and visualise them - over time, over parameters and so on - does anyone know one? What do people use to keep track of all their data?&lt;/p&gt;
&lt;p&gt;Anyway, it's a long weekend here with Monday being a bank holiday. Enjoy the weekend, everyone!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Computational neuroscience"></category><category term="Fedora"></category><category term="Git"></category><category term="Programming"></category><category term="Python"></category></entry><entry><title>Tinkering with OpenLayers and JS - Cajal - a hacked up neuroscience research map</title><link href="http://ankursinha.in/2016/08/04/tinkering-with-openlayers-and-js-cajal-a-hacked-up-neuroscience-research-map.html" rel="alternate"></link><published>2016-08-04T18:49:08+01:00</published><updated>2016-08-04T18:49:08+01:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2016-08-04:/2016/08/04/tinkering-with-openlayers-and-js-cajal-a-hacked-up-neuroscience-research-map.html</id><summary type="html">&lt;p class="first last"&gt;I was tinkering with &lt;a class="reference external" href="https://www.javascript.com/"&gt;JavaScript&lt;/a&gt; and &lt;a class="reference external" href="http://openlayers.org/"&gt;OpenLayers&lt;/a&gt; recently and came up with a web application that shows the different Neuroscience labs on the world and some summary information on them. Still needs a lot of data to be really useful, but it's a start.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I was a bit fed up with the various minute issues my simulations kept throwing at me and decided I needed a distraction to keep me from completely burning out. Research is hard work, and sometimes we hit solid walls where no progress seems possible. I haven't hit one yet, but I was beginning to see that my performance had begun to drop. The simplest answer to this situation is to take a holiday - a change of scenery. Unfortunately, I haven't any plans to take one at the moment. I've never understood the appeal of wandering around crowded cities with throngs of tourists anyway. Instead, I decided to set my simulations aside for a few days and tinker with other things for a bit.&lt;/p&gt;
&lt;p&gt;I decided to take up a short &amp;quot;passion project&amp;quot;. It needed to be something that would keep me occupied for a few days at the most. I'd tinkered with &lt;a class="reference external" href="http://openlayers.org/"&gt;OpenLayers&lt;/a&gt; before and I'd been meaning to brush up on my &lt;a class="reference external" href="https://www.javascript.com/"&gt;JavaScript&lt;/a&gt; recently seeing as how it's become quite a dominant scripting language. So I thought up a simple web application that would use the two to do something useful.&lt;/p&gt;
&lt;div class="section" id="cajal"&gt;
&lt;h2&gt;Cajal&lt;/h2&gt;
&lt;p&gt;To start with, the app needs to have a name. I've come up with some unique ones before (&lt;a class="reference external" href="http://ankursinha.in/blog/tag/zaphod/"&gt;Zaphod&lt;/a&gt;, &lt;a class="reference external" href="http://ankursinha.in/blog/tag/calliope/"&gt;Calliope&lt;/a&gt;). This time I decided to pay homage to &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Santiago_Ram%C3%B3n_y_Cajal"&gt;Santiago Ramón y Cajal&lt;/a&gt; who is considered the father of modern neuroscience. There are multiple applications called Cajal already, but not too many of them seem to be related to neuroscience. Unique enough, then.&lt;/p&gt;
&lt;p&gt;Cajal is a simple web page that shows a world map. On this map are markers that denote different neuroscience laboratories. The markers are clickable, so when you click one of these, some information about the laboratory is displayed below the map - the principal investigator, the website address, and the sort. I've only managed to add a few laboratories to it now, but I've hosted a working demo &lt;a class="reference external" href="http://ankursinha.in/cajal-map/"&gt;here&lt;/a&gt;. The screenshot below shows what it looks like.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://ankursinha.in/images/20160804-cajal.png"&gt;&lt;img alt="Screenshot of Cajal web application" class="align-center" src="http://ankursinha.in/images/20160804-cajal.png" style="height: 400.0px;" /&gt;&lt;/a&gt;
&lt;p&gt;The code is quite simple. The data is stored in a &lt;code&gt;yaml&lt;/code&gt; file at &lt;code&gt;data/groups.yaml&lt;/code&gt;. The Python script &lt;code&gt;bin/populate_map.py&lt;/code&gt; takes this file and generates a &lt;a class="reference external" href="https://www.javascript.com/"&gt;JavaScript&lt;/a&gt; file with functions to set up the map, overlay the markers, and assign them all &lt;code&gt;singleclick&lt;/code&gt; events that display information - &lt;code&gt;js/cajal.js&lt;/code&gt;. The main &lt;code&gt;index.html&lt;/code&gt; file uses this JavaScript file to show a map and the markers with their associated information.&lt;/p&gt;
&lt;p&gt;Maybe there is a better, less hacky, way of going about it, but this works for a quick two day project. In the future, maybe I can use a server side database and so on - it depends on how much it needs to scale. I know my shared hosting account can't handle all that!&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/sanjayankur31/cajal/"&gt;source code is available on Github&lt;/a&gt;. To add more laboratories, entries need to be added to the &lt;code&gt;data/groups.yaml&lt;/code&gt; file - that's all. If you're a neuroscience researcher and want to add to the map, please open pull requests and I can then periodically regenerate the page as required.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Community"></category><category term="Computational neuroscience"></category><category term="Fedora"></category><category term="Programming"></category><category term="Python"></category><category term="OpenLayers"></category><category term="JavaScript"></category><category term="Cajal"></category></entry></feed>