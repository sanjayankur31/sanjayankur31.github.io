<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>ankursinha.in/blog - Bash</title><link href="http://ankursinha.in/" rel="alternate"></link><link href="http://ankursinha.in/feeds/tags/bash.atom.xml" rel="self"></link><id>http://ankursinha.in/</id><updated>2017-12-25T01:16:02+00:00</updated><subtitle>neuroscience/fedora/musings</subtitle><entry><title>Managing tasks, time, and making sure one takes a break: Integrating Taskwarrior, Timewarrior, and Gnome Pomodoro</title><link href="http://ankursinha.in/2017/12/25/managing-tasks-time-and-making-sure-one-takes-a-break-integrating-taskwarrior-timewarrior-and-gnome-pomodoro.html" rel="alternate"></link><published>2017-12-25T01:16:02+00:00</published><updated>2017-12-25T01:16:02+00:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2017-12-25:/2017/12/25/managing-tasks-time-and-making-sure-one-takes-a-break-integrating-taskwarrior-timewarrior-and-gnome-pomodoro.html</id><summary type="html">&lt;p class="first last"&gt;As the amount of work increases, it becomes ever so more important to
manage time and work in an efficient way. So, there's &lt;a class="reference external" href="https://taskwarrior.org/"&gt;Taskwarrior&lt;/a&gt;
for managing tasks, &lt;a class="reference external" href="https://timewarrior.net/"&gt;Timewarrior&lt;/a&gt; for tracking them, and &lt;a class="reference external" href="http://gnomepomodoro.org/"&gt;Gnome
Pomodoro&lt;/a&gt; for making sure one takes regular breaks and doesn't let
the long hours affect their health in a bad way.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;With the new year, come resolutions. On many a list will there be a
determination to do better in the coming year, to be more organised, more
efficient, more productive.&lt;/p&gt;
&lt;p&gt;I'm quite organised myself. I have lists, calendars, reminders, budgets, and
all of that. Being a FOSS person, my first thought, inevitably, is to see if
there's a piece of software that would aid me.&lt;/p&gt;
&lt;p&gt;This post documents how one can get &lt;a class="reference external" href="https://taskwarrior.org/"&gt;Taskwarrior&lt;/a&gt;, &lt;a class="reference external" href="https://timewarrior.net/"&gt;Timewarrior&lt;/a&gt;, and &lt;a class="reference external" href="http://gnomepomodoro.org/"&gt;Gnome
Pomodoro&lt;/a&gt; to work together to manage tasks, track them, and break those long
hours into smaller bits with regular breaks.&lt;/p&gt;
&lt;div class="section" id="taskwarrior-helps-manage-tasks"&gt;
&lt;h2&gt;Taskwarrior helps manage tasks&lt;/h2&gt;
&lt;p&gt;For managing tasks, there's the rather excellent &lt;a class="reference external" href="https://taskwarrior.org/"&gt;Taskwarrior&lt;/a&gt;. It's command
line, and there are various user interfaces that have been developed for it
too. (&lt;a class="reference external" href="https://tasktools.org/projects/vit.html"&gt;Vit&lt;/a&gt; is one that provides a terminal interface with &lt;a class="reference external" href="https://vim.org"&gt;Vim&lt;/a&gt; like
keybindings, and there's a &lt;a class="reference external" href="https://github.com/blindFS/vim-taskwarrior"&gt;Vim plugin&lt;/a&gt; too.) One can even set up a
&lt;a class="reference external" href="https://taskwarrior.org/"&gt;Taskwarrior&lt;/a&gt; server to sync the data between different machines. There are a
few hosted services that give free &lt;a class="reference external" href="https://taskwarrior.org/"&gt;Taskwarrior&lt;/a&gt; server accounts too. Perhaps
the best bit, is excellent documentation.  &lt;a class="reference external" href="https://taskwarrior.org/"&gt;Taskwarrior&lt;/a&gt; really does make it
easy to &lt;a class="reference external" href="https://taskwarrior.org/news/news.20150627.html"&gt;get things done&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="timewarrior-tracks-time-spent-on-tasks"&gt;
&lt;h2&gt;Timewarrior tracks time spent on tasks&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://taskwarrior.org/"&gt;Taskwarrior&lt;/a&gt; is not meant to be a time tracker, and upstream says so quite
plainly. In fact, upstream went ahead and wrote &lt;a class="reference external" href="https://timewarrior.net/"&gt;Timewarrior&lt;/a&gt; for that purpose
entirely. Like &lt;a class="reference external" href="https://taskwarrior.org/"&gt;Taskwarrior&lt;/a&gt;, &lt;a class="reference external" href="https://timewarrior.net/"&gt;Timewarrior&lt;/a&gt; is also a command line tool.&lt;/p&gt;
&lt;p&gt;Integrating the two is quite easy, using a &lt;a class="reference external" href="https://taskwarrior.org/"&gt;Taskwarrior&lt;/a&gt; hook, as &lt;a class="reference external" href="https://taskwarrior.org/docs/timewarrior/taskwarrior.html"&gt;documented
here&lt;/a&gt;. Each time
a task is started, or stopped in &lt;a class="reference external" href="https://taskwarrior.org/"&gt;Taskwarrior&lt;/a&gt;, the hook calls &lt;a class="reference external" href="https://timewarrior.net/"&gt;Timewarrior&lt;/a&gt; to
start or stop tracking the task too.&lt;/p&gt;
&lt;p&gt;Note: to ensure that this hook is run before the &lt;a class="reference external" href="http://gnomepomodoro.org/"&gt;Gnome Pomodoro&lt;/a&gt; hook that we
set up in the next section, please save the hook file as
&lt;code&gt;~/.task/hooks/on-modify.00-timewarrior&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gnome-pomodoro-reminds-us-to-take-regular-breaks"&gt;
&lt;h2&gt;Gnome Pomodoro reminds us to take regular breaks&lt;/h2&gt;
&lt;p&gt;So, one can manage tasks, and track the time spent working on them, and that's
great. It was sufficient for me for quite a while, before I realised that I was
spending too much time at my desk. What made it worse was the realisation that
for us white collar professionals, a majority of our lives will be spent at a
desk typing away on a computer. There's enough research to show that spending
all those long hours working in a seated position is bad for one's health.&lt;/p&gt;
&lt;p&gt;So, I went looking for the changes I should make to my work regime, and ran
into the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Pomodoro_Technique"&gt;Pomodoro&lt;/a&gt; technique. The idea is to take short breaks at regular
intervals. One can use these to get up and walk around a bit, get them 10,000
steps! There are plenty of tools that implement the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Pomodoro_Technique"&gt;Pomodoro&lt;/a&gt; technique. A
simple timer works too. The one I settled on is &lt;a class="reference external" href="http://gnomepomodoro.org/"&gt;Gnome Pomodoro&lt;/a&gt; which
integrates really well with Gnome Shell. Every 25 minutes, it'll remind the
user to take a 5 minute break.&lt;/p&gt;
&lt;p&gt;Now, let us integrate &lt;a class="reference external" href="http://gnomepomodoro.org/"&gt;Gnome Pomodoro&lt;/a&gt; with both &lt;a class="reference external" href="https://taskwarrior.org/"&gt;Taskwarrior&lt;/a&gt; and &lt;a class="reference external" href="https://timewarrior.net/"&gt;Timewarrior&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;When a task is started using &lt;code&gt;task &amp;lt;filter&amp;gt; start&lt;/code&gt;, &lt;a class="reference external" href="https://taskwarrior.org/"&gt;Taskwarrior&lt;/a&gt;
already begins to track it using the hook, and a Pomodoro should also be
started.&lt;/li&gt;
&lt;li&gt;When a Pomodoro is over and &lt;a class="reference external" href="http://gnomepomodoro.org/"&gt;Gnome Pomodoro&lt;/a&gt; notifies of a break,
&lt;a class="reference external" href="https://timewarrior.net/"&gt;Timewarrior&lt;/a&gt; should be paused too.&lt;/li&gt;
&lt;li&gt;When the break is over, and another Pomodoro starts, &lt;a class="reference external" href="https://timewarrior.net/"&gt;Timewarrior&lt;/a&gt; should
resume tracking the task.&lt;/li&gt;
&lt;li&gt;When a task is stopped, &lt;a class="reference external" href="https://taskwarrior.org/"&gt;Taskwarrior&lt;/a&gt; will stop tracking it via the hook
already, and the Pomodoro should be stopped as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a very simple set up. A task must be started using &lt;a class="reference external" href="https://taskwarrior.org/"&gt;Taskwarrior&lt;/a&gt; here,
and each time &lt;a class="reference external" href="http://gnomepomodoro.org/"&gt;Gnome Pomodoro&lt;/a&gt; pauses and resumes from breaks, the same task
will be resumed unless it was stopped and another started.&lt;/p&gt;
&lt;p&gt;It turned out to be quite easy because of how well these three tools have been
designed. Here's a &lt;a class="reference external" href="https://taskwarrior.org/"&gt;Taskwarrior&lt;/a&gt; hook for &lt;a class="reference external" href="http://gnomepomodoro.org/"&gt;Gnome Pomodoro&lt;/a&gt; similar to the one
for &lt;a class="reference external" href="https://timewarrior.net/"&gt;Timewarrior&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="ch"&gt;#!/usr/bin/env python2&lt;/span&gt;
&lt;span class="c1"&gt;# API is here: https://taskwarrior.org/docs/hooks.html&lt;/span&gt;
&lt;span class="c1"&gt;# To be saved at ~/.task/hooks/on-modify.01-gnome-pomodoro to ensure it is&lt;/span&gt;
&lt;span class="c1"&gt;# run after the timewarrior hook, which should be saved as&lt;/span&gt;
&lt;span class="c1"&gt;# ~/.task/hooks/on-modify.00-timewarrior&lt;/span&gt;
&lt;span class="c1"&gt;# Otherwise, this is run before which then runs the Gnome-Pomodoro actions&lt;/span&gt;
&lt;span class="c1"&gt;# things get quite messy!&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="c1"&gt;# Make no changes to the task, simply observe.&lt;/span&gt;
&lt;span class="n"&gt;old&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# Start pomodoro when task is started&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;'start'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s1"&gt;'start'&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gnome-pomodoro --start'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Stop pomodoro when a task is stopped&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s1"&gt;'start'&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s1"&gt;'start'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gnome-pomodoro --stop'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It's called when a task is modified. It checks the old and new states. If a
task is started, it starts &lt;code&gt;gnome-pomodoro&lt;/code&gt;, and when it's stopped, it
stops it. This is one direction.&lt;/p&gt;
&lt;p&gt;The other direction requires some tinkering with &lt;a class="reference external" href="http://gnomepomodoro.org/"&gt;Gnome Pomodoro&lt;/a&gt; to set up
custom scripts. In the preferences, one must enable the &amp;quot;Custom actions&amp;quot;
plugin:&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="http://ankursinha.in/images/20171225-gnome-pomodoro-plugins.png"&gt;&lt;img alt="A screenshot showing the plugin preferences in Gnome Pomodoro." src="http://ankursinha.in/images/20171225-gnome-pomodoro-plugins.png" style="height: 300.0px;" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;Then, a &amp;quot;Custom Actions&amp;quot; entry will be added to the preferences. We need to add
two of them. The first, resumes &lt;a class="reference external" href="https://timewarrior.net/"&gt;Timewarrior&lt;/a&gt; tracking when the Pomodoro
resumes:&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="http://ankursinha.in/images/20171225-gnome-pomodoro-action-resume-timew.png"&gt;&lt;img alt="A screenshot showing custom action that will resume timew after a break." src="http://ankursinha.in/images/20171225-gnome-pomodoro-action-resume-timew.png" style="height: 300.0px;" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;Similarly, the second stops &lt;a class="reference external" href="https://timewarrior.net/"&gt;Timewarrior&lt;/a&gt; when a break begins, or the user
pauses the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Pomodoro_Technique"&gt;Pomodoro&lt;/a&gt;:&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="http://ankursinha.in/images/20171225-gnome-pomodoro-action-stop-timew.png"&gt;&lt;img alt="A screenshot showing custom action that will stop timew at the start of a break." src="http://ankursinha.in/images/20171225-gnome-pomodoro-action-stop-timew.png" style="height: 300.0px;" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;(If no tasks are active, &lt;a class="reference external" href="https://timewarrior.net/"&gt;Timewarrior&lt;/a&gt; doesn't do anything, so that case does
not need to be handled separately.)&lt;/p&gt;
&lt;p&gt;There are certain &lt;a class="reference external" href="https://github.com/codito/gnome-pomodoro/issues/275#issuecomment-282494447"&gt;limitations to what commands can go in there&lt;/a&gt;,
so I've used a shell script to implement the required logic:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="ch"&gt;#!/bin/bash
&lt;/span&gt;&lt;span class="c1"&gt;# save as ~/bin/track-timew.sh
# note that ~/bin/ must be in PATH
&lt;/span&gt;
resume &lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    timew &lt;span class="o"&gt;||&lt;/span&gt; timew &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

pause &lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    timew &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; timew stop
&lt;span class="o"&gt;}&lt;/span&gt;

clean &lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# sed only does greedy regex so it's slightly complicated
&lt;/span&gt;    &lt;span class="c1"&gt;# could use perl to make this a lot simpler because perl does non
&lt;/span&gt;    &lt;span class="c1"&gt;# greedy too.
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; entry in &lt;span class="k"&gt;$(&lt;/span&gt;timew summary :ids &lt;span class="p"&gt;|&lt;/span&gt; grep -o &lt;span class="s1"&gt;'&amp;#64;.*'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed -E &lt;span class="s1"&gt;'s/(^&amp;#64;[[:digit:]]+[[:space:]]+)/\1 |/'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed -E &lt;span class="s1"&gt;'s/([[:digit:]]+:[[:digit:]]+:[[:digit:]]+ )/| \1/'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;'s/|.*|//'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed -E &lt;span class="s1"&gt;'s/[[:space:]]{2,}/ /'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; cut -d &lt;span class="s1"&gt;' '&lt;/span&gt; -f &lt;span class="m"&gt;1&lt;/span&gt;,4 &lt;span class="p"&gt;|&lt;/span&gt; grep -E &lt;span class="s1"&gt;'0:0[01]:..'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; cut -d &lt;span class="s1"&gt;' '&lt;/span&gt; -f &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tr &lt;span class="s1"&gt;'\n'&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; timew delete &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$entry&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

usage &lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="s2"&gt;: wrapper script around timewarrior to carry out common tasks&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;For use with Gnome-Pomodoro's action plugin&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Usage: &lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="s2"&gt; &amp;lt;option&amp;gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;OPTIONS:&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-r    resume tracking of most recently tracked task&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-p    pause tracking&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-c    clean up short tasks (less than 2 minutes long)&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# check for options
&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$#&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -eq &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    usage
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c1"&gt;# parse options
&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;getopts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rpch&amp;quot;&lt;/span&gt; OPTION
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$OPTION&lt;/span&gt; in
        r&lt;span class="o"&gt;)&lt;/span&gt;
            resume
            &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
            &lt;span class="p"&gt;;;&lt;/span&gt;
        p&lt;span class="o"&gt;)&lt;/span&gt;
            pause
            &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
            &lt;span class="p"&gt;;;&lt;/span&gt;
        c&lt;span class="o"&gt;)&lt;/span&gt;
            clean
            &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
            &lt;span class="p"&gt;;;&lt;/span&gt;
        h&lt;span class="o"&gt;)&lt;/span&gt;
            usage
            &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
            &lt;span class="p"&gt;;;&lt;/span&gt;
        ?&lt;span class="o"&gt;)&lt;/span&gt;
            usage
            &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
            &lt;span class="p"&gt;;;&lt;/span&gt;
    &lt;span class="k"&gt;esac&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The script is quite simple, and I hope, self-explanatory too. I'll leave
interpretation of the &lt;code&gt;clean&lt;/code&gt; function to the reader ;)&lt;/p&gt;
&lt;p&gt;That's all there is to it. There must be other ways of doing the same thing,
possibly with different tools too, but this system required least changes to my
current workflow. Do remember that these tools can only aid us. It is us that
need to show that bit of discipline to follow the plan through. I hope some
will find it helpful, and may the new year be healthier and more productive for
us all! :)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Tech"></category><category term="Bash"></category><category term="Fedora"></category><category term="Timewarrior"></category><category term="Taskwarrior"></category><category term="Pomodoro"></category><category term="Gnome-Pomodoro"></category><category term="Time management"></category></entry><entry><title>Fedora Classroom: Command Line 101: report</title><link href="http://ankursinha.in/2017/08/10/fedora-classroom-command-line-101-report.html" rel="alternate"></link><published>2017-08-10T23:03:24+01:00</published><updated>2017-08-10T23:03:24+01:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2017-08-10:/2017/08/10/fedora-classroom-command-line-101-report.html</id><summary type="html">&lt;p class="first last"&gt;I taught a &lt;a class="reference external" href="https://fedoraproject.org/wiki/Classroom"&gt;Fedora classroom&lt;/a&gt; session today - &amp;quot;Command Line 101&amp;quot; - where I introduced the command line and demonstrated how useful the command line is. This is a quick summary of the session.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;We've gotten the &lt;a class="reference external" href="https://fedoraproject.org/wiki/Classroom"&gt;Fedora classroom&lt;/a&gt; sessions going again. After two really good ones, I taught the &lt;a class="reference external" href="https://fedoramagazine.org/fedora-classroom-session-3/"&gt;third one&lt;/a&gt; today - a beginners session to the command line. Unlike the previous ones that used video platforms, I decided that the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Internet_Relay_Chat"&gt;IRC&lt;/a&gt; was best suited to this session, even more so because I wanted it to be a hands-on session. It went off pretty well. Here are a few notes. Links to the logs are at the bottom of this post.&lt;/p&gt;
&lt;div class="section" id="some-metrics"&gt;
&lt;h2&gt;Some metrics&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Length: 2 hours (was planned to be an hour, but we quickly realised that it wouldn't be enough!)&lt;/li&gt;
&lt;li&gt;Attendees: 29 - a few of us had FAS usernames too (so we shared cookies!)&lt;/li&gt;
&lt;li&gt;About 800 sentences were spoken (I spoke about half of these, of course)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;I quite enjoyed it, but then I enjoy tinkering with the command line anyway. A few folks stuck around for the full two hours, so that does indicate that they found the session somewhat useful. I'd put up a &lt;a class="reference external" href="https://gist.github.com/sanjayankur31/f40070c6925e8885394d2dd750ae4cb8"&gt;gist here with a tentative agenda&lt;/a&gt;. We didn't manage to go more than half way through it, though. We:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;did a quick introduction to what a shell is&lt;/li&gt;
&lt;li&gt;learned how to get help using local information - using the man pages&lt;/li&gt;
&lt;li&gt;quickly saw the difference between absolute and relative paths, and also learned about &lt;code&gt;..&lt;/code&gt; and &lt;code&gt;.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;went on to look at some more basic commands/built-ins and their switches/flags/options: &lt;code&gt;ls, apropos, clear, cd, pwd, which, alias, rm, tree, mkdir, wget, rmdir, rm, fpaste, wc, head, tail, more, less, cat, tac, grep, sort, uniq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;used these commands to download a copy of &lt;a class="reference external" href="http://www.gutenberg.org/cache/epub/1120/pg1120.txt"&gt;&amp;quot;The tragedy of Julius Caesar&amp;quot; from Project Gutenberg&lt;/a&gt;, and then extracted some information from it. For example, we obtained how many times Caesar was mentioned in the text. For a more advanced task we also obtained how many times Caesar, Brutus, Cassius, and Casca were each mentioned using a single set of commands. This required the use of &lt;code&gt;grep, sort, uniq, wc&lt;/code&gt; in different combinations using input-output redirection (pipes in this case). At no point did we use a text editor, and we stuck to using local man pages.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="takeaways"&gt;
&lt;h2&gt;Takeaways&lt;/h2&gt;
&lt;p&gt;I hope that this rather quick session gave the participants some idea of how the shell can be used for lots of tasks. I also hoped to show them that there's a lot of information available on the system itself that a user can refer to.&lt;/p&gt;
&lt;p&gt;I learned a few things myself. I learned that an hour is too short for a proper online session, for example. My supposition that demonstrating commands using tasks would make the session more appealing seems to have been correct too. Only, maybe next time I'll pick a more contemporary text?&lt;/p&gt;
&lt;p&gt;For the next session, I'll try and cover slightly more advanced topics, such as tests, loops, maybe even a bit of awk. We shall see.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="feedback-is-always-welcome"&gt;
&lt;h2&gt;Feedback is always welcome&lt;/h2&gt;
&lt;p&gt;If you had attended the session, or have gone through the logs and have some feedback, please get in touch. You can use the Fedora classroom channels:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="mailto:classroom&amp;#64;lists.fedoraproject.org"&gt;mailing list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;#fedora-classroom on Freenode &lt;a class="reference external" href="http://webchat.freenode.net/?channels=%23fedora-classroom"&gt;IRC channel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can even comment on this blog post, and of course, you can give me feedback privately. I'm also looking to make a list of tasks that I can use in future sessions - tasks that would be useful, fun, and that would also require some command line tricks - such that they would demonstrate the power of the command line. So, if you have your pet command line tricks/aliases, please do get in touch.&lt;/p&gt;
&lt;p&gt;I'm FranciscoD on quite a few Fedora IRC channels, and I can be reached via e-mail on my Fedora address at ankursinha AT fedoraproject DOT org. All suggestions, comments, criticism is most welcome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="more-instructors-needed"&gt;
&lt;h2&gt;More instructors needed!&lt;/h2&gt;
&lt;p&gt;The classroom sessions are going rather well, but &lt;a class="reference external" href="https://fedoraproject.org/wiki/Classroom#Help_wanted"&gt;we still need more help&lt;/a&gt;. We need more people helping with logistics, and of course, if we are to continue these sessions every week, we need more instructors! If there's anything at all you think is worth a classroom session, please get in touch with the team on the &lt;a class="reference external" href="mailto:classroom&amp;#64;lists.fedoraproject.org"&gt;Fedora classroom mailing list&lt;/a&gt;. A log of all past sessions - whether on &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Internet_Relay_Chat"&gt;IRC&lt;/a&gt; or on a video platform are maintained on the wiki page &lt;a class="reference external" href="https://fedoraproject.org/wiki/Classroom#Previous_Sessions"&gt;here&lt;/a&gt; for everyone to peruse at their convenience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="logs"&gt;
&lt;h2&gt;Logs&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://meetbot.fedoraproject.org/fedora-classroom/2017-08-10/%22fedora_classroom_-_command_line_101%22.2017-08-10-13.00.log.html"&gt;HTML logs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://meetbot.fedoraproject.org/fedora-classroom/2017-08-10/%22fedora_classroom_-_command_line_101%22.2017-08-10-13.00.txt"&gt;Text minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://meetbot.fedoraproject.org/fedora-classroom/2017-08-10/%22fedora_classroom_-_command_line_101%22.2017-08-10-13.00.html"&gt;HTML minutes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Tech"></category><category term="Bash"></category><category term="Blog"></category><category term="Community"></category><category term="Linux"></category><category term="Planet"></category><category term="Fedora"></category></entry><entry><title>Some tips and tricks for running simulations on a cluster</title><link href="http://ankursinha.in/2016/05/31/some-tips-and-tricks-for-running-simulations-on-a-cluster.html" rel="alternate"></link><published>2016-05-31T19:17:32+01:00</published><updated>2016-05-31T19:17:32+01:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2016-05-31:/2016/05/31/some-tips-and-tricks-for-running-simulations-on-a-cluster.html</id><summary type="html">&lt;p class="first last"&gt;I use the cluster here at university to run my simulations in &lt;a class="reference external" href="https://github.com/nest/nest-simulator"&gt;Nest&lt;/a&gt;. This post documents some tips and tricks I've come up with to make my cluster tasks easier.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;To begin with, you must use a terminal multiplexer! I use &lt;a class="reference external" href="http://byobu.org/"&gt;Byobu with tmux&lt;/a&gt; to multiplex a single SSH session. I use it on all my machines. It's an excellent tool.&lt;/p&gt;
&lt;div class="section" id="monitoring-your-jobs"&gt;
&lt;h2&gt;Monitoring your jobs&lt;/h2&gt;
&lt;p&gt;Three of my Byobu screens run these commands to monitor the queue and my jobs:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
watch -n &lt;span class="m"&gt;30&lt;/span&gt; qstat main
watch -n &lt;span class="m"&gt;30&lt;/span&gt; qstat -B
watch -n &lt;span class="m"&gt;30&lt;/span&gt; /usr/local/maui/bin/showq -u asinha
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;showq&lt;/code&gt; may be installed elsewhere. Use &lt;code&gt;which showq&lt;/code&gt; to locate it. More information on the commands can be found in their manuals:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
man watch
man qstat
&lt;/pre&gt;
&lt;p&gt;Remember, to find a man page, you can use the &lt;code&gt;apropos&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;I run all my simulations in a specific directory on the shared data disk. I usually also monitor this folder. It gives me an idea of how much my simulations have progressed. Something like this works:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
watch -n &lt;span class="m"&gt;30&lt;/span&gt; &lt;span class="s1"&gt;'du -sch *'&lt;/span&gt; &lt;span class="c1"&gt;# in the directory that stores simulation results*&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="use-git"&gt;
&lt;h2&gt;Use Git&lt;/h2&gt;
&lt;p&gt;Of course. If you make frequent changes, you must use a version control system. I stick to &lt;code&gt;git&lt;/code&gt; myself. You can use &lt;code&gt;svn&lt;/code&gt; or &lt;code&gt;hg&lt;/code&gt; if you wish - whatever floats your boat.&lt;/p&gt;
&lt;p&gt;An issue I've stumbled upon while working with the cluster is that the program you want it to run is not loaded into memory until your job begins to run. So, if you want to run a certain version of your program on the cluster, say some version_1, you must not make any changes to this version until the queued job has begun to run. This is extremely inconvenient, especially if you make frequent changes to your simulations, as is often the case in research. I would, for example, like to queue separate jobs in parallel for a myriad of tiny changes and then compare results.&lt;/p&gt;
&lt;p&gt;Enter &lt;a class="reference external" href="https://git-scm.com/docs/git-worktree"&gt;git work-tree&lt;/a&gt;! The simplest solution to the aforementioned issue is to checkout different work-trees for commits you want to test and queue up jobs for each individually. This would work really well. Once the simulation finishes, you can remove the work-tree.&lt;/p&gt;
&lt;p&gt;Unfortunately, clusters usually run stable long term support oriented versions of Linux distributions - EL/CentOS/Scientific. As a result, it's quite probable that the version of git on the cluster doesn't support work-trees - as is the case with the cluster I use. I came up with a workaround which works somewhat like work-trees - I manually clone my source repository to a temporary location, checkout the commit I want to run (which is what work-trees sort of are), and set up a job that runs this particular simulation version. It uses two scripts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A template PBS script for the simulation run. This will be passed to &lt;code&gt;qsub&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A script that clones my repo, checks out the required commit, completes the template script, and calls &lt;code&gt;qsub&lt;/code&gt; to queue up the job.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first is a simple PBS script:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# File: run-sim.sh
&lt;/span&gt;
&lt;span class="c1"&gt;#PBS -l walltime=48:00:00
#PBS -l nodes=50
#PBS -m abe
#PBS -N nest_v_s
&lt;/span&gt;
module unload mpi/mpich-x86_64
module load mvapich2-1.7

&lt;span class="nv"&gt;SIM_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/stri-data/asinha/simulations-nest/&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;SIM_TIME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;PROGRAM_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SIM_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SIM_TIME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;/Sinha2016/src/Sinha2016.py&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;RESULT_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SIM_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SIM_TIME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;/result/&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;NUM_NODES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; ------------------------------------------------------
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Job is running on nodes'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; cat &lt;span class="nv"&gt;$PBS_NODEFILE&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; ------------------------------------------------------
&lt;span class="nb"&gt;echo&lt;/span&gt; PBS: qsub is running on &lt;span class="nv"&gt;$PBS_O_HOST&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; PBS: originating queue is &lt;span class="nv"&gt;$PBS_O_QUEUE&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; PBS: executing queue is &lt;span class="nv"&gt;$PBS_QUEUE&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; PBS: working directory is &lt;span class="nv"&gt;$PBS_O_WORKDIR&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; PBS: execution mode is &lt;span class="nv"&gt;$PBS_ENVIRONMENT&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; PBS: job identifier is &lt;span class="nv"&gt;$PBS_JOBID&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; PBS: job name is &lt;span class="nv"&gt;$PBS_JOBNAME&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; PBS: node file is &lt;span class="nv"&gt;$PBS_NODEFILE&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; PBS: current home directory is &lt;span class="nv"&gt;$PBS_O_HOME&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; PBS: &lt;span class="nv"&gt;PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$PBS_O_PATH&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; ------------------------------------------------------

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ANKUR&amp;gt;&amp;gt; Begun at &lt;/span&gt;&lt;span class="nv"&gt;$SIM_TIME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ANKUR&amp;gt;&amp;gt; Script: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

mkdir -pv &lt;span class="nv"&gt;$RESULT_PATH&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$RESULT_PATH&lt;/span&gt;

/usr/local/bin/mpiexec -n &lt;span class="nv"&gt;$NUM_NODES&lt;/span&gt; python &lt;span class="nv"&gt;$PROGRAM_PATH&lt;/span&gt;

&lt;span class="nv"&gt;END_TIME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date +%Y%m%d%H%M&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ANKUR&amp;gt;&amp;gt; Ended at &lt;/span&gt;&lt;span class="nv"&gt;$END_TIME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It sets up the required PBS options, then loads the MPI module I wish to use. It creates a directory where my simulation's results will be stored, enters it, and then uses &lt;code&gt;mpiexec&lt;/code&gt; to run my Python program.&lt;/p&gt;
&lt;p&gt;The second script is a wrapper that clones the required commit, sets up the correct paths in the above script and the calls &lt;code&gt;qsub&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# File: setup-job.sh
&lt;/span&gt;
&lt;span class="nv"&gt;SOURCE_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home/asinha/Documents/02_Code/00_repos/00_mine/Sinha2016/&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;GIT_COMMIT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;SIM_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/stri-data/asinha/simulations-nest/&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;SIM_TIME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date +%Y%m%d%H%M&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;RUN_SCRIPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;scripts/cluster/nest-runsim.sh&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;RUN_NEW&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;ERROR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;no&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;NUM_NODES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;
&lt;span class="nv"&gt;CUR_SIM_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; queue_task
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;pushd&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$CUR_SIM_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        qsub &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$RUN_NEW&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;popd&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; setup_env
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;CUR_SIM_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SIM_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SIM_TIME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;This simulation will run in: &lt;/span&gt;&lt;span class="nv"&gt;$CUR_SIM_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    mkdir -pv &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$CUR_SIM_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

    &lt;span class="nb"&gt;pushd&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$CUR_SIM_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Cloning source repository...&amp;quot;&lt;/span&gt;
        git clone &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SOURCE_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Sinha2016&amp;quot;&lt;/span&gt;

        &lt;span class="nb"&gt;pushd&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Sinha2016&amp;quot;&lt;/span&gt;
            &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Checking out commit &lt;/span&gt;&lt;span class="nv"&gt;$GIT_COMMIT&lt;/span&gt;&lt;span class="s2"&gt;...&amp;quot;&lt;/span&gt;
            git checkout -b this_sim &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$GIT_COMMIT&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -ne &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;then&lt;/span&gt;
                &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Error occured. Could not checkout &lt;/span&gt;&lt;span class="nv"&gt;$GIT_COMMIT&lt;/span&gt;&lt;span class="s2"&gt;. Exiting...&amp;quot;&lt;/span&gt;
                &lt;span class="nv"&gt;ERROR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;yes&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;fi&lt;/span&gt;
        &lt;span class="nb"&gt;popd&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xyes&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;  x&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$ERROR&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;then&lt;/span&gt;
            &lt;span class="nb"&gt;exit&lt;/span&gt; -1
        &lt;span class="k"&gt;fi&lt;/span&gt;

        &lt;span class="nv"&gt;RUN_NEW&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;nest_&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$GIT_COMMIT&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;.sh&amp;quot;&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Setting up &lt;/span&gt;&lt;span class="nv"&gt;$RUN_NEW&lt;/span&gt;&lt;span class="s2"&gt;...&amp;quot;&lt;/span&gt;
        cp &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SOURCE_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$RUN_SCRIPT&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$RUN_NEW&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -v
        sed -i &lt;span class="s2"&gt;&amp;quot;s|nest_v_s|nest_&lt;/span&gt;&lt;span class="nv"&gt;$GIT_COMMIT&lt;/span&gt;&lt;span class="s2"&gt;|&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$RUN_NEW&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        sed -i &lt;span class="s2"&gt;&amp;quot;s|nodes=.*|nodes=&lt;/span&gt;&lt;span class="nv"&gt;$NUM_NODES&lt;/span&gt;&lt;span class="s2"&gt;|&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$RUN_NEW&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        sed -i &lt;span class="s2"&gt;&amp;quot;s|NUM_NODES=.*|NUM_NODES=&lt;/span&gt;&lt;span class="nv"&gt;$NUM_NODES&lt;/span&gt;&lt;span class="s2"&gt;|&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$RUN_NEW&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        sed -i &lt;span class="s2"&gt;&amp;quot;s|SIM_TIME=.*|SIM_TIME=&lt;/span&gt;&lt;span class="nv"&gt;$SIM_TIME&lt;/span&gt;&lt;span class="s2"&gt;|&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$RUN_NEW&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;popd&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; usage
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Usage: &lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Queue up a job to run a particular git commit&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="s2"&gt; &amp;lt;git_commit&amp;gt; &amp;lt;number_nodes&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$#&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -ne &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Error occurred. Exiting...&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Received &lt;/span&gt;&lt;span class="nv"&gt;$#&lt;/span&gt;&lt;span class="s2"&gt; arguments. Expected: 3&amp;quot;&lt;/span&gt;
    usage
    &lt;span class="nb"&gt;exit&lt;/span&gt; -1
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nv"&gt;GIT_COMMIT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;NUM_NODES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
setup_env
queue_task

&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This takes two arguments, as the &lt;code&gt;usage&lt;/code&gt; function will tell you. The first argument is the commit you want to run the simulation for, and the second is the number of nodes you want to use. It'll clone your repository to a temporary location and checkout this specified commit. Then, it'll modify the first script &lt;code&gt;run-sim.sh&lt;/code&gt; to set up the correct path to the code and also correctly specify the number of nodes you'd want to request. Finally, once all this is done, it'll call &lt;code&gt;qsub run-sim.sh&lt;/code&gt; to queue up your job. I use unique date stamps as directory names to distinguish between simulation runs, but you can use another unique identifier.&lt;/p&gt;
&lt;p&gt;Now, this copy of your code, at the specified commit will be used for the job you've queued. You can merrily go about tinkering with the main source repo without affecting queued up jobs. Yay!&lt;/p&gt;
&lt;p&gt;Even though I've used Python here, you can use similar scripts for compiled languages. You'll simply have to compile your executable after you checkout the required commit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-miscellaneous-stuff"&gt;
&lt;h2&gt;Other miscellaneous stuff&lt;/h2&gt;
&lt;p&gt;My lab mate, Alex, recently introduced me to &lt;a class="reference external" href="https://www.continuum.io/downloads"&gt;Anaconda&lt;/a&gt;. It's a great tool for that lets you install packages in your user specific directory. It contains quite a few python and other related packages. No need to use &lt;code&gt;sudo&lt;/code&gt; with it, and you can use &lt;code&gt;pip&lt;/code&gt; etc. with it too. It even lets you set up virtual environments and things.&lt;/p&gt;
&lt;p&gt;I think that's it for today. I'll update the post with other things I find/learn as I continue my adventures with the cluster.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Research"></category><category term="Bash"></category><category term="Computational neuroscience"></category><category term="Git"></category><category term="Linux"></category><category term="NEST"></category><category term="Programming"></category><category term="Fedora"></category></entry><entry><title>shell script to get word definitions from dict.org</title><link href="http://ankursinha.in/2010/12/01/shell-script-to-get-word-definitions-from-dict-org.html" rel="alternate"></link><published>2010-12-01T00:18:00+00:00</published><updated>2010-12-01T00:18:00+00:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2010-12-01:/2010/12/01/shell-script-to-get-word-definitions-from-dict-org.html</id><summary type="html">&lt;p&gt;Edit : There's a list of&lt;a class="reference external" href="http://www.dict.org/links.html"&gt;command line clients for dict.org here&lt;/a&gt;
already, came across if &lt;strong&gt;after&lt;/strong&gt; I had written the script. What a pity
:/&lt;/p&gt;
&lt;p&gt;So,&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ su -c  'yum -y install dictd'
$ dict -f fedora
3 definitions found
dict.org        2628    gcide   The Collaborative International Dictionary of English v.0 …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;Edit : There's a list of&lt;a class="reference external" href="http://www.dict.org/links.html"&gt;command line clients for dict.org here&lt;/a&gt;
already, came across if &lt;strong&gt;after&lt;/strong&gt; I had written the script. What a pity
:/&lt;/p&gt;
&lt;p&gt;So,&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ su -c  'yum -y install dictd'
$ dict -f fedora
3 definitions found
dict.org        2628    gcide   The Collaborative International Dictionary of English v.0.48
  fedora fe*do&amp;quot;ra (f[i^]*d[^o]r&amp;quot;[.a]), n.
     A soft felt hat with a crown creased lengthwise.

     Syn: felt hat, homburg, Stetson, trilby.
          [WordNet 1.5]
dict.org        2628    wn      WordNet (r) 2.0
  fedora
       n : felt hat with a creased crown [syn: {felt hat}, {homburg}, {Stetson},
            {trilby}]
dict.org        2628    gazetteer       U.S. Gazetteer (1990)
  Fedora, SD
    Zip code(s): 57337
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Cheers!&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;---------&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Developers are lazy. Recently, I had published a post on &lt;a class="reference external" href="http://dodoincfedora.wordpress.com/2010/11/22/note-to-self-command-line-text-utils/"&gt;command line
text utils&lt;/a&gt;. One of the utils was to use &lt;strong&gt;curl&lt;/strong&gt;to access the
&lt;a class="reference external" href="http://dict.org"&gt;dict.org&lt;/a&gt; database. I got bored of using the command again and again,
so I chucked it into a shell script. It's highly rudimentary, and
doesn't validate or check for errors etc. yet, but works.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#!/bin/bash

# Copyright 2010 Ankur Sinha
# Author: Ankur Sinha
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;
#
# File : dict_org : A simple shell script to get definitions from dict.org
#
# TODOS :   - add error handling for output
#                 - structure output

main()
{

    # check if curl is installed
    if [ ! -f /usr/bin/curl ] ; then
        echo -e &amp;quot;This script requires curl to function.nPlease use your
package manager and install curl.nOn a Fedora system, run:
$ su -c 'yum install curl'&amp;quot;
        exit 2
    fi

    # get definition
    definition=$( curl -s dict://dict.org/d:&amp;quot;$1&amp;quot;)

    echo &amp;quot;$definition&amp;quot; | more

    exit 0
}

# check for correct usage
if [ $# -ne 1 ] ; then
    echo -e &amp;quot;Usage : $0  nThis shell script takes only one argument,
the word you want to look up at dict.org&amp;quot;
    exit 1
fi

main $1
&lt;/pre&gt;
&lt;p&gt;I've also uploaded it &lt;a class="reference external" href="http://ankursinha.fedorapeople.org/dict_org.sh"&gt;here&lt;/a&gt;&lt;/p&gt;
</content><category term="Tech"></category><category term="Bash"></category></entry></feed>