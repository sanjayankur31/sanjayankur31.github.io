<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>ankursinha.in/blog - Pelican</title><link href="https://ankursinha.in/" rel="alternate"/><link href="https://ankursinha.in/feeds/tags/pelican.atom.xml" rel="self"/><id>https://ankursinha.in/</id><updated>2015-09-15T17:53:08+01:00</updated><subtitle>neuroscience/fedora/musings</subtitle><entry><title>Pelican and github pages - a quickstart</title><link href="https://ankursinha.in/2015/09/15/pelican-and-github-pages-a-quickstart.html" rel="alternate"/><published>2015-09-15T17:53:08+01:00</published><updated>2015-09-15T17:53:08+01:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2015-09-15:/2015/09/15/pelican-and-github-pages-a-quickstart.html</id><summary type="html">&lt;p class="first last"&gt;A quick post on how to get started with Pelican using Github pages.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;A &lt;strong&gt;really&lt;/strong&gt; quick howto !&lt;/p&gt;
&lt;div class="section" id="set-up-a-github-io-page"&gt;
&lt;h2&gt;Set up a github.io page&lt;/h2&gt;
&lt;p&gt;To create your github user page, head over to github and create two new repositories - username.github.io-src and username.github.io - &lt;a class="reference external" href="https://pages.github.com/"&gt;as explained here&lt;/a&gt;. The src repository will hold the sources of your blog and the username.github.io repository will contain the output html files that pelican generates. Since we're going to add the output directory as a submodule, &lt;strong&gt;initialise it with a readme&lt;/strong&gt; - I can't seem to add a bare git repository as a submodule in a simple way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install-pelican"&gt;
&lt;h2&gt;Install Pelican&lt;/h2&gt;
&lt;p&gt;On Fedora, this is a very very simple command:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
sudo&lt;span class="w"&gt; &lt;/span&gt;dnf&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;python-pelican
&lt;/pre&gt;
&lt;p&gt;If you aren't on a Fedora system, you'll have to install these packages another way, like with &lt;cite&gt;pip&lt;/cite&gt;. I'd suggest using a virtualenv, but it's up to you:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
virtualenv&lt;span class="w"&gt; &lt;/span&gt;blog_virt&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;blog_virt&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bin/activate&lt;span class="w"&gt;

&lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pelican&lt;span class="w"&gt; &lt;/span&gt;ghp-import&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;#then change to your git repository and continue&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="set-up-the-blog-with-pelican"&gt;
&lt;h2&gt;Set up the blog with pelican&lt;/h2&gt;
&lt;p&gt;Pelican provides an excellent quickstart command. Double check that you're working in the source git repository using:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
git&lt;span class="w"&gt; &lt;/span&gt;remote&lt;span class="w"&gt; &lt;/span&gt;-v
&lt;/pre&gt;
&lt;p&gt;Then, clone the output repository as a git submodule:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
git&lt;span class="w"&gt; &lt;/span&gt;submodule&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;git&amp;#64;github.com:sanjayankur31/sanjayankur31.github.io.git&lt;span class="w"&gt; &lt;/span&gt;output&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;#replace the URL with the correct one.&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Then, run:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
pelican-quickstart
&lt;/pre&gt;
&lt;p&gt;It'll ask you various questions, just answer them. If you're using the latest version of Pelican, it'll ask you if you want to use github pages and so on.&lt;/p&gt;
&lt;p&gt;Open the &lt;cite&gt;publishconf.py&lt;/cite&gt; file and set the &lt;cite&gt;DELETE_OUTPUT_DIRECTORY&lt;/cite&gt; variable to False. Otherwise, each time you publish, it deletes your submodule - we don't want that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tweaks"&gt;
&lt;h2&gt;Tweaks&lt;/h2&gt;
&lt;p&gt;There are various &lt;a class="reference external" href="https://github.com/getpelican/pelican/wiki/Tips-n-Tricks"&gt;tweaks and tips&lt;/a&gt; mentioned here that you should look at. One of the more handy ones is the addition of a newpost command in the Makefile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="first-post"&gt;
&lt;h2&gt;First post&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.getpelican.com/en/3.6.3/content.html"&gt;Write a quick post&lt;/a&gt;!!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="build-commit-push-and-you-re-done"&gt;
&lt;h2&gt;Build, commit, push, and you're done!&lt;/h2&gt;
&lt;p&gt;Once done, you build your blog and check if everything is OK:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
make&lt;span class="w"&gt; &lt;/span&gt;html&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;make&lt;span class="w"&gt; &lt;/span&gt;serve&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;#creates a demo site and serves it on localhost:8000&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This runs a local webserver on port 8000 - &lt;a class="reference external" href="http://localhost:8000"&gt;direct your browser there&lt;/a&gt; to see the results of your work!
If everything is OK, generate the website, add your files, commit them, and push to your repositories:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
make&lt;span class="w"&gt; &lt;/span&gt;publish&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;#creates the complete site
&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c1"&gt;# Commit to the output submodule first
&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;output&lt;span class="w"&gt;
&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt;
&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;First post.&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;master&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c1"&gt;# The commit the source repository
&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;..&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'*.pyc'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;.gitignore&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;#don't need pyc files
&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt;
&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;First commit.&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;master&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c1"&gt;# Sources committed&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;That's all! Head over the username.github.io and see the new site you've just created!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="caveats-and-customisations"&gt;
&lt;h2&gt;Caveats and customisations&lt;/h2&gt;
&lt;p&gt;Everything can be pretty much customised in Pelican. To start with, there are &lt;a class="reference external" href="http://pelicanthemes.com"&gt;a set of themes that you can choose from&lt;/a&gt;. On top of that, you even have &lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins"&gt;a set of plug-ins&lt;/a&gt; that help you add various functionalities to your site. Of course, you can write your own or customise existing plugins and themes.&lt;/p&gt;
&lt;p&gt;There's a tool called ghp-pages that the pelican documentation refers to, but as of Pelican 3.6.3 which Fedora 22 features, the tool doesn't work as described in the documentation. It's why I used the submodule method.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Tech"/><category term="Fedora"/><category term="Pelican"/><category term="Programming"/><category term="Social"/></entry><entry><title>[How to] set up your Pelican based static blog</title><link href="https://ankursinha.in/2015/03/02/howto-pelican.html" rel="alternate"/><published>2015-03-02T10:39:00+00:00</published><updated>2015-03-02T10:39:00+00:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2015-03-02:/2015/03/02/howto-pelican.html</id><summary type="html">&lt;p class="first last"&gt;A quick note on how you can set up a static blog like mine using Pelican.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;In my last post, I mentioned that I had moved to a Pelican based blog. In this post, I'll document how I did this, for myself as a future reference and for others that might be looking for a resource. &lt;strong&gt;Yet another howto&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;I'm using a &lt;a class="reference external" href="http://fedoraproject.org"&gt;Fedora&lt;/a&gt; system, but you can use another Linux (or not) distribution too. Pelican is written in Python, so it should be easily usable on any system that has Python on it. This guide will limit itself to Fedora.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Pelican is available in the Fedora repositories:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;yum&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;python-pelican
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Git and a &lt;a class="reference external" href="http://github.com"&gt;Github&lt;/a&gt; account&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Your favourite text editor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Your hosting space - of course&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="steps"&gt;
&lt;h2&gt;Steps&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Create a new repository on github and clone it. This will hold the source files for your posts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;To create a skeleton file, you can use the &lt;cite&gt;pelican-quickstart&lt;/cite&gt; command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;This sets up your directory structure, like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;tree&lt;span class="w"&gt; &lt;/span&gt;-L&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="go"&gt;.&lt;/span&gt;
&lt;span class="go"&gt;├── content&lt;/span&gt;
&lt;span class="go"&gt;├── develop_server.sh&lt;/span&gt;
&lt;span class="go"&gt;├── fabfile.py&lt;/span&gt;
&lt;span class="go"&gt;├── Makefile&lt;/span&gt;
&lt;span class="go"&gt;├── output&lt;/span&gt;
&lt;span class="go"&gt;├── pelicanconf.py&lt;/span&gt;
&lt;span class="go"&gt;├── pelican-plugins&lt;/span&gt;
&lt;span class="go"&gt;├── publishconf.py&lt;/span&gt;
&lt;span class="go"&gt;├── README.md&lt;/span&gt;
&lt;span class="go"&gt;└── voidy-bootstrap&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The content directory will contain the source files. You can either use &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/user/rst/quickref.html"&gt;rst&lt;/a&gt; or &lt;a class="reference external" href="http://daringfireball.net/projects/markdown/syntax"&gt;markdown&lt;/a&gt; to write them. The output directory will contain the files pelican generates. The readme file is one that you'll set up, just for your github repo. voidy-boostrap is a theme I'm using and pelican-plugins is the plugins repository. More on these later.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;All you need to do is write a hello world post. Something like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;Hello World&lt;/span&gt;
&lt;span class="gh"&gt;###########&lt;/span&gt;

&lt;span class="nc"&gt;:date:&lt;/span&gt; 2015-03-02 10:39
&lt;span class="nc"&gt;:tags:&lt;/span&gt; Pelican, Wordpress
&lt;span class="nc"&gt;:category:&lt;/span&gt; Tech
&lt;span class="nc"&gt;:slug:&lt;/span&gt; hello-world
&lt;span class="nc"&gt;:author:&lt;/span&gt; ankur
&lt;span class="nc"&gt;:lang:&lt;/span&gt; en

Hello World!
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;To &lt;em&gt;compile&lt;/em&gt; this, you run &lt;cite&gt;make html&lt;/cite&gt; and then &lt;cite&gt;make serve&lt;/cite&gt; to take a look at your post (Direct your browser to &lt;cite&gt;localhost:8000&lt;/cite&gt;). By default, it'll look quite simple. You can use &lt;a class="reference external" href="https://github.com/getpelican/pelican-themes"&gt;pelican-themes&lt;/a&gt; to change how your stuff looks. They also have a set of &lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins"&gt;plugins&lt;/a&gt; you can use.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="importing-from-wordpress"&gt;
&lt;h2&gt;Importing from Wordpress&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Pelican &lt;a class="reference external" href="http://docs.getpelican.com/en/3.5.0/importer.html"&gt;provides a tool&lt;/a&gt; that lets you import your wordpress blog into it: &lt;cite&gt;pelican-import&lt;/cite&gt;. It's far from perfect, though, so you're probably going to need to work on your posts before you publish. &lt;cite&gt;sed is quite useful&lt;/cite&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;More links that you can look at:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.getpelican.com/en/latest/content.html"&gt;http://docs.getpelican.com/en/latest/content.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html"&gt;http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pygments.org/docs/formatters/"&gt;http://pygments.org/docs/formatters/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.getpelican.com/en/latest/quickstart.html"&gt;http://docs.getpelican.com/en/latest/quickstart.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anyway, have fun with it - my blog now is blazing quick!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Tech"/><category term="Pelican"/><category term="Wordpress"/></entry><entry><title>Moved my blog to Pelican</title><link href="https://ankursinha.in/2015/03/01/moved-to-pelican.html" rel="alternate"/><published>2015-03-01T21:15:00+00:00</published><updated>2015-03-01T21:15:00+00:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2015-03-01:/2015/03/01/moved-to-pelican.html</id><summary type="html">&lt;p class="first last"&gt;Shared hosting has limited resources, and Wordpress is heavy. The solution? A brilliant static blog using Pelican!&lt;/p&gt;
</summary><content type="html">&lt;p&gt;For a while now, I've been having trouble with my shared hosting and the wordpres instance I was using. I hadn't realised how limited the resources of a shared hosting set up are. It used to work just fine and then my blog started going down regularly. After a lengthy conversation with the support team, and no resolution, I decided to move to a static page based blog. Of the many options, I decided on &lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;. It's really easy to set up and of course the site is now super quick to load.&lt;/p&gt;
&lt;p&gt;I've just &lt;a class="reference external" href="http://docs.getpelican.com/en/3.5.0/importer.html"&gt;imported all my wordpress data&lt;/a&gt; and a lot of work still needs to be done to correct my previous posts - broken links and missing images for example. I'll do it over time. I've also combined my research and normal blogs now to use Pelican's category feature.&lt;/p&gt;
&lt;p&gt;Guess this calls for yet another &amp;quot;&lt;strong&gt;Hello World!&lt;/strong&gt;&amp;quot;&lt;/p&gt;
</content><category term="Tech"/><category term="Pelican"/><category term="Wordpress"/></entry></feed>