<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>ankursinha.in/blog - LaTeX</title><link href="http://ankursinha.in/" rel="alternate"></link><link href="http://ankursinha.in/feeds/tags/latex.atom.xml" rel="self"></link><id>http://ankursinha.in/</id><updated>2017-09-19T00:40:41+01:00</updated><entry><title>Writing LaTeX well in Vim</title><link href="http://ankursinha.in/2017/09/19/writing-latex-well-in-vim.html" rel="alternate"></link><published>2017-09-19T00:40:41+01:00</published><updated>2017-09-19T00:40:41+01:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2017-09-19:/2017/09/19/writing-latex-well-in-vim.html</id><summary type="html">&lt;p class="first last"&gt;&lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;Vim&lt;/a&gt; is a great text editor and &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; is a great document writing system. Since I write a lot of &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; for my research, I've been adding various &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;Vim&lt;/a&gt; plug-ins to make my writing easier over the years. This post documents some of these additions.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;Vim&lt;/a&gt; is a great text editor if one takes a bit of time to learn how to use it properly. There's quite enough documentation on how to use &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;Vim&lt;/a&gt; correctly, and efficiently so I shan't cover that here. &lt;code&gt;vimtutor&lt;/code&gt; is an excellent resource to begin at.&lt;/p&gt;
&lt;p&gt;Similarly, &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; is a &lt;a class="reference external" href="https://www.google.co.uk/search?hl=en-GB&amp;amp;q=why+use+latex+for+writing"&gt;brilliant documentation system&lt;/a&gt;, especially for scientific writing if one takes the time to learn it. Unlike the usual Microsoft Word type systems, &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; is a set of commands/macros. Once the document is written using these, it must be compiled to produce a PDF document. It may appear daunting at first, but after one is familiar with it, it makes writing a breeze. Now, there are a editors especially designed for &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt;, but given that I use &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;Vim&lt;/a&gt; for about all my writing, I use it for &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; too.&lt;/p&gt;
&lt;p&gt;On Fedora, you can install &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;Vim&lt;/a&gt; using &lt;a class="reference external" href="https://github.com/rpm-software-management/dnf"&gt;DNF&lt;/a&gt;: &lt;code&gt;sudo dnf install vim-enhanced vim-X11&lt;/code&gt;. I install the X11 package too to &lt;a class="reference external" href="http://vim.wikia.com/wiki/Accessing_the_system_clipboard"&gt;use the system clipboard&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="latex-tools"&gt;
&lt;h2&gt;LaTeX tools&lt;/h2&gt;
&lt;p&gt;To begin with, there are a few command line commands that one can use other than the necessary &lt;code&gt;latex&lt;/code&gt;, &lt;code&gt;pdflatex&lt;/code&gt;, &lt;code&gt;bibtex&lt;/code&gt;, &lt;code&gt;biber&lt;/code&gt;, and so on commands:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;latexmk&lt;/code&gt; is a great tool that figures out the compilation sequence required to generate the document, and it does it for you.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lacheck&lt;/code&gt; and &lt;code&gt;chktex&lt;/code&gt; are both linters for &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; that make writing a lot easier.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;detex&lt;/code&gt; strips a tex document of &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; commands to produce only the text bits.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;diction&lt;/code&gt;, and &lt;code&gt;style&lt;/code&gt; give the &lt;a class="reference external" href="https://www.linux.com/news/improve-your-writing-gnu-style-checkers"&gt;author an idea of the readability of the text&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One can use any text editor and then these utilities to improve their &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; writing experience.&lt;/p&gt;
&lt;p&gt;On Fedora, install these with &lt;a class="reference external" href="https://github.com/rpm-software-management/dnf"&gt;DNF&lt;/a&gt;: &lt;code&gt;sudo dnf install latexmk /usr/bin/lacheck /usr/bin/chktex /usr/bin/detex diction&lt;/code&gt;. (Yes, you can tell &lt;a class="reference external" href="https://github.com/rpm-software-management/dnf"&gt;DNF&lt;/a&gt; what file you want to install too!)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="built-in-vim-features"&gt;
&lt;h2&gt;Built-in Vim features&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;Vim&lt;/a&gt; already contains quite a few features that make writing quite easy;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://vim.wikia.com/wiki/Omni_completion"&gt;Omni completion&lt;/a&gt; provides good suggestions based on the text under the cursor.&lt;/li&gt;
&lt;li&gt;There's in-built &lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/spell.html"&gt;spell checking&lt;/a&gt; already.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/fold.html"&gt;Folding&lt;/a&gt; logical bits makes the document easier to read and navigate through.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/syntax.html"&gt;Syntax highlighting&lt;/a&gt; makes it a lot easier to read code by marking different commands in different colours.&lt;/li&gt;
&lt;li&gt;There are different flavours of &lt;a class="reference external" href="https://jeffkreeftmeijer.com/vim-number/"&gt;linenumbers&lt;/a&gt; that make moving about a document much simpler.&lt;/li&gt;
&lt;li&gt;At some point, the &lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/syntax.html#conceal"&gt;conceal&lt;/a&gt; feature was added that further improves readability of documents&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/windows.html#windows"&gt;Buffers, tabs, windows&lt;/a&gt; are available in &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;Vim&lt;/a&gt; too, of course.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="vim-plug-ins"&gt;
&lt;h2&gt;Vim plug-ins&lt;/h2&gt;
&lt;p&gt;There are a lot of &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;Vim&lt;/a&gt; plug-ins that extend some functionality or the other. The simplest way to install plug-ins is to use &lt;a class="reference external" href="https://github.com/VundleVim/Vundle.vim"&gt;Vundle&lt;/a&gt;. Here are some plug-ins that I use. They're not all specific to &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Konfekt/FastFold"&gt;Fastfold&lt;/a&gt; makes folding faster.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/sheerun/vim-polyglot"&gt;vim-polyglot&lt;/a&gt; provides better syntax highlighting for a many languages.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/vim-airline/vim-airline"&gt;vim-airline&lt;/a&gt; provides an excellent, informative status line.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/majutsushi/tagbar"&gt;tagbar&lt;/a&gt; lists sections (tags in general) in a different pane.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/altercation/vim-colors-solarized"&gt;vim-colors-solarized&lt;/a&gt; provides the solarized themes for &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;Vim&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/lervag/vimtex"&gt;vimtex&lt;/a&gt; provides commands to quickly compile &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; files, complete references, citations, navigate quicker, view the generated files, and so on.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/SirVer/ultisnips"&gt;ultisnips&lt;/a&gt; provides lots of snippets for many languages, including &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt;. Get the snippets from the &lt;a class="reference external" href="https://github.com/honza/vim-snippets"&gt;vim-snippets&lt;/a&gt; plug-in.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Valloric/YouCompleteMe"&gt;YouCompleteMe&lt;/a&gt; is a completion engine that supports many languages. Remember that this one needs to be compiled!&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/vim-syntastic/syntastic/"&gt;Syntastic&lt;/a&gt; provides syntax checkers for many languages, including &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've also used &lt;a class="reference external" href="https://github.com/vim-latex/vim-latex"&gt;vim-latex&lt;/a&gt; in the past and it's very very good. However, since I have other plug-ins that provide the various functionality that it brings together for many other languages too, I'm no longer using it. Worth a go, though.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="an-example-document"&gt;
&lt;h2&gt;An example document&lt;/h2&gt;
&lt;p&gt;The image below shows a &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; file open in &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;Vim&lt;/a&gt; with different plug-ins in action:&lt;/p&gt;
&lt;center&gt;&lt;a class="reference external image-reference" href="http://ankursinha.in/images/20170919-latex-vim.png"&gt;&lt;img alt="Screenshot of Vim with a LaTeX file open showing various features." class="align-center" src="http://ankursinha.in/images/20170919-latex-vim.png" style="height: 480.0px;" /&gt;&lt;/a&gt;
&lt;/center&gt;&lt;ul class="simple"&gt;
&lt;li&gt;On top, one can see the open buffer. Only one buffer is open at the moment.&lt;/li&gt;
&lt;li&gt;In the left hand side margin, one can see the fold indicators.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;S&amp;gt;&lt;/code&gt; bit is an indicator from the linter that Syntastic uses, showing a warning or an error.&lt;/li&gt;
&lt;li&gt;The line numbers are also visible in the left margin. Since I am in insert mode, they're just plain line numbers. Once one leaves insert mode, they change to relative.&lt;/li&gt;
&lt;li&gt;On line 171, the conceal feature shows Greek symbols instead of their &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; commands.&lt;/li&gt;
&lt;li&gt;Syntax highlighting is clearly visible. The commands have different colours. This is the solarized dark theme, of course.&lt;/li&gt;
&lt;li&gt;The &amp;quot;pop-up&amp;quot; shows Ultisnips at work. Here, I'm looking at adding a new equation environment.&lt;/li&gt;
&lt;li&gt;Underneath the pop up, the dashed line is a folded section. The &lt;code&gt;+&lt;/code&gt; symbol in the left margin implies that it is folded.&lt;/li&gt;
&lt;li&gt;In the status line, one can see that spell check is enabled, and that I'm using the &lt;code&gt;en_gb&lt;/code&gt; language.&lt;/li&gt;
&lt;li&gt;Next, the git status, and the git branch I'm in. That's the &lt;a class="reference external" href="https://github.com/tpope/vim-fugitive"&gt;vim-fugitive&lt;/a&gt; plug-in at work.&lt;/li&gt;
&lt;li&gt;Then, the filetype, the encoding, the number of words and so on provided by the airline plug-in.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Neat, huh? There is a lot more there that isn't easy to show in a screen-shot. For example, &lt;code&gt;\ll&lt;/code&gt; will compile the &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; file; &lt;code&gt;\lv&lt;/code&gt; opens the generated PDF file in a PDF viewer, Evince in my case; &lt;code&gt;\lc&lt;/code&gt; will clean the directory of any temporary files that were generated while compiling the document.&lt;/p&gt;
&lt;p&gt;I keep all my &lt;a class="reference external" href="https://github.com/sanjayankur31/vimfiles"&gt;vimfiles on Github&lt;/a&gt;. Feel free to take a look and derive your own. I tweak my configuration each time I find something new, though, so it may change rather frequently. Remember to read the documentation for whatever plug-ins in use. They provide a lot of options, lots of shortcuts, lots of other commands, and sometimes setting them up incorrectly can cause vim to behave in unexpected ways.&lt;/p&gt;
&lt;p&gt;TL;DR: Use &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;Vim&lt;/a&gt;, and use &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt;!!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Calliope"></category><category term="Fedora"></category><category term="Free software"></category><category term="LaTeX"></category><category term="Vim"></category></entry><entry><title>Checking your LaTeX sources for spelling errors with Hunspell</title><link href="http://ankursinha.in/2016/06/02/checking-your-latex-sources-for-spelling-errors-with-hunspell.html" rel="alternate"></link><published>2016-06-02T11:42:00+01:00</published><updated>2016-06-02T11:42:00+01:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2016-06-02:/2016/06/02/checking-your-latex-sources-for-spelling-errors-with-hunspell.html</id><summary type="html">&lt;p class="first last"&gt;For command line users that write in &lt;a class="reference external" href="https://latex-project.org/intro.html"&gt;LaTeX&lt;/a&gt;, &lt;a class="reference external" href="http://hunspell.github.io/"&gt;Hunspell&lt;/a&gt; is a great tool to check spellings.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I usually use &lt;a class="reference external" href="http://www.vim.org/"&gt;Vim&lt;/a&gt; and a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Makefile"&gt;Makefile&lt;/a&gt; when writing LaTeX documents. Even though &lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/spell.html"&gt;Vim does permit you to check your spellings&lt;/a&gt;, it's always nice to run the entire text through a standalone spell checker before passing your documents on to others.&lt;/p&gt;
&lt;p&gt;The workflow is quite simple. Once you've written your text, you commit your changes, and then you can use one of either &lt;a class="reference external" href="http://aspell.net/"&gt;Aspell&lt;/a&gt; or &lt;a class="reference external" href="http://hunspell.github.io/"&gt;Hunspell&lt;/a&gt; to check your text for spelling errors. Both provide an interactive interface that makes them easy to use.&lt;/p&gt;
&lt;p&gt;On &lt;a class="reference external" href="http://getfedora.org"&gt;Fedora&lt;/a&gt;, you can install them using &lt;code&gt;dnf&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
sudo dnf install aspell hunspell
&lt;/pre&gt;
&lt;p&gt;You'll also need to make sure you have the language files installed:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
sudo dnf install aspell-en hunspell-en
&lt;/pre&gt;
&lt;p&gt;Then, to check all your &lt;code&gt;.tex&lt;/code&gt; files, you can use something like this:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
find . -name &lt;span class="s2"&gt;&amp;quot;*.tex&amp;quot;&lt;/span&gt; -exec aspell --lang&lt;span class="o"&gt;=&lt;/span&gt;en --mode&lt;span class="o"&gt;=&lt;/span&gt;tex check &lt;span class="s2"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt; &lt;span class="c1"&gt;# Aspell
&lt;/span&gt;find . -name &lt;span class="s2"&gt;&amp;quot;*.tex&amp;quot;&lt;/span&gt; -exec hunspell -t -i utf-8 &lt;span class="s1"&gt;'{}'&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt; &lt;span class="c1"&gt;# Hunspell&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I looked around a bit, and decided to use &lt;a class="reference external" href="http://hunspell.github.io/"&gt;Hunspell&lt;/a&gt;. It's used by LibreOffice, Firefox, and other applications. I commit my work first and then run the above command which opens a window like this:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://ankursinha.in/images/hunspell-example.png"&gt;&lt;img alt="Hunspell screenshot" src="http://ankursinha.in/images/hunspell-example.png" style="width: 750px;" /&gt;&lt;/a&gt;
&lt;p&gt;Once you've gone through it and made your changes, you can then use &lt;code&gt;git diff --word-diff&lt;/code&gt; to review your changes. If you'd like to undo some of them, use &lt;code&gt;git add -i&lt;/code&gt; and so on:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://ankursinha.in/images/git-word-diff.png"&gt;&lt;img alt="Git diff screenshot" src="http://ankursinha.in/images/git-word-diff.png" style="width: 750px;" /&gt;&lt;/a&gt;
&lt;p&gt;That's it! Happy writing!&lt;/p&gt;
</content><category term="Fedora"></category><category term="Git"></category><category term="LaTeX"></category><category term="Linux"></category><category term="Vim"></category></entry><entry><title>My business card in LaTeX</title><link href="http://ankursinha.in/2016/03/13/my-business-card-in-latex.html" rel="alternate"></link><published>2016-03-13T18:30:33+00:00</published><updated>2016-03-13T18:30:33+00:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2016-03-13:/2016/03/13/my-business-card-in-latex.html</id><summary type="html">&lt;p class="first last"&gt;I finally found the time to make myself a business card, and of course, I did it in LaTeX.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I've been meaning to get myself some business cards - they're really helpful to give out when you meet new people - prospective collaborators and things. People rarely note down contact details - the business card works well as a handy reminder. I don't know how common it is for people in academia to have them - I've seen a few around, and I've also seen folks that don't have them. Anyway, I thought I'd give it a go in LaTeX to see how difficult it is. Turns out, not difficult at all. I found a &lt;a class="reference external" href="http://blog.widmann.org.uk/2009/05/27/1297/"&gt;post that got me started&lt;/a&gt;, and after a few hours of tinkering, I've come up with this:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://ankursinha.in/images/20160313-businesscard.png"&gt;&lt;img alt="My new businesscard" class="align-center" src="http://ankursinha.in/images/20160313-businesscard.png" /&gt;&lt;/a&gt;
&lt;p&gt;The sources are &lt;a class="reference external" href="https://github.com/sanjayankur31/latex-businesscard"&gt;here on Github&lt;/a&gt;, so feel free to use them to make your own.&lt;/p&gt;
</content><category term="Fedora"></category><category term="LaTeX"></category></entry><entry><title>Calliope - helping you keep a diary - in LaTeX!</title><link href="http://ankursinha.in/2016/03/05/calliope-helping-you-keep-a-diary-in-latex.html" rel="alternate"></link><published>2016-03-05T14:07:52+00:00</published><updated>2016-03-05T14:07:52+00:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2016-03-05:/2016/03/05/calliope-helping-you-keep-a-diary-in-latex.html</id><summary type="html">&lt;p class="first last"&gt;Most researchers keep a research journal where we note down our musings, notes and so on. While a paper diary is still quite common, I'd really prefer something on my laptop/computer. There are various applications out there for journal writing, but none of them really match up to good old &lt;a class="reference external" href="https://en.wikibooks.org/wiki/LaTeX"&gt;LaTeX&lt;/a&gt;. I've written a simple script that makes it really easy to maintain a journal using LaTeX - &lt;a class="reference external" href="https://github.com/sanjayankur31/calliope"&gt;Calliope&lt;/a&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Quite a few people write personal diaries - researchers tend to also keep research diaries where we note our generally brilliant ideas. I've used &lt;a class="reference external" href="http://lifeograph.sourceforge.net/wiki/Main_Page"&gt;Lifeograph&lt;/a&gt; for a number of years now. It's a great application with all the right features that a diary needs - chapters, tags, and  metrics. It doesn't quite work for a &lt;em&gt;research diary&lt;/em&gt;, though - it doesn't support maths notation for a start, and we really do write a lot of very complicated maths from time to time. (The kinds with lots of symbols you see in the films? Think &amp;quot;&lt;a class="reference external" href="http://www.imdb.com/title/tt0268978/"&gt;A beautiful mind&lt;/a&gt;&amp;quot;.)&lt;/p&gt;
&lt;p&gt;The simple solution, of course, is &lt;a class="reference external" href="http://lifeograph.sourceforge.net/wiki/Main_Page"&gt;LaTeX&lt;/a&gt;. &lt;a class="reference external" href="http://lifeograph.sourceforge.net/wiki/Main_Page"&gt;LaTeX&lt;/a&gt; is used extensively in academic writing. While it does have a reputation for being complex and complicated (&lt;a class="reference external" href="http://english.stackexchange.com/questions/10459/what-is-the-difference-between-complicated-and-complex"&gt;YES! There's a difference in the two words - they're not interchangeable!&lt;/a&gt;) at times, it is by far the best tool for academic writing. It has everything a researcher needs - citation support, can be customised to fit multiple format, and if you pair it with &lt;a class="reference external" href="https://git-scm.com/"&gt;Git&lt;/a&gt; you even have versioning and &lt;a class="reference external" href="http://ankursinha.in/blog/tag/zaphod/"&gt;change tracking&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="calliope"&gt;
&lt;h2&gt;Calliope&lt;/h2&gt;
&lt;p&gt;I went looking for packages that may provide this functionality in &lt;a class="reference external" href="http://lifeograph.sourceforge.net/wiki/Main_Page"&gt;LaTeX&lt;/a&gt; but didn't quite find any that had a convenient workflow and so on. I ran into a &lt;a class="reference external" href="https://github.com/mikhailklassen/research-diary-project"&gt;this Github project&lt;/a&gt; instead, which is a set of templates and scripts that does quite a good job. I've forked it and made some improvements. There's now a single script that takes arguments, for example. I've also added support for indexing - which works similar to tagging - it'll generate a nice clickable index at the end of the document. Of course, I've given it a fancy name, &lt;a class="reference external" href="https://github.com/sanjayankur31/calliope"&gt;Calliope, and put it up on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Usage is quite straightforward:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="o"&gt;[&lt;/span&gt;asinha&amp;#64;cs-as14aho-2-herts-ac-uk  00_research_diary&lt;span class="o"&gt;(&lt;/span&gt;master %&lt;span class="o"&gt;=)]&lt;/span&gt;$ ./calliope.sh -h
    usage: ./calliope.sh options

    Master script file that provides functions to maintain a journal using LaTeX.

    OPTIONS:
    -h  Show this message and quit

    -t  Add new entry &lt;span class="k"&gt;for&lt;/span&gt; today

    -c  Compile today&lt;span class="err"&gt;'&lt;/span&gt;s entry

    -a  &amp;lt;year&amp;gt;
        Year to generate anthology of

    -p  &amp;lt;year&amp;gt;
        Compile all entries in this year

    -s  &amp;lt;entry&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;yyyy-mm-dd&lt;span class="o"&gt;)&lt;/span&gt;
        Compile specific entry
&lt;/pre&gt;
&lt;p&gt;This is what the directory structure looks like:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="o"&gt;[&lt;/span&gt;asinha&amp;#64;cs-as14aho-2-herts-ac-uk  00_research_diary&lt;span class="o"&gt;(&lt;/span&gt;master %&lt;span class="o"&gt;=)]&lt;/span&gt;$ tree
.
├── calliope.sh
├── diary
│&amp;nbsp;&amp;nbsp; ├── &lt;span class="m"&gt;2016&lt;/span&gt;
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── &lt;span class="m"&gt;2016&lt;/span&gt;-03-04.tex
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── &lt;span class="m"&gt;2016&lt;/span&gt;-03-05.tex
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── images
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── research_diary.sty -&amp;gt; ../../templates/research_diary.sty
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── stdp_connection_symmetric.h
│&amp;nbsp;&amp;nbsp; └── research_diary.sty -&amp;gt; ../templates/research_diary.sty
├── pdfs
│&amp;nbsp;&amp;nbsp; └── &lt;span class="m"&gt;2016&lt;/span&gt;
│&amp;nbsp;&amp;nbsp;     ├── &lt;span class="m"&gt;2016&lt;/span&gt;-03-04.pdf
│&amp;nbsp;&amp;nbsp;     └── &lt;span class="m"&gt;2016&lt;/span&gt;-03-05.pdf
├── README.rst
└── templates
    ├── entry.tex
    └── research_diary.sty

        &lt;span class="m"&gt;6&lt;/span&gt; directories, &lt;span class="m"&gt;11&lt;/span&gt; files
&lt;/pre&gt;
&lt;p&gt;The script generates your source &lt;a class="reference external" href="http://lifeograph.sourceforge.net/wiki/Main_Page"&gt;LaTeX&lt;/a&gt; files and puts them in the folders in &lt;tt class="docutils literal"&gt;diary/&lt;/tt&gt;. Then you write up and use the script to compile it - the generated pdfs are collected in the &lt;tt class="docutils literal"&gt;pdfs/&lt;/tt&gt; folder. The script can also generate an anthology for a year you pick. The resultant pdf for a daily entry will look like this:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://ankursinha.in/images/20160305-Calliope.png"&gt;&lt;img alt="Screenshot showing pdf generated by Calliope" class="align-center" src="http://ankursinha.in/images/20160305-Calliope.png" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p&gt;That's pretty much it. Commit your entry to Git and you're done.&lt;/p&gt;
&lt;p&gt;So, give it a go and please &lt;a class="reference external" href="https://github.com/sanjayankur31/calliope/issues/"&gt;file issues&lt;/a&gt; if you have any suggestions that would improve it.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Fedora"></category><category term="Git"></category><category term="LaTeX"></category><category term="Linux"></category><category term="Calliope"></category></entry><entry><title>New Zaphod release - v0.5.7</title><link href="http://ankursinha.in/2016/02/28/new-zaphod-release-v0-5-7.html" rel="alternate"></link><published>2016-02-28T16:52:27+00:00</published><updated>2016-02-28T16:52:27+00:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2016-02-28:/2016/02/28/new-zaphod-release-v0-5-7.html</id><summary type="html">&lt;p class="first last"&gt;I've released a new version of &lt;a class="reference external" href="https://github.com/sanjayankur31/zaphod"&gt;Zaphod&lt;/a&gt; - A LaTeX change tracking tool that I've been working on recently.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://ankursinha.in/2016/02/13/zaphod-a-latex-change-tracking-tool.html"&gt;I'd written about Zaphod recently&lt;/a&gt;. I've been making some tweaks to it - just some enhancements to the revision bit which will make it easier to use. The diff bit is still the same - I didn't see the need to make too many improvements there.&lt;/p&gt;
&lt;div class="section" id="new-revision-bits"&gt;
&lt;h2&gt;New revision bits&lt;/h2&gt;
&lt;p&gt;Now, it looks like this when you start it up:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="o"&gt;[&lt;/span&gt;asinha&amp;#64;cs-as14aho-2-herts-ac-uk  latex-changes&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;201602281328&lt;/span&gt;-latexdiff-annotated&lt;span class="o"&gt;)]&lt;/span&gt;$ python3 ../zaphod/zaphod.py revise -m paper.tex -s src
&lt;span class="o"&gt;[&lt;/span&gt;Zaphod&lt;span class="o"&gt;]&lt;/span&gt; LaTeX files with annotations:
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/discussion.tex
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/introduction.tex
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/paper.tex
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/methods.tex

Pick file to revise? &lt;span class="m"&gt;1&lt;/span&gt;-4/Q/q:
&lt;/pre&gt;
&lt;p&gt;The idea here is that the user should be able to pick what file they want to edit. Previously, Zaphod just went file after file.&lt;/p&gt;
&lt;p&gt;Once you pick a file, it'll look like this:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
....
Pick file to revise? &lt;span class="m"&gt;1&lt;/span&gt;-4/Q/q: &lt;span class="nv"&gt;1&lt;/span&gt;

&lt;span class="o"&gt;======&lt;/span&gt; src/discussion.tex &lt;span class="o"&gt;======&lt;/span&gt;
+++ Addition found +++
&lt;span class="se"&gt;\s&lt;/span&gt;ection&lt;span class="o"&gt;{&lt;/span&gt;Discussion&lt;span class="o"&gt;}&lt;/span&gt;

Add a new file.

+++ Addition found +++
Accept addition? Y/N/Q/y/n/q: y
&lt;span class="o"&gt;[&lt;/span&gt;Zaphod&lt;span class="o"&gt;]&lt;/span&gt; Addition accepted.

&lt;span class="o"&gt;[&lt;/span&gt;Zaphod&lt;span class="o"&gt;]&lt;/span&gt; File src/discussion.tex revised and saved.
&lt;span class="o"&gt;[&lt;/span&gt;Zaphod&lt;span class="o"&gt;]&lt;/span&gt; LaTeX files with annotations:
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/introduction.tex
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/paper.tex
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/methods.tex

Pick file to revise? &lt;span class="m"&gt;1&lt;/span&gt;-3/Q/q:
&lt;/pre&gt;
&lt;p&gt;But, you can also make partial revisions. This is handy in situations where you have a long file and do not have the time to go over all of it at once. So, here's an example. I go over some changes, but I need to stop there for the moment:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
...
&lt;span class="o"&gt;[&lt;/span&gt;Zaphod&lt;span class="o"&gt;]&lt;/span&gt; LaTeX files with annotations:
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/introduction.tex
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/paper.tex
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/methods.tex

Pick file to revise? &lt;span class="m"&gt;1&lt;/span&gt;-3/Q/q: &lt;span class="nv"&gt;2&lt;/span&gt;

&lt;span class="o"&gt;======&lt;/span&gt; src/paper.tex &lt;span class="o"&gt;======&lt;/span&gt;
--- Deletion found ---
Tracking
--- Deletion found ---
Accept deletion? Y/N/Q/y/n/q: y
&lt;span class="o"&gt;[&lt;/span&gt;Zaphod&lt;span class="o"&gt;]&lt;/span&gt; Deletion accepted.

&lt;span class="o"&gt;======&lt;/span&gt; src/paper.tex &lt;span class="o"&gt;======&lt;/span&gt;
+++ Addition found +++
Visualising
+++ Addition found +++
Accept addition? Y/N/Q/y/n/q: y
&lt;span class="o"&gt;[&lt;/span&gt;Zaphod&lt;span class="o"&gt;]&lt;/span&gt; Addition accepted.

&lt;span class="o"&gt;======&lt;/span&gt; src/paper.tex &lt;span class="o"&gt;======&lt;/span&gt;
+++ Addition found +++
&lt;span class="se"&gt;\i&lt;/span&gt;nput&lt;span class="o"&gt;{&lt;/span&gt;discussion&lt;span class="o"&gt;}&lt;/span&gt;

+++ Addition found +++
Accept addition? Y/N/Q/y/n/q: q
Save partial file? Y/N/y/n: y
&lt;span class="o"&gt;[&lt;/span&gt;Zaphod&lt;span class="o"&gt;]&lt;/span&gt; Some files still have latexdiff annotations:
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/introduction.tex
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/methods.tex

Generate pdf? Y/y/N/n: n
&lt;span class="o"&gt;[&lt;/span&gt;Zaphod&lt;span class="o"&gt;]&lt;/span&gt; Not generating pdf.
&lt;span class="o"&gt;[&lt;/span&gt;Zaphod&lt;span class="o"&gt;]&lt;/span&gt; Following files have been revised &lt;span class="o"&gt;(&lt;/span&gt;maybe partially&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/discussion.tex
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; src/paper.tex

Commit current changes? Y/y/N/n: n
&lt;span class="o"&gt;[&lt;/span&gt;Zaphod&lt;span class="o"&gt;]&lt;/span&gt; Exiting without committing.
&lt;/pre&gt;
&lt;p&gt;There's one catch here, though. Because I want to make absolutely sure that Zaphod doesn't make any changes &amp;quot;by mistake&amp;quot;, you'll have to either stash or commit these changes before you can run Zaphod again. This is just to be on the safer side. A better way would probably be for Zaphod to remember what files were partially revised, but I haven't implemented it at the moment. I'd actually just commit the changes - I mean, that's why we've got Git, right?&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="o"&gt;[&lt;/span&gt;asinha&amp;#64;cs-as14aho-2-herts-ac-uk  latex-changes&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;201602281328&lt;/span&gt;-latexdiff-annotated *&lt;span class="o"&gt;)]&lt;/span&gt;$ python3 ../zaphod/zaphod.py revise -m paper.tex -s src
Modifed or untracked files found.
git status output:
 M src/discussion.tex
 M src/paper.tex

Please stash or commit and rerun Zaphod.
&lt;/pre&gt;
&lt;p&gt;That's it. I think it's a lot easier to use now, and in this design addresses a lot more use cases than it did before.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/sanjayankur31/zaphod/releases"&gt;Give it a go&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/sanjayankur31/zaphod/issues/new"&gt;let me know&lt;/a&gt; if things break - I've tested it myself, but only on a mock document.&lt;/p&gt;
&lt;/div&gt;
</content><category term="LaTeX"></category><category term="Programming"></category><category term="Git"></category><category term="Fedora"></category><category term="Zaphod"></category></entry><entry><title>Zaphod - a LaTeX change tracking tool</title><link href="http://ankursinha.in/2016/02/13/zaphod-a-latex-change-tracking-tool.html" rel="alternate"></link><published>2016-02-13T17:16:24+00:00</published><updated>2016-02-13T17:16:24+00:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2016-02-13:/2016/02/13/zaphod-a-latex-change-tracking-tool.html</id><summary type="html">&lt;p class="first last"&gt;Introducing &lt;a class="reference external" href="https://github.com/sanjayankur31/zaphod"&gt;Zaphod&lt;/a&gt; - a &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; script that attempts to help &lt;a class="reference external" href="https://en.wikipedia.org/wiki/LaTeX"&gt;LaTeX&lt;/a&gt; users collaborate over their academic writing. It uses the power of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Git_(software)"&gt;Git&lt;/a&gt; to track changes, &lt;a class="reference external" href="https://www.ctan.org/pkg/latexdiff?lang=en"&gt;latexdiff&lt;/a&gt; to generate a PDF with annotated additions and removals from the document, and provides a simple interactive review tool that lets the user pick what changes they want to accept. You can use Zaphod to track changes in your LaTeX documents.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="the-name"&gt;
&lt;h2&gt;The name&lt;/h2&gt;
&lt;p&gt;Well, I needn't say much here, need I? &lt;a class="reference external" href="https://en.wikipedia.org/wiki/The_Hitchhiker%27s_Guide_to_the_Galaxy"&gt;Hitchhiker's guide to the galaxy&lt;/a&gt;, anyone?&lt;/p&gt;
&lt;p&gt;Of course, a good tip to naming a new open source tool is to pick a project name that is easily searchable. With &lt;a class="reference external" href="https://en.wikipedia.org/wiki/LaTeX"&gt;LaTeX&lt;/a&gt; related searches, it's a tad difficult - the addition of the word to LaTeX to anything tends to generate rather undesirable results. Fortunately, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Zaphod_Beeblebrox"&gt;Zaphod&lt;/a&gt; seems to have been spared the honour..&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="latex-is-great"&gt;
&lt;h2&gt;LaTeX is great!&lt;/h2&gt;
&lt;p&gt;Academics really like &lt;a class="reference external" href="https://en.wikipedia.org/wiki/LaTeX"&gt;LaTeX&lt;/a&gt; - it's a brilliant tool, the best one in my opinion, for academic writing. Using LaTeX is widely accepted to be more complex than using a simple &lt;a class="reference external" href="https://en.wikipedia.org/wiki/WYSIWYG"&gt;WYSIWYG&lt;/a&gt; tool like Word. One writes in plain text using LaTeX constructs and then compiles it to produce a brilliantly formatted PDF. The point of using LaTeX is that you get to focus on the matter - the actual text, and LaTeX largely takes care of the look, the formatting and all that. There are &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Comparison_of_TeX_editors"&gt;quite a few applications&lt;/a&gt; that provide one click compilation and other features, by the way, so you don't absolutely have to use the command line. There's even &lt;a class="reference external" href="https://www.lyx.org/"&gt;Lyx&lt;/a&gt; which is quite close to a WYSIWYG application for LaTeX.&lt;/p&gt;
&lt;div class="section" id="tracking-changes"&gt;
&lt;h3&gt;Tracking changes&lt;/h3&gt;
&lt;p&gt;Another limitation of using LaTeX is that you can't easily see what's changed between versions of PDFs. This makes collaboration using LaTeX difficult.&lt;/p&gt;
&lt;p&gt;Word, for example, has a very useful &amp;quot;&lt;a class="reference external" href="https://support.office.com/en-us/article/Track-changes-while-you-edit-024158a3-7e62-4f05-8bb7-dc3ecf0295c4"&gt;Track changes&lt;/a&gt;&amp;quot; feature that lets you record your changes and then lets the next person easily review them and decide which ones are to be applied.&lt;/p&gt;
&lt;p&gt;There are various tools strewn over the Internet that do help with this, but they aren't quite as convenient as I'd have hoped. Some examples:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.ctan.org/pkg/latexdiff?lang=en"&gt;latexdiff&lt;/a&gt; (Zaphod is based on this and uses it to generate changes - why reinvent the wheel?)&lt;/li&gt;
&lt;li&gt;the &lt;a class="reference external" href="http://www.ctan.org/pkg/changes"&gt;changes&lt;/a&gt; package&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://trackchanges.sourceforge.net/"&gt;track changes&lt;/a&gt; (didn't try this out)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="so-zaphod"&gt;
&lt;h2&gt;So - Zaphod&lt;/h2&gt;
&lt;p&gt;Various editors make writing LaTeX quite easy. That isn't much of an issue any more. Zaphod tries to address the second issue - tracking changes. It combines existing tools to implement a certain workflow where you can write text, send it to people, verify and include their changes.&lt;/p&gt;
&lt;div class="section" id="the-workflow-an-example"&gt;
&lt;h3&gt;The workflow - an example&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create a Git repository for your LaTeX paper.&lt;/li&gt;
&lt;li&gt;Write your draft.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm using a &lt;a class="reference external" href="https://github.com/sanjayankur31/latex-changes"&gt;test repository&lt;/a&gt; which looks like this:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="o"&gt;[&lt;/span&gt;asinha&amp;#64;ankur  latex-changes&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;master&lt;/span&gt;&lt;span class="o"&gt;=)]&lt;/span&gt;$ tree
.
├── LICENSE
├── README.rst
└── src
    ├── abstract.tex
    ├── conclusion.tex
    ├── discussion.tex
    ├── introduction.tex
    ├── Makefile
    ├── methods.tex
    ├── paper.pdf
    ├── paper.tex
    └── results.tex

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;19&lt;/span&gt; files
&lt;span class="o"&gt;[&lt;/span&gt;asinha&amp;#64;ankur  latex-changes&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;master&lt;/span&gt;&lt;span class="o"&gt;=)]&lt;/span&gt;$
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Commit your changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Your repository will look something like this:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="o"&gt;[&lt;/span&gt;asinha&amp;#64;ankur  latex-changes&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;master&lt;/span&gt;&lt;span class="o"&gt;=)]&lt;/span&gt;$ git lg
* 280fef6 - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; days ago&lt;span class="o"&gt;)&lt;/span&gt; Subsection &lt;span class="nb"&gt;test&lt;/span&gt; — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; master, origin/master, origin/HEAD&lt;span class="o"&gt;)&lt;/span&gt;
* 0c0238b - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; days ago&lt;span class="o"&gt;)&lt;/span&gt; Moved script to its own repository — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt;
....
* 164e0d3 - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt; days ago&lt;span class="o"&gt;)&lt;/span&gt; Add vim temp files to gitignore — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt;
* bd02966 - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt; days ago&lt;span class="o"&gt;)&lt;/span&gt; Commit fake paper — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt;
* 11ad32b - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt; days ago&lt;span class="o"&gt;)&lt;/span&gt; Initial commit — Ankur Sinha
&lt;/pre&gt;
&lt;p&gt;This is all pretty standard Git usage. Now, the interesting part:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Send your PDF and LaTeX sources to your collaborator (or give them access to your repository).&lt;/li&gt;
&lt;li&gt;They make changes and commit them. Now, your Git revision tree will look something like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="o"&gt;[&lt;/span&gt;asinha&amp;#64;ankur  latex-changes&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;master&lt;/span&gt;&lt;span class="o"&gt;=)]&lt;/span&gt;$ git lg
* 46d0c11 - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; hours ago&lt;span class="o"&gt;)&lt;/span&gt; Add a new file. — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; master, origin/master, origin/HEAD&lt;span class="o"&gt;)&lt;/span&gt;
* ba4b06d - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; days ago&lt;span class="o"&gt;)&lt;/span&gt; Update readme — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt;
* 53033b8 - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; days ago&lt;span class="o"&gt;)&lt;/span&gt; Remove example output directory — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt;
* d82266b - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; days ago&lt;span class="o"&gt;)&lt;/span&gt; More subsection changes — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt;
* 280fef6 - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; days ago&lt;span class="o"&gt;)&lt;/span&gt; Subsection &lt;span class="nb"&gt;test&lt;/span&gt; — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt;
  ...
&lt;/pre&gt;
&lt;p&gt;Zaphod lets you specify two Git revisions and generates a list of changes between these two. So, for example, running the diff command would do this:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="o"&gt;[&lt;/span&gt;asinha&amp;#64;ankur  latex-changes&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;master&lt;/span&gt;&lt;span class="o"&gt;=)]&lt;/span&gt;$ python3 ../zaphod/zaphod.py diff -r bd02966 -m paper.tex -s src
 ....
 ....
 COMPLETE: The following branches have been created:
 &lt;span class="m"&gt;201602131935&lt;/span&gt;-latexdiff-rev1: Revision &lt;span class="m"&gt;1&lt;/span&gt;.
 &lt;span class="m"&gt;201602131935&lt;/span&gt;-latexdiff-rev2: Revision &lt;span class="m"&gt;2&lt;/span&gt;.
 &lt;span class="m"&gt;201602131935&lt;/span&gt;-latexdiff-annotated: Branch with annotated versions of sources and diff pdf.
 The generated diff pdf is: src/diff-bd02966-master.pdf.
&lt;/pre&gt;
&lt;p&gt;and your repository now looks like this:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
* 9e58178 - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; minutes ago&lt;span class="o"&gt;)&lt;/span&gt; Save annotated changes between bd02966 and master — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; &lt;span class="m"&gt;201602131935&lt;/span&gt;-latexdiff-annotated&lt;span class="o"&gt;)&lt;/span&gt;
* 46d0c11 - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt; hours ago&lt;span class="o"&gt;)&lt;/span&gt; Add a new file. — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;origin/master, origin/HEAD, master, &lt;span class="m"&gt;201602131935&lt;/span&gt;-latexdiff-rev2&lt;span class="o"&gt;)&lt;/span&gt;
* ba4b06d - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; days ago&lt;span class="o"&gt;)&lt;/span&gt; Update readme — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt;
....
* bd02966 - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt; days ago&lt;span class="o"&gt;)&lt;/span&gt; Commit fake paper — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;201602131935&lt;/span&gt;-latexdiff-rev1&lt;span class="o"&gt;)&lt;/span&gt;
* 11ad32b - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt; days ago&lt;span class="o"&gt;)&lt;/span&gt; Initial commit — Ankur Sinha
&lt;/pre&gt;
&lt;p&gt;Zaphod uses latexdiff to check for differences between the two revisions, marks them as branches for easy reference, and then creates a new branch with annotated source files and a nice pdf which looks like this:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://ankursinha.in/images/20160213-zaphod-screenshot.png"&gt;&lt;img alt="Screenshot of annotated PDF" class="align-center" src="http://ankursinha.in/images/20160213-zaphod-screenshot.png" style="height: 400.0px;" /&gt;&lt;/a&gt;
&lt;p&gt;That looks rather nice, isn't it? And it resembles what a Word document with annotations looks like too. latexdiff has various markup styles which can be passed to Zaphod as arguments to modify how the annotations look. The most important part here is that because Zaphod is using mighty Git, there's no chance of you losing any work at all. &lt;em&gt;In fact, if you have untracked and uncommitted changes in your repository, Zaphod refuses to run at all.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now, a look at how the revise function works:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="o"&gt;[&lt;/span&gt;asinha&amp;#64;ankur  latex-changes&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;201602131935&lt;/span&gt;-latexdiff-annotated&lt;span class="o"&gt;)]&lt;/span&gt;$ python3 ../zaphod/zaphod.py revise -s src/ -m paper.tex
Working on file: src/paper.tex.
File under revision: src/paper.tex

Deletion found:
---
Tracking
---

Delete? Y/N/y/n: y
Deleted

File under revision: src/paper.tex

Addition found:
+++
Visualising
+++

Add? Y/N/y/n: n
Skipped

File under revision: src/paper.tex

Addition found:
+++
&lt;span class="se"&gt;\i&lt;/span&gt;nput&lt;span class="o"&gt;{&lt;/span&gt;discussion&lt;span class="o"&gt;}&lt;/span&gt;

+++

Add? Y/N/y/n:
....
....
....
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;201602131935&lt;/span&gt;-latexdiff-annotated 3ba757f&lt;span class="o"&gt;]&lt;/span&gt; Save after going through changes
 &lt;span class="m"&gt;5&lt;/span&gt; files changed, &lt;span class="m"&gt;34&lt;/span&gt; insertions&lt;span class="o"&gt;(&lt;/span&gt;+&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;56&lt;/span&gt; deletions&lt;span class="o"&gt;(&lt;/span&gt;-&lt;span class="o"&gt;)&lt;/span&gt;
 create mode &lt;span class="m"&gt;100644&lt;/span&gt; src/accepted.pdf
 rewrite src/paper.tex &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;72&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;

COMPLETE: Changes accepted and committed.
The generated pdf is: src//accepted.pdf.
You can merge this branch to master &lt;span class="k"&gt;if&lt;/span&gt; you wish.
&lt;/pre&gt;
&lt;p&gt;and your repository looks like this:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="o"&gt;[&lt;/span&gt;asinha&amp;#64;ankur  latex-changes&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;201602131935&lt;/span&gt;-latexdiff-annotated&lt;span class="o"&gt;)]&lt;/span&gt;$ git lg
* 3ba757f - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;53&lt;/span&gt; seconds ago&lt;span class="o"&gt;)&lt;/span&gt; Save after going through changes — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; &lt;span class="m"&gt;201602131935&lt;/span&gt;-latexdiff-annotated&lt;span class="o"&gt;)&lt;/span&gt;
* 9e58178 - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;17&lt;/span&gt; minutes ago&lt;span class="o"&gt;)&lt;/span&gt; Save annotated changes between bd02966 and master — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt;
* 46d0c11 - &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt; hours ago&lt;span class="o"&gt;)&lt;/span&gt; Add a new file. — Ankur Sinha &lt;span class="o"&gt;(&lt;/span&gt;Ankur Sinha Gmail&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;origin/master, origin/HEAD, master, &lt;span class="m"&gt;201602131935&lt;/span&gt;-latexdiff-rev2&lt;span class="o"&gt;)&lt;/span&gt;
....
&lt;/pre&gt;
&lt;p&gt;The new pdf, accepted.pdf, is the latest version of your document and includes the changes you think should make the cut. If you're happy with these, you can simply merge this branch into master, and continue working. If you're not, you can go back to master, or another commit, and tinker some more - we're using Git, do what you want. In line with what I did above, the PDF looks like this:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://ankursinha.in/images/20160213-zaphod-2.png"&gt;&lt;img alt="Screenshot of annotated PDF" class="align-center" src="http://ankursinha.in/images/20160213-zaphod-2.png" style="height: 400.0px;" /&gt;&lt;/a&gt;
&lt;p&gt;Pretty neat, huh? At least I think so ;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="give-it-a-go"&gt;
&lt;h2&gt;Give it a go!&lt;/h2&gt;
&lt;p&gt;I've tested the tool out myself on a number of different cases, but I'm quite certain I've missed some and there are always bugs that I haven't run into yet. It's a rather simple script in its current version - not all the commands that are called are checked for errors and so on. As I get more time in the future, I'll keep improving it. For the time being, though, it does work.&lt;/p&gt;
&lt;p&gt;Give it a go and let me know what you think? It's &lt;a class="reference external" href="https://github.com/sanjayankur31/zaphod"&gt;hosted on Github&lt;/a&gt;, so feel free to report issues and open pull requests. Let's make LaTeX even more usable!&lt;/p&gt;
&lt;/div&gt;
</content><category term="LaTeX"></category><category term="Programming"></category><category term="Git"></category><category term="Fedora"></category><category term="Zaphod"></category></entry><entry><title>Beamer: making hand outs for your presentations</title><link href="http://ankursinha.in/2012/10/07/beamer-making-hand-outs-for-your-presentations.html" rel="alternate"></link><published>2012-10-07T15:55:00+01:00</published><updated>2012-10-07T15:55:00+01:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2012-10-07:/2012/10/07/beamer-making-hand-outs-for-your-presentations.html</id><summary type="html">&lt;p&gt;It's often handy to create hand-outs for your presentations. (I need
them for my master's assessments at the moment). It's really simple to
make hand-outs. What we do is first create a presentation, like we
normally do. Then, since the presentation generally contains overlays
(the &lt;tt class="docutils literal"&gt;pause&lt;/tt&gt; command and more), we …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's often handy to create hand-outs for your presentations. (I need
them for my master's assessments at the moment). It's really simple to
make hand-outs. What we do is first create a presentation, like we
normally do. Then, since the presentation generally contains overlays
(the &lt;tt class="docutils literal"&gt;pause&lt;/tt&gt; command and more), we make another version where these
commands are ignored. That's the most of it. I go ahead another step and
create another TeX file to print multiple slides in a single page.&lt;/p&gt;
&lt;p&gt;As you'll notice, between the presentation, and it's hand out version,
the only change is in the &lt;tt class="docutils literal"&gt;documentclass&lt;/tt&gt; options, where you add a
&amp;quot;&lt;tt class="docutils literal"&gt;handout&lt;/tt&gt;&amp;quot; option in the latter. Instead of copy pasting and
keeping these two files in sync, a smart thing to do is to write
everything other than the &lt;tt class="docutils literal"&gt;documentclass&lt;/tt&gt; line in another text file
and then simply include it using an &lt;tt class="docutils literal"&gt;input&lt;/tt&gt; command in two files for
the two versions.&lt;/p&gt;
&lt;p&gt;So, the files you have are:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;mypresentation-src.tex&lt;/strong&gt;: the file that contains your entire
presentation, other than the &lt;tt class="docutils literal"&gt;documentclass&lt;/tt&gt; line&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mypresentation.tex&lt;/strong&gt;: this file will contain the &lt;tt class="docutils literal"&gt;documentclass&lt;/tt&gt;
line for your presentation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mypresentation-hand-out.tex&lt;/strong&gt;: this file contains another
&lt;tt class="docutils literal"&gt;documentclass&lt;/tt&gt; line for your presentation's hand-out version where
overlays are ignored&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mypresentation-hand-out-print-multiple.tex&lt;/strong&gt;: this file will
generate a pdf file with multiple slides on a single page&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is what your &lt;strong&gt;mypresentation-src.tex&lt;/strong&gt; file looks like (Observe
the lack of a document class definition):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
usepackage{color}

% links, urls, refs
definecolor{links}{HTML}{2A1B81}
usepackage{hyperref}
hypersetup{colorlinks,linkcolor=,urlcolor=links}

% graphics
usepackage{graphicx}

% algorithm
usepackage{algorithmic}

usepackage{textcomp}

% beamer theme
% use defaults for theme
usetheme{Berlin}
usecolortheme[RGB={41,65,114}]{structure}
logo{includegraphics[width=2.5cm,angle=0]{uts-logo.jpg}}

%% title %%
title{Week review: October 2 2012}
author[Ankur Sinha]{Ankur SinhaUTS ID: 11484312}
institute{University of Technology, Sydney}
date{October 2 2012}

%% document begins %%
begin{document}

%% title frame %%
begin{frame}
titlepage

end{frame}

.....
..
...
end{document}
&lt;/pre&gt;
&lt;p&gt;This is how your &lt;strong&gt;mypresentation.tex&lt;/strong&gt; file looks like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
documentclass[usenames,dvipsnames,10pt]{beamer}
input{mypresentation-src.tex}
&lt;/pre&gt;
&lt;p&gt;This is how your &lt;strong&gt;mypresentation-hand-out.tex&lt;/strong&gt; file looks like
(Observe that the only addition is the &amp;quot;handout&amp;quot; option):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
documentclass[usenames,dvipsnames,10pt,handout]{beamer}
input{mypresentation-src.tex}
&lt;/pre&gt;
&lt;p&gt;This is how your &lt;strong&gt;mypresentation-hand-out-print.tex&lt;/strong&gt; file looks like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
documentclass[a4paper]{article}
usepackage{pdfpages}

begin{document}
includepdf[pages=1-last,nup=2x2,landscape=false,frame=true,
noautoscale=true,scale=0.6,delta=5mm 5mm]{mypresentation-hand-out.pdf}
end{document}
&lt;/pre&gt;
&lt;p&gt;You need to compile the 3 TeX files (not the mypresentation-src.tex
file). Note that the -hand-out-print.tex file should be compiled last,
since it requires the hand-out.pdf file. It's pretty simple. I ran in to
all of this via Google of course. I just thought it'd be nice to have it
all in one place. Hope it helps. Cheers!&lt;/p&gt;
</content><category term="LaTeX"></category></entry><entry><title>LaTeX: the open source document system for academia</title><link href="http://ankursinha.in/2011/11/03/latex-the-open-source-document-system-for-academia.html" rel="alternate"></link><published>2011-11-03T00:21:00+00:00</published><updated>2011-11-03T00:21:00+00:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2011-11-03:/2011/11/03/latex-the-open-source-document-system-for-academia.html</id><summary type="html">&lt;p&gt;I'm to take a session at &lt;a class="reference external" href="http://fudcon.in/"&gt;FUDCon India Pune&lt;/a&gt; this Saturday on LaTeX. I
just finished with my &lt;a class="reference external" href="http://fudcon.in/sites/default/files/slides/main.pdf"&gt;presentation&lt;/a&gt; for the session. Feel free to use
it (non commercially). If you need the source, please drop me an email
and I'll send it across.&lt;/p&gt;
&lt;p&gt;To get the FUDCon India logo …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm to take a session at &lt;a class="reference external" href="http://fudcon.in/"&gt;FUDCon India Pune&lt;/a&gt; this Saturday on LaTeX. I
just finished with my &lt;a class="reference external" href="http://fudcon.in/sites/default/files/slides/main.pdf"&gt;presentation&lt;/a&gt; for the session. Feel free to use
it (non commercially). If you need the source, please drop me an email
and I'll send it across.&lt;/p&gt;
&lt;p&gt;To get the FUDCon India logo in your Beamer presentation, use the
following command:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
logo{includegraphics[width=1.5cm,angle=270]{logo-fudconin.pdf}}
&lt;/pre&gt;
&lt;p&gt;The pdf version of the logo can be downloaded from &lt;a class="reference external" href="http://ankursinha.fedorapeople.org/logo-fudconin.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See you at the FUDCon!!&lt;/p&gt;
</content><category term="LaTeX"></category><category term="FUDCon"></category></entry></feed>