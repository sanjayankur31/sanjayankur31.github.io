<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>ankursinha.in/blog - Vim</title><link href="http://ankursinha.in/" rel="alternate"></link><link href="http://ankursinha.in/feeds/tags/vim.atom.xml" rel="self"></link><id>http://ankursinha.in/</id><updated>2020-03-15T09:39:20+00:00</updated><subtitle>neuroscience/fedora/musings</subtitle><entry><title>A Vim script function to select signatures in Neomutt</title><link href="http://ankursinha.in/2020/03/15/a-vimscript-function-to-select-signatures-in-neomutt.html" rel="alternate"></link><published>2020-03-15T09:39:20+00:00</published><updated>2020-03-15T09:39:20+00:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2020-03-15:/2020/03/15/a-vimscript-function-to-select-signatures-in-neomutt.html</id><summary type="html">&lt;p class="first last"&gt;I was dabbling in &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Vim_(text_editor)#Vim_script"&gt;Vim script&lt;/a&gt; and wrote myself a simple function to
select signatures when composing e-mails in &lt;a class="reference external" href="https://neomutt.org/"&gt;Neomutt&lt;/a&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I've been using &lt;a class="reference external" href="https://neomutt.org/"&gt;Neomutt&lt;/a&gt; for a &lt;a class="reference external" href="http://ankursinha.in/2017/12/16/transitioning-to-neomutt-and-friends-for-e-mail.html"&gt;while now&lt;/a&gt;.
It allows me to stick to the &lt;a class="reference external" href="https://www.byobu.org/"&gt;Byobu&lt;/a&gt; based terminal workflow that I'm used to.
Most importantly, it lets me use &lt;a class="reference external" href="https://www.vim.org/"&gt;Vim&lt;/a&gt; to write my e-mails, so I don't need to
really learn another tool now.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://neomutt.org/"&gt;Neomutt&lt;/a&gt; can be configured to add a signature at the end of the e-mail, and one
can select a signature depending on various parameters, such as the senders
address using &lt;a class="reference external" href="https://neomutt.org/man/neomuttrc"&gt;hooks&lt;/a&gt;. However,
sometimes, one does need to select other signatures.&lt;/p&gt;
&lt;p&gt;The simple &lt;a class="reference external" href="https://www.vim.org/"&gt;Vim&lt;/a&gt; way, of course, is to simply delete the last few lines, and
then read in the new signature using &lt;code&gt;:r &amp;lt;filename&amp;gt;&lt;/code&gt;. This takes a few
more key strokes than one would like (well, than I like) so I thought I'd
dabble in &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Vim_(text_editor)#Vim_script"&gt;Vim script&lt;/a&gt; a bit and automate it. Here's what I've come up with:&lt;/p&gt;
&lt;pre class="code vim literal-block"&gt;
&lt;span class="c"&gt;&amp;quot; A function to load the right signature when I'm using neomutt&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; LoadSignature&lt;span class="p"&gt;(&lt;/span&gt;signature&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Only work for mail files&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; this_file_type &lt;span class="p"&gt;=&lt;/span&gt; &amp;amp;&lt;span class="k"&gt;filetype&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; this_file_type &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mail&amp;quot;&lt;/span&gt;
        echo &lt;span class="s2"&gt;&amp;quot;This is not a mail file! Not running!&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="c"&gt;
    &amp;quot; Get the current signature's line&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Go to last line&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; saved_cursor_position &lt;span class="p"&gt;=&lt;/span&gt; getpos&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Set cursor to file end and search backwards&lt;/span&gt;
    &lt;span class="k"&gt;call&lt;/span&gt; cursor&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;99999999999999999999&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;:sigstart &lt;span class="p"&gt;=&lt;/span&gt; search&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-- '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Confirm that the line was found&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; sigstart &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
        echo &lt;span class="s2"&gt;&amp;quot;No signatures detected.&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="c"&gt;
    &amp;quot; Check if signature file exists&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;:sigdir &lt;span class="p"&gt;=&lt;/span&gt; escape&lt;span class="p"&gt;(&lt;/span&gt;expand&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'$HOME'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'\'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; . &lt;span class="s2"&gt;&amp;quot;/Sync/99_private/neomuttdir/&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;:sigfile &lt;span class="p"&gt;=&lt;/span&gt; sigdir . &lt;span class="k"&gt;a&lt;/span&gt;:signature . &lt;span class="s2"&gt;&amp;quot;.sig&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; filereadable&lt;span class="p"&gt;(&lt;/span&gt;sigfile&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;        &amp;quot; delete the current lines after the &amp;quot;-- &amp;quot; line&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;:delstart &lt;span class="p"&gt;=&lt;/span&gt; sigstart &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
        execute delstart . &lt;span class="s2"&gt;&amp;quot;,$d&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;        &amp;quot; Read the new signature&lt;/span&gt;
        execute sigstart . &lt;span class="s2"&gt;&amp;quot;read &amp;quot;&lt;/span&gt; . sigfile
&lt;span class="c"&gt;        &amp;quot; Return cursor to wherever it was&lt;/span&gt;
        &lt;span class="k"&gt;call&lt;/span&gt; setpos&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; saved_cursor_position&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        echo &lt;span class="s2"&gt;&amp;quot;File &amp;quot;&lt;/span&gt; . sigfile . &lt;span class="s2"&gt;&amp;quot; not found!&amp;quot;&lt;/span&gt;
        echo &lt;span class="s2"&gt;&amp;quot;Available signature files:\n&amp;quot;&lt;/span&gt; . globpath&lt;span class="p"&gt;(&lt;/span&gt;sigdir&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'*.sig'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So, adding this to &lt;code&gt;~/.vimrc&lt;/code&gt; would let one run &lt;code&gt;:call
LoadSignature('signature')&lt;/code&gt; in &lt;a class="reference external" href="https://www.vim.org/"&gt;Vim&lt;/a&gt; to select a signature. Each signature is a
different file with a &lt;code&gt;.sig&lt;/code&gt; file extension in the location given by
&lt;code&gt;sigdir&lt;/code&gt;, and the name of the file is the argument that needs to be given
to the function. If the signature file cannot be found, it'll list available ones.&lt;/p&gt;
&lt;p&gt;It's quite simple really, and I'm sure it can be made better, but it works.&lt;/p&gt;
</content><category term="Tech"></category><category term="Planet"></category><category term="Vim"></category><category term="Neomutt"></category><category term="Fedora"></category></entry><entry><title>Writing LaTeX well in Vim</title><link href="http://ankursinha.in/2017/09/19/writing-latex-well-in-vim.html" rel="alternate"></link><published>2017-09-19T00:40:41+01:00</published><updated>2017-09-19T00:40:41+01:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2017-09-19:/2017/09/19/writing-latex-well-in-vim.html</id><summary type="html">&lt;p class="first last"&gt;&lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;Vim&lt;/a&gt; is a great text editor and &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; is a great document writing system. Since I write a lot of &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; for my research, I've been adding various &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;Vim&lt;/a&gt; plug-ins to make my writing easier over the years. This post documents some of these additions.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;Vim&lt;/a&gt; is a great text editor if one takes a bit of time to learn how to use it properly. There's quite enough documentation on how to use &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;Vim&lt;/a&gt; correctly, and efficiently so I shan't cover that here. &lt;code&gt;vimtutor&lt;/code&gt; is an excellent resource to begin at.&lt;/p&gt;
&lt;p&gt;Similarly, &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; is a &lt;a class="reference external" href="https://www.google.co.uk/search?hl=en-GB&amp;amp;q=why+use+latex+for+writing"&gt;brilliant documentation system&lt;/a&gt;, especially for scientific writing if one takes the time to learn it. Unlike the usual Microsoft Word type systems, &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; is a set of commands/macros. Once the document is written using these, it must be compiled to produce a PDF document. It may appear daunting at first, but after one is familiar with it, it makes writing a breeze. Now, there are a editors especially designed for &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt;, but given that I use &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;Vim&lt;/a&gt; for about all my writing, I use it for &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; too.&lt;/p&gt;
&lt;p&gt;On Fedora, you can install &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;Vim&lt;/a&gt; using &lt;a class="reference external" href="https://github.com/rpm-software-management/dnf"&gt;DNF&lt;/a&gt;: &lt;code&gt;sudo dnf install vim-enhanced vim-X11&lt;/code&gt;. I install the X11 package too to &lt;a class="reference external" href="http://vim.wikia.com/wiki/Accessing_the_system_clipboard"&gt;use the system clipboard&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="latex-tools"&gt;
&lt;h2&gt;LaTeX tools&lt;/h2&gt;
&lt;p&gt;To begin with, there are a few command line commands that one can use other than the necessary &lt;code&gt;latex&lt;/code&gt;, &lt;code&gt;pdflatex&lt;/code&gt;, &lt;code&gt;bibtex&lt;/code&gt;, &lt;code&gt;biber&lt;/code&gt;, and so on commands:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;latexmk&lt;/code&gt; is a great tool that figures out the compilation sequence required to generate the document, and it does it for you.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lacheck&lt;/code&gt; and &lt;code&gt;chktex&lt;/code&gt; are both linters for &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; that make writing a lot easier.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;detex&lt;/code&gt; strips a tex document of &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; commands to produce only the text bits.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;diction&lt;/code&gt;, and &lt;code&gt;style&lt;/code&gt; give the &lt;a class="reference external" href="https://www.linux.com/news/improve-your-writing-gnu-style-checkers"&gt;author an idea of the readability of the text&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One can use any text editor and then these utilities to improve their &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; writing experience.&lt;/p&gt;
&lt;p&gt;On Fedora, install these with &lt;a class="reference external" href="https://github.com/rpm-software-management/dnf"&gt;DNF&lt;/a&gt;: &lt;code&gt;sudo dnf install latexmk /usr/bin/lacheck /usr/bin/chktex /usr/bin/detex diction&lt;/code&gt;. (Yes, you can tell &lt;a class="reference external" href="https://github.com/rpm-software-management/dnf"&gt;DNF&lt;/a&gt; what file you want to install too!)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="built-in-vim-features"&gt;
&lt;h2&gt;Built-in Vim features&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;Vim&lt;/a&gt; already contains quite a few features that make writing quite easy;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://vim.wikia.com/wiki/Omni_completion"&gt;Omni completion&lt;/a&gt; provides good suggestions based on the text under the cursor.&lt;/li&gt;
&lt;li&gt;There's in-built &lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/spell.html"&gt;spell checking&lt;/a&gt; already.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/fold.html"&gt;Folding&lt;/a&gt; logical bits makes the document easier to read and navigate through.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/syntax.html"&gt;Syntax highlighting&lt;/a&gt; makes it a lot easier to read code by marking different commands in different colours.&lt;/li&gt;
&lt;li&gt;There are different flavours of &lt;a class="reference external" href="https://jeffkreeftmeijer.com/vim-number/"&gt;linenumbers&lt;/a&gt; that make moving about a document much simpler.&lt;/li&gt;
&lt;li&gt;At some point, the &lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/syntax.html#conceal"&gt;conceal&lt;/a&gt; feature was added that further improves readability of documents&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/windows.html#windows"&gt;Buffers, tabs, windows&lt;/a&gt; are available in &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;Vim&lt;/a&gt; too, of course.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="vim-plug-ins"&gt;
&lt;h2&gt;Vim plug-ins&lt;/h2&gt;
&lt;p&gt;There are a lot of &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;Vim&lt;/a&gt; plug-ins that extend some functionality or the other. The simplest way to install plug-ins is to use &lt;a class="reference external" href="https://github.com/VundleVim/Vundle.vim"&gt;Vundle&lt;/a&gt;. Here are some plug-ins that I use. They're not all specific to &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Konfekt/FastFold"&gt;Fastfold&lt;/a&gt; makes folding faster.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/sheerun/vim-polyglot"&gt;vim-polyglot&lt;/a&gt; provides better syntax highlighting for a many languages.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/vim-airline/vim-airline"&gt;vim-airline&lt;/a&gt; provides an excellent, informative status line.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/majutsushi/tagbar"&gt;tagbar&lt;/a&gt; lists sections (tags in general) in a different pane.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/altercation/vim-colors-solarized"&gt;vim-colors-solarized&lt;/a&gt; provides the solarized themes for &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;Vim&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/lervag/vimtex"&gt;vimtex&lt;/a&gt; provides commands to quickly compile &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; files, complete references, citations, navigate quicker, view the generated files, and so on.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/SirVer/ultisnips"&gt;ultisnips&lt;/a&gt; provides lots of snippets for many languages, including &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt;. Get the snippets from the &lt;a class="reference external" href="https://github.com/honza/vim-snippets"&gt;vim-snippets&lt;/a&gt; plug-in.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Valloric/YouCompleteMe"&gt;YouCompleteMe&lt;/a&gt; is a completion engine that supports many languages. Remember that this one needs to be compiled!&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/vim-syntastic/syntastic/"&gt;Syntastic&lt;/a&gt; provides syntax checkers for many languages, including &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've also used &lt;a class="reference external" href="https://github.com/vim-latex/vim-latex"&gt;vim-latex&lt;/a&gt; in the past and it's very very good. However, since I have other plug-ins that provide the various functionality that it brings together for many other languages too, I'm no longer using it. Worth a go, though.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="an-example-document"&gt;
&lt;h2&gt;An example document&lt;/h2&gt;
&lt;p&gt;The image below shows a &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; file open in &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;Vim&lt;/a&gt; with different plug-ins in action:&lt;/p&gt;
&lt;center&gt;&lt;a class="reference external image-reference" href="http://ankursinha.in/images/20170919-latex-vim.png"&gt;&lt;img alt="Screenshot of Vim with a LaTeX file open showing various features." class="align-center" src="http://ankursinha.in/images/20170919-latex-vim.png" style="height: 480.0px;" /&gt;&lt;/a&gt;
&lt;/center&gt;&lt;ul class="simple"&gt;
&lt;li&gt;On top, one can see the open buffer. Only one buffer is open at the moment.&lt;/li&gt;
&lt;li&gt;In the left hand side margin, one can see the fold indicators.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;S&amp;gt;&lt;/code&gt; bit is an indicator from the linter that Syntastic uses, showing a warning or an error.&lt;/li&gt;
&lt;li&gt;The line numbers are also visible in the left margin. Since I am in insert mode, they're just plain line numbers. Once one leaves insert mode, they change to relative.&lt;/li&gt;
&lt;li&gt;On line 171, the conceal feature shows Greek symbols instead of their &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; commands.&lt;/li&gt;
&lt;li&gt;Syntax highlighting is clearly visible. The commands have different colours. This is the solarized dark theme, of course.&lt;/li&gt;
&lt;li&gt;The &amp;quot;pop-up&amp;quot; shows Ultisnips at work. Here, I'm looking at adding a new equation environment.&lt;/li&gt;
&lt;li&gt;Underneath the pop up, the dashed line is a folded section. The &lt;code&gt;+&lt;/code&gt; symbol in the left margin implies that it is folded.&lt;/li&gt;
&lt;li&gt;In the status line, one can see that spell check is enabled, and that I'm using the &lt;code&gt;en_gb&lt;/code&gt; language.&lt;/li&gt;
&lt;li&gt;Next, the git status, and the git branch I'm in. That's the &lt;a class="reference external" href="https://github.com/tpope/vim-fugitive"&gt;vim-fugitive&lt;/a&gt; plug-in at work.&lt;/li&gt;
&lt;li&gt;Then, the filetype, the encoding, the number of words and so on provided by the airline plug-in.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Neat, huh? There is a lot more there that isn't easy to show in a screen-shot. For example, &lt;code&gt;\ll&lt;/code&gt; will compile the &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; file; &lt;code&gt;\lv&lt;/code&gt; opens the generated PDF file in a PDF viewer, Evince in my case; &lt;code&gt;\lc&lt;/code&gt; will clean the directory of any temporary files that were generated while compiling the document.&lt;/p&gt;
&lt;p&gt;I keep all my &lt;a class="reference external" href="https://github.com/sanjayankur31/vimfiles"&gt;vimfiles on Github&lt;/a&gt;. Feel free to take a look and derive your own. I tweak my configuration each time I find something new, though, so it may change rather frequently. Remember to read the documentation for whatever plug-ins in use. They provide a lot of options, lots of shortcuts, lots of other commands, and sometimes setting them up incorrectly can cause vim to behave in unexpected ways.&lt;/p&gt;
&lt;p&gt;TL;DR: Use &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;Vim&lt;/a&gt;, and use &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt;!!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Tech"></category><category term="Calliope"></category><category term="Fedora"></category><category term="Free software"></category><category term="LaTeX"></category><category term="Vim"></category></entry><entry><title>Giving Qutebrowser a go - a fantastic keyboard-focused browser</title><link href="http://ankursinha.in/2017/06/21/giving-qutebrowser-a-go-a-fantastic-keyboard-focused-browser.html" rel="alternate"></link><published>2017-06-21T00:09:30+01:00</published><updated>2017-06-21T00:09:30+01:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2017-06-21:/2017/06/21/giving-qutebrowser-a-go-a-fantastic-keyboard-focused-browser.html</id><summary type="html">&lt;p class="first last"&gt;After years of using the excellent Firefox, I've decided to tweak my workflow a little more by giving &lt;a class="reference external" href="https://www.qutebrowser.org/"&gt;Qutebrowser&lt;/a&gt; a go. &lt;a class="reference external" href="https://www.qutebrowser.org/"&gt;Qutebrowser&lt;/a&gt; is a brilliant keyboard-focused browser. In this post, I document my first day with &lt;a class="reference external" href="https://www.qutebrowser.org/"&gt;Qutebrowser&lt;/a&gt;, and I also include some tips and tricks that others may find helpful.&lt;/p&gt;
</summary><content type="html">&lt;center&gt;&lt;a class="reference external image-reference" href="http://ankursinha.in/images/20170621-qutebrowser3.png"&gt;&lt;img alt="A screenshot showing hints in Qutebrowser on the Qutebrowser website" class="text-center img-responsive pagination-centered" src="http://ankursinha.in/images/20170621-qutebrowser3.png" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;/center&gt;&lt;p&gt;Years ago, I was introduce to &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Touch_typing"&gt;touch typing&lt;/a&gt;. I knew immediately that it was a skill I must learn. I remember spending hours playing with &lt;a class="reference external" href="https://apps.fedoraproject.org/packages/gtypist"&gt;gtypist&lt;/a&gt; trying to improve my typing efficiency. I'm not too bad nowadays. I can mostly type without looking at the keyboard at all, and with few errors.&lt;/p&gt;
&lt;p&gt;I've always loved using the command line. In fact, I maintain that new programmers should start at the command line and only move to IDEs once they've learned exactly what's being done under the hood. I use the terminal as much as conveniently possible - music via &lt;a class="reference external" href="https://apps.fedoraproject.org/packages/ncmpcpp"&gt;ncmpcpp&lt;/a&gt;, IRC on &lt;a class="reference external" href="https://apps.fedoraproject.org/packages/irssi"&gt;irssi&lt;/a&gt; (there are Gitter and Slack gateways to IRC too), &lt;a class="reference external" href="https://apps.fedoraproject.org/packages/task"&gt;taskwarrior&lt;/a&gt; to organise my TODOs, all my writing in &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;VIM&lt;/a&gt; (programming and otherwise), for example. &lt;a class="reference external" href="https://apps.fedoraproject.org/packages/byobu"&gt;Byobu&lt;/a&gt; makes it really easy.&lt;/p&gt;
&lt;p&gt;The one effect sticking to the command line so much has had on me is that I've developed a slight aversion to the mouse/touchpad. I now feel mildly annoyed if I must move my fingers off the home-row to do something. I must use the touchpad to check my mail/calendar on Evolution, for example, but this doesn't annoy me too much because I usually check these when I've taken a break from programming (or my &lt;a class="reference external" href="https://xkcd.com/303/"&gt;code is compiling&lt;/a&gt;). It's really on Firefox that the constant switching between keyboard and mouse used to be a real downer.&lt;/p&gt;
&lt;p&gt;Being a &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;VIM&lt;/a&gt; user, I did the expected - went looking to see if there was a way to use &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;VIM&lt;/a&gt; style key-mappings on Firefox. There are multiple add-ons that permit this with different feature sets - &lt;a class="reference external" href="http://vimperator.org/"&gt;vimperator&lt;/a&gt;, &lt;a class="reference external" href="http://5digits.org/pentadactyl/"&gt;pentadactyl&lt;/a&gt;, &lt;a class="reference external" href="https://vimium.github.io/"&gt;vimium&lt;/a&gt;, &lt;a class="reference external" href="https://addons.mozilla.org/en-GB/firefox/addon/vimfx/"&gt;vimFX&lt;/a&gt; are a few examples. Now, the different features these provide cater to different people's requirements. I went for pentadactly. Not only does it permit &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;VIM&lt;/a&gt; style key mappings and navigation, it also provides a vim style command line that is incredibly handy. I've used it for years now. The issue that has troubled pentadactyl for some time now is constant breakage - it tends to break each time the Firefox addon API is updated. Recently, I &lt;a class="reference external" href="https://github.com/5digits/dactyl/issues/99"&gt;read that some major changes in the API will make pentadactly pretty much unusable in the near future&lt;/a&gt;. This made me go looking for a more stable alternative. I tried one or two others - vimium for example, but somehow, I find vimium too simple.&lt;/p&gt;
&lt;p&gt;So, I &lt;a class="reference external" href="https://www.reddit.com/r/linux/comments/3aqmhd/why_cant_we_have_a_nice_vimlike_webkit_browser/"&gt;dug further&lt;/a&gt; and ran into &lt;a class="reference external" href="https://fanglingsu.github.io/vimb/"&gt;Vimb&lt;/a&gt; and &lt;a class="reference external" href="https://www.qutebrowser.org/"&gt;Qutebrowser&lt;/a&gt;. They're both &amp;quot;vim like browsers&amp;quot; i.e., they're designed for more advanced users and they provide &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;VIM&lt;/a&gt; like key-mappings and modes. I gave vimb a short try, but &lt;a class="reference external" href="https://www.qutebrowser.org/"&gt;Qutebrowser&lt;/a&gt; really impressed me a lot more.&lt;/p&gt;
&lt;div class="section" id="qutebrowser"&gt;
&lt;h2&gt;Qutebrowser&lt;/h2&gt;
&lt;p&gt;The best thing about &lt;a class="reference external" href="https://www.qutebrowser.org/"&gt;Qutebrowser&lt;/a&gt; is that it's &lt;a class="reference external" href="https://github.com/qutebrowser/qutebrowser/pulse/monthly"&gt;actively maintained&lt;/a&gt;. I even hopped on to the &lt;a class="reference external" href="https://webchat.freenode.net/?channels=#qutebrowser"&gt;IRC channel&lt;/a&gt; earlier today to get some help. The latest version is in Fedora already, so you can simply go &lt;code&gt;sudo dnf install qutebrowser&lt;/code&gt; to give it a whirl. I wanted to test out the latest codebase, so I quickly set up a &lt;a class="reference external" href="https://copr.fedorainfracloud.org/coprs/ankursinha/qutebrowser/"&gt;copr repository&lt;/a&gt; that you can use too. I'm tinkering with &lt;a class="reference external" href="http://flatpak.org/"&gt;FlatPak&lt;/a&gt; to try and build one too, so that it becomes even easier to install, but I'm still figuring out how FlatPaks are built.&lt;/p&gt;
&lt;center&gt;&lt;a class="reference external image-reference" href="http://ankursinha.in/images/20170621-qutebrowser1.png"&gt;&lt;img alt="A screenshot showing hints in Qutebrowser" class="text-center img-responsive pagination-centered" src="http://ankursinha.in/images/20170621-qutebrowser1.png" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;/center&gt;&lt;p&gt;The screenshot shows &amp;quot;hinting&amp;quot; which is how one opens links. You press &amp;quot;f&amp;quot; and the various links in the page get labelled. Simply type the label of the link you want to visit. There's also &amp;quot;advanced hinting&amp;quot; which lets you do things like open links in a background tab, or in a new tab, or save (&lt;a class="reference external" href="https://unix.stackexchange.com/questions/209660/why-is-the-vi-editors-copy-command-called-yank"&gt;yank&lt;/a&gt;) a link URL.&lt;/p&gt;
&lt;center&gt;&lt;a class="reference external image-reference" href="http://ankursinha.in/images/20170621-qutebrowser2.png"&gt;&lt;img alt="A screenshot showing the command mode in Qutebrowser" class="text-center img-responsive pagination-centered" src="http://ankursinha.in/images/20170621-qutebrowser2.png" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;/center&gt;&lt;p&gt;This one shows the command mode - everything can be done here, including configuration of the browser or browsing related tasks.&lt;/p&gt;
&lt;div class="section" id="a-few-tips"&gt;
&lt;h3&gt;A few tips&lt;/h3&gt;
&lt;p&gt;I did a few things to get started. First, I wanted to use the new &amp;quot;webengine&amp;quot; backend. This requires the installation of two packages: &lt;code&gt;sudo dnf install python3-pyopengl python3-qt5-webengine&lt;/code&gt;, and then creating a new file in &lt;code&gt;~/.local/share/applications/qutebrowser.desktop&lt;/code&gt; with the following contents:&lt;/p&gt;
&lt;pre class="code ini literal-block"&gt;
&lt;span class="k"&gt;[Desktop Entry]&lt;/span&gt;
&lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;qutebrowser&lt;/span&gt;
&lt;span class="na"&gt;GenericName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Web Browser&lt;/span&gt;
&lt;span class="na"&gt;Icon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;qutebrowser&lt;/span&gt;
&lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Application&lt;/span&gt;
&lt;span class="na"&gt;Categories&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Network;WebBrowser;&lt;/span&gt;
&lt;span class="na"&gt;Exec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;qutebrowser --backend webengine %u&lt;/span&gt;
&lt;span class="na"&gt;Terminal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;false&lt;/span&gt;
&lt;span class="na"&gt;StartupNotify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;false&lt;/span&gt;
&lt;span class="na"&gt;MimeType&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;text/html;text/xml;application/xhtml+xml;application/xml;application/rdf+xml;image/gif;image/jpeg;image/png;x-scheme-handler/http;x-scheme-handler/https;&lt;/span&gt;
&lt;span class="na"&gt;Keywords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Browser&lt;/span&gt;
&lt;span class="na"&gt;X-Desktop-File-Install-Version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;0.23&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This new file simply ensures that picking &lt;a class="reference external" href="https://www.qutebrowser.org/"&gt;Qutebrowser&lt;/a&gt; from the activities menu will run the new backend. Without this, one would have to launch it from the terminal each time.&lt;/p&gt;
&lt;p&gt;Next, I configured it a bit to my liking - still very limited, but it's a start. The configuration file for &lt;a class="reference external" href="https://www.qutebrowser.org/"&gt;Qutebrowser&lt;/a&gt; is at &lt;code&gt;~/.config/qutebrowser/qutebrowser.conf&lt;/code&gt;.  There's so much one can modify here. I've only set up a few search engines and updated the default to Google. To do this, one needs to modify the &lt;code&gt;[searchengines]&lt;/code&gt; section in the file:&lt;/p&gt;
&lt;pre class="code ini literal-block"&gt;
&lt;span class="na"&gt;DEFAULT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://google.com/search?hl=en-GB&amp;amp;q={}&lt;/span&gt;
&lt;span class="na"&gt;duckduckgo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://duckduckgo.com/?q={}&lt;/span&gt;
&lt;span class="na"&gt;github&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://github.com/search?q={}&lt;/span&gt;
&lt;span class="na"&gt;google-scholar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://scholar.google.co.uk/scholar?hl=en&amp;amp;q={}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I also enable &lt;code&gt;save-session&lt;/code&gt; - just set it to &lt;code&gt;true&lt;/code&gt;. There are a few other tweaks, such as updating the &lt;code&gt;startpage&lt;/code&gt; to &lt;a class="reference external" href="http://start.fedoraproject.org"&gt;http://start.fedoraproject.org&lt;/a&gt;. There's even a built in ad-blocker that one can configure.&lt;/p&gt;
&lt;p&gt;To get flash working, one needs to also install the ppapi bits. Assuming one already has the flash plugin repository installed, &lt;code&gt;sudo dnf install flash-player-ppapi&lt;/code&gt; does this. I haven't gotten Netflix to work yet - it requries some Silverlight thingy. I can always run Chrome or FF for that one rare purpose anyway.&lt;/p&gt;
&lt;p&gt;There are, obviously a few limitations in the current &lt;a class="reference external" href="https://www.qutebrowser.org/"&gt;Qutebrowser&lt;/a&gt; version. The most noticeable one is probably the lack of a sync service similar to ones Firefox and Chrome provide. Google does tell me something about using &lt;a class="reference external" href="https://syncthing.net/"&gt;syncthing&lt;/a&gt; but I haven't gotten down to this yet. While it would be nice to have, it isn't quite that necessary. There isn't a password manager either. There are &lt;a class="reference external" href="https://github.com/qutebrowser/qutebrowser/issues/30"&gt;plans to develop a plug-in system&lt;/a&gt; in the pipeline to implement such features already, though. (&lt;a class="reference external" href="https://github.com/qutebrowser/qutebrowser/blob/master/doc/userscripts.asciidoc"&gt;userscripts&lt;/a&gt; seem to provide some additional functionality too.)&lt;/p&gt;
&lt;p&gt;Anyway, it's a great, quick, and lean browser if you're a &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;VIM&lt;/a&gt; addict like me, so give it a go? If you have some cycles and are intersted in some hacking, get in touch with the devs over Github too. If not, please do at least &lt;a class="reference external" href="http://ankursinha.in/2017/05/17/a-well-filed-software-issue-considerably-improves-the-chances-of-the-issue-being-fixed-quicker.html"&gt;file bugs&lt;/a&gt; if you see them.&lt;/p&gt;
&lt;p&gt;Here's a &lt;a class="reference external" href="https://www.qutebrowser.org/doc/quickstart.html"&gt;quickstart&lt;/a&gt; to quickly get up and running with. Oh, and yeah, &lt;em&gt;the mouse/touchpad works in the browser too&lt;/em&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Tech"></category><category term="Fedora"></category><category term="FlatPak"></category><category term="Free software"></category><category term="Linux"></category><category term="Python"></category><category term="Vim"></category><category term="Qutebrowser"></category></entry><entry><title>Checking your LaTeX sources for spelling errors with Hunspell</title><link href="http://ankursinha.in/2016/06/02/checking-your-latex-sources-for-spelling-errors-with-hunspell.html" rel="alternate"></link><published>2016-06-02T11:42:00+01:00</published><updated>2016-06-02T11:42:00+01:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2016-06-02:/2016/06/02/checking-your-latex-sources-for-spelling-errors-with-hunspell.html</id><summary type="html">&lt;p class="first last"&gt;For command line users that write in &lt;a class="reference external" href="https://latex-project.org/intro.html"&gt;LaTeX&lt;/a&gt;, &lt;a class="reference external" href="http://hunspell.github.io/"&gt;Hunspell&lt;/a&gt; is a great tool to check spellings.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I usually use &lt;a class="reference external" href="http://www.vim.org/"&gt;Vim&lt;/a&gt; and a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Makefile"&gt;Makefile&lt;/a&gt; when writing LaTeX documents. Even though &lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/spell.html"&gt;Vim does permit you to check your spellings&lt;/a&gt;, it's always nice to run the entire text through a standalone spell checker before passing your documents on to others.&lt;/p&gt;
&lt;p&gt;The workflow is quite simple. Once you've written your text, you commit your changes, and then you can use one of either &lt;a class="reference external" href="http://aspell.net/"&gt;Aspell&lt;/a&gt; or &lt;a class="reference external" href="http://hunspell.github.io/"&gt;Hunspell&lt;/a&gt; to check your text for spelling errors. Both provide an interactive interface that makes them easy to use.&lt;/p&gt;
&lt;p&gt;On &lt;a class="reference external" href="http://getfedora.org"&gt;Fedora&lt;/a&gt;, you can install them using &lt;code&gt;dnf&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
sudo dnf install aspell hunspell
&lt;/pre&gt;
&lt;p&gt;You'll also need to make sure you have the language files installed:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
sudo dnf install aspell-en hunspell-en
&lt;/pre&gt;
&lt;p&gt;Then, to check all your &lt;code&gt;.tex&lt;/code&gt; files, you can use something like this:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
find . -name &lt;span class="s2"&gt;&amp;quot;*.tex&amp;quot;&lt;/span&gt; -exec aspell --lang&lt;span class="o"&gt;=&lt;/span&gt;en --mode&lt;span class="o"&gt;=&lt;/span&gt;tex check &lt;span class="s2"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt; &lt;span class="c1"&gt;# Aspell
&lt;/span&gt;find . -name &lt;span class="s2"&gt;&amp;quot;*.tex&amp;quot;&lt;/span&gt; -exec hunspell -t -i utf-8 &lt;span class="s1"&gt;'{}'&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt; &lt;span class="c1"&gt;# Hunspell&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I looked around a bit, and decided to use &lt;a class="reference external" href="http://hunspell.github.io/"&gt;Hunspell&lt;/a&gt;. It's used by LibreOffice, Firefox, and other applications. I commit my work first and then run the above command which opens a window like this:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://ankursinha.in/images/hunspell-example.png"&gt;&lt;img alt="Hunspell screenshot" src="http://ankursinha.in/images/hunspell-example.png" style="width: 750px;" /&gt;&lt;/a&gt;
&lt;p&gt;Once you've gone through it and made your changes, you can then use &lt;code&gt;git diff --word-diff&lt;/code&gt; to review your changes. If you'd like to undo some of them, use &lt;code&gt;git add -i&lt;/code&gt; and so on:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://ankursinha.in/images/git-word-diff.png"&gt;&lt;img alt="Git diff screenshot" src="http://ankursinha.in/images/git-word-diff.png" style="width: 750px;" /&gt;&lt;/a&gt;
&lt;p&gt;That's it! Happy writing!&lt;/p&gt;
</content><category term="Research"></category><category term="Fedora"></category><category term="Git"></category><category term="LaTeX"></category><category term="Linux"></category><category term="Vim"></category></entry><entry><title>sli.vim - syntax file for the NEST simulator's SLI language</title><link href="http://ankursinha.in/2016/03/02/sli-vim-syntax-file-for-the-nest-simulators-sli-language.html" rel="alternate"></link><published>2016-03-02T10:53:58+00:00</published><updated>2016-03-02T10:53:58+00:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2016-03-02:/2016/03/02/sli-vim-syntax-file-for-the-nest-simulators-sli-language.html</id><summary type="html">&lt;p class="first last"&gt;I've hacked up a syntax file for &lt;a class="reference external" href="http://nest-simulator.org"&gt;NEST&lt;/a&gt;'s &lt;a class="reference external" href="http://www.nest-simulator.org/quickref/"&gt;SLI&lt;/a&gt; simulation language. It is by no means complete, but it already makes reading and writing SLI a lot easier.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I've been reading some of &lt;a class="reference external" href="http://nest-simulator.org"&gt;NEST&lt;/a&gt;'s &lt;a class="reference external" href="http://www.nest-simulator.org/quickref/"&gt;SLI&lt;/a&gt; examples to understand the simulation better. I noticed that these files had no syntax highlighting at all which made the code difficult to read. I couldn't find a syntax highlighting file for Vim anywhere so I've begun writing my own. It isn't complete, and I'm sure it's buggy, but it already seems to make reading and writing SLI easier. Here's what it makes an SLI file look like:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://ankursinha.in/images/20160302-sli-vim.png"&gt;&lt;img alt="Screenshot showing SLI syntax highlighting in Vim" class="align-center" src="http://ankursinha.in/images/20160302-sli-vim.png" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;It's just a syntax file. You can drop it in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.vim/syntax/&lt;/span&gt;&lt;/tt&gt; directory (on Linux) or you can use &lt;a class="reference external" href="https://github.com/tpope/vim-pathogen"&gt;pathogen&lt;/a&gt; and just clone the repository and so on. Once done, add this to your &lt;tt class="docutils literal"&gt;vimrc&lt;/tt&gt; file:&lt;/p&gt;
&lt;pre class="code vim literal-block"&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;BufRead&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;BufNewFile&lt;/span&gt; *.sli &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="k"&gt;filetype&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;sli
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; sli &lt;span class="k"&gt;setl&lt;/span&gt; &lt;span class="nb"&gt;foldenable&lt;/span&gt; &lt;span class="nb"&gt;foldmethod&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;syntax&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The file is &lt;a class="reference external" href="https://github.com/sanjayankur31/sli.vim"&gt;hosted on Github&lt;/a&gt;. Feel free to open issues, or even better, pull requests ;)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Research"></category><category term="Computational neuroscience"></category><category term="Fedora"></category><category term="Programming"></category><category term="Vim"></category><category term="NEST"></category><category term="sli-vim"></category></entry><entry><title>CC++ support on VIM</title><link href="http://ankursinha.in/2010/11/01/cc-support-on-vim.html" rel="alternate"></link><published>2010-11-01T15:58:00+00:00</published><updated>2010-11-01T15:58:00+00:00</updated><author><name>ankur</name></author><id>tag:ankursinha.in,2010-11-01:/2010/11/01/cc-support-on-vim.html</id><summary type="html">&lt;p&gt;I'm a regular vim user. Recently I came across the c-vim package which
adds support to vim for C and C++. Most of you are already aware of
this, for those who aren't here's a start.&lt;/p&gt;
&lt;p&gt;You can get it here
:&amp;nbsp;&lt;a class="reference external" href="http://vim.sourceforge.net/scripts/script.php?script_id=213"&gt;http://vim.sourceforge.net/scripts/script.php?script_id=213 …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm a regular vim user. Recently I came across the c-vim package which
adds support to vim for C and C++. Most of you are already aware of
this, for those who aren't here's a start.&lt;/p&gt;
&lt;p&gt;You can get it here
:&amp;nbsp;&lt;a class="reference external" href="http://vim.sourceforge.net/scripts/script.php?script_id=213"&gt;http://vim.sourceforge.net/scripts/script.php?script_id=213&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Install directions are on the page itself. (It hasn't yet been packaged
for Fedora)&lt;/p&gt;
&lt;p&gt;Since I'm pretty much a newbie myself with this one, I downloaded the
help HTML documentation&amp;nbsp;&lt;a class="reference external" href="http://lug.fh-swf.de/vim/vim-doc/csupport.html"&gt;http://lug.fh-swf.de/vim/vim-doc/csupport.html&lt;/a&gt;
and I keep it open with elinks as reference while I code.&lt;/p&gt;
&lt;p&gt;Here's a screen shot of a class I created by going &amp;quot;+c&amp;quot; :&lt;/p&gt;
&lt;p&gt;[caption id=&amp;quot;attachment_467&amp;quot; align=&amp;quot;aligncenter&amp;quot; width=&amp;quot;300&amp;quot;
caption=&amp;quot;Adding a C++ class to my file using c-vim
support&amp;quot;]&lt;a class="reference external" href="http://dodoincfedora.files.wordpress.com/2010/11/screenshot.png"&gt;&lt;img alt="image0" src="http://dodoincfedora.files.wordpress.com/2010/11/screenshot.png?w=300" /&gt;&lt;/a&gt;[/caption]&lt;/p&gt;
&lt;p&gt;It's pretty helpful once you get the hang of it. Enjoy your code.&lt;/p&gt;
</content><category term="Tech"></category><category term="Programming"></category><category term="Vim"></category></entry></feed>